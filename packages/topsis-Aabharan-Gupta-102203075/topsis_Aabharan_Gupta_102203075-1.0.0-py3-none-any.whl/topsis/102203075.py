{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "918e9375-1438-4614-933e-1198d33aec11",
   "metadata": {},
   "outputs": [],
   "source": [
    "import argparse\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "def calculate_topsis(decision_matrix, criteria_weights, criteria_impacts):\n",
    "    decision_matrix = np.array(decision_matrix, dtype=float)\n",
    "    criteria_weights = np.array(criteria_weights, dtype=float)\n",
    "\n",
    "    normalized_matrix = decision_matrix / np.sqrt((decision_matrix ** 2).sum(axis=0))\n",
    "\n",
    "    weighted_matrix = normalized_matrix * criteria_weights\n",
    "\n",
    "    ideal_best = [\n",
    "        max(weighted_matrix[:, i]) if criteria_impacts[i] == '+' else min(weighted_matrix[:, i])\n",
    "        for i in range(len(criteria_impacts))\n",
    "    ]\n",
    "    ideal_worst = [\n",
    "        min(weighted_matrix[:, i]) if criteria_impacts[i] == '+' else max(weighted_matrix[:, i])\n",
    "        for i in range(len(criteria_impacts))\n",
    "    ]\n",
    "\n",
    "    distance_to_best = np.sqrt(((weighted_matrix - ideal_best) ** 2).sum(axis=1))\n",
    "    distance_to_worst = np.sqrt(((weighted_matrix - ideal_worst) ** 2).sum(axis=1))\n",
    "\n",
    "    scores = distance_to_worst / (distance_to_best + distance_to_worst)\n",
    "\n",
    "    sorted_indices = np.argsort(scores)[::-1]\n",
    "    ranks = np.empty_like(sorted_indices)\n",
    "    current_rank = 1\n",
    "\n",
    "    for i, index in enumerate(sorted_indices):\n",
    "        if i > 0 and scores[sorted_indices[i]] != scores[sorted_indices[i - 1]]:\n",
    "            current_rank = i + 1\n",
    "        ranks[index] = current_rank\n",
    "\n",
    "    return scores, ranks\n",
    "\n",
    "def main():\n",
    "    parser = argparse.ArgumentParser(description=\"Run TOPSIS analysis on a dataset.\")\n",
    "    parser.add_argument(\"input_file\", help=\"Path to the input CSV file.\")\n",
    "    parser.add_argument(\"weights\", help=\"Comma-separated weights (e.g., 1,2,1).\")\n",
    "    parser.add_argument(\"impacts\", help=\"Comma-separated impacts (e.g., +,+,-).\")\n",
    "    parser.add_argument(\"output_file\", help=\"Path to save the output CSV file.\")\n",
    "    args = parser.parse_args()\n",
    "\n",
    "    if not os.path.isfile(args.input_file):\n",
    "        print(\"Error: Input file not found.\")\n",
    "        return\n",
    "    try:\n",
    "        dataset = pd.read_csv(args.input_file)\n",
    "    except Exception as e:\n",
    "        print(f\"Error: Failed to read input file. {e}\")\n",
    "        return\n",
    "\n",
    "    print(\"Dataset successfully loaded.\")\n",
    "    print(dataset)\n",
    "\n",
    "    if dataset.shape[1] < 3:\n",
    "        print(\"Error: Dataset must have at least one alternative column and two criteria columns.\")\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        weights = list(map(float, args.weights.split(',')))\n",
    "        impacts = args.impacts.split(',')\n",
    "    except ValueError:\n",
    "        print(\"Error: Invalid weights or impacts. Ensure weights are numbers and impacts are '+' or '-'.\")\n",
    "        return\n",
    "\n",
    "    num_criteria = dataset.shape[1] - 1\n",
    "    if len(weights) != num_criteria or len(impacts) != num_criteria:\n",
    "        print(f\"Error: Mismatch between number of criteria ({num_criteria}) and weights/impacts provided.\")\n",
    "        return\n",
    "\n",
    "    if not all(impact in ['+', '-'] for impact in impacts):\n",
    "        print(\"Error: Impacts must contain only '+' or '-'.\")\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        criteria_matrix = dataset.iloc[:, 1:].values\n",
    "        scores, ranks = calculate_topsis(criteria_matrix, weights, impacts)\n",
    "    except Exception as e:\n",
    "        print(f\"Error: Failed to perform TOPSIS analysis. {e}\")\n",
    "        return\n",
    "\n",
    "    dataset[\"Topsis Score\"] = scores\n",
    "    dataset[\"Rank\"] = ranks\n",
    "\n",
    "    try:\n",
    "        dataset.to_csv(args.output_file, index=False)\n",
    "        print(f\"Results successfully saved to {args.output_file}.\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error: Unable to save the results. {e}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

{"version":3,"file":"main.DashboardItems_SiteContext.5da80e82b29130e79e89.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/DataProvider.jsx","webpack://lino_react/./lino_react/react/components/DashboardItems.jsx"],"sourcesContent":["export const name = \"DataProvider\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as constants from './constants';\nimport { RegisterImportPool, Component } from \"./Base\";\n\nlet ex; const exModulePromises = ex = {\n    queryString: import(/* webpackChunkName: \"queryString_DataProvider\" */\"query-string\"),\n    AbortController: import(/* webpackChunkName: \"AbortController_DataProvider\" */\"abort-controller\"),\n    whatwgFetch: import(/* webpackChunkName: \"whatwgFetch_DataProvider\" */\"whatwg-fetch\"),\n    prProgressSpinner: import(/* webpackChunkName: \"prProgressSpinner_DataProvider\" */\"primereact/progressspinner\"),\n    lm: import(/* webpackChunkName: \"LoadingMask_DataProvider\" */\"./LoadingMask\"),\n    i18n: import(/* webpackChunkName: \"i18n_DataProvider\" */\"./i18n\"),\n}\nRegisterImportPool(ex);\n\n\nexport class DataProvider extends Component {\n    static requiredModules = [\n        'queryString', \"AbortController\", \"whatwgFetch\", \"prProgressSpinner\",\n        \"lm\", \"i18n\"]\n\n    static iPool = ex;\n\n    static propTypes = {\n        endpoint: PropTypes.string.isRequired,\n        render: PropTypes.func.isRequired,\n        post_data: PropTypes.func,\n        hideLoading: PropTypes.bool,\n        useEverLoaded: PropTypes.bool,\n\n    };\n    static defaultProps = {\n        post_data: (data) => (data),\n        hideLoading: false,\n        useEverLoaded: false,\n    };\n\n    async prepare() {\n        await super.prepare();\n        this.ex.i18n = this.ex.i18n.default;\n    }\n\n    constructor() {\n        super();\n        this.state = {\n            ...this.state,\n            data: [],\n            loaded: false,\n            placeholder: \"Loading...\",\n            actorID: null,\n        };\n        this.reloadData = this.reloadData.bind(this);\n        this.reload = this.reloadData;\n        this.update = this.reloadData;\n    }\n\n    onReady() {\n        this.controller = new this.ex.AbortController.default();\n        this.reloadData();\n    }\n\n    componentWillUnmount() {\n        this.controller.abort();\n        delete window.App.URLContext.globals.panels[this.state.actorID];\n    }\n\n    liveUpdate = (params) => this.update();\n\n    reloadData() {\n        this.setState({loaded: false});\n        let query = {fmt: \"json\"}\n        window.App.URLContext.actionHandler.defaultParams(query);\n        this.ex.whatwgFetch.fetch(this.props.endpoint + `?${this.ex.queryString.default.stringify(query)}`, {\n            signal: this.controller.signal})\n            .then(response => {\n                if (response.status !== 200) {\n                    this.setState({placeholder: this.ex.i18n.t(\"Something went wrong\")});\n                    return {status:response.status$} //\n                }\n                return response.json();\n            })\n            .then(data => {\n                this.props.post_data(data);\n                this.setState({data: data, loaded: true,\n                    everloaded: true, actorID: data.actorID});\n                window.App.URLContext.globals.panels[data.actorID] = this;\n            }).catch(function(ex) {\n              if (ex.name === 'AbortError') {\n                console.log('request aborted', ex)\n              }\n            })\n    };\n\n    render() {\n        if (!this.state.ready) return null;\n        const {data, loaded, placeholder, everloaded} = this.state;\n        const {render} = this.props;\n        // const Comp = \"Table\";\n        // return loaded ? this.props.render(data, Comp) : <p>{placeholder}</p>;\n        if (everloaded && !loaded) {\n            // is loading with data, use loading mask\n            return <this.ex.lm.LoadingMask mask={true}>\n                {render(data)}\n            </this.ex.lm.LoadingMask>\n        }\n        else {\n            return <this.ex.lm.LoadingMask mask={false}>\n                {loaded || everloaded && this.props.useEverLoaded\n                    ? render(data) : this.props.hideLoading ? <div/> : <this.ex.prProgressSpinner.ProgressSpinner/>}\n            </this.ex.lm.LoadingMask>\n        }\n    }\n}\n","export const name = \"DashboardItems\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { RegisterImportPool, Component } from \"./Base\";\n\nimport { DataProvider } from \"./DataProvider\";\n\nlet ex; const exModulePromises = ex = {\n    prButton: import(/* webpackChunkName: \"prButton_DashboardItems\" */\"primereact/button\"),\n    lm: import(/* webpackChunkName: \"LoadingMask_DashboardItems\" */\"./LoadingMask\"),\n}\nRegisterImportPool(ex);\n\n\nexport class DashboardItems extends Component {\n    static requiredModules = [\"prButton\", \"lm\"];\n    static iPool = ex;\n    static propTypes = {\n        // dashboard_items: PropTypes.number.\n        user: PropTypes.string\n    };\n    static defaultProps = {\n        P: 0\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            ...this.state,\n            stamp: Date(),\n            unloaded: true,\n        };\n        // this.method = this.method.bind(this);\n        this.reloadData = this.reload;\n        this.onDataGet = this.onDataGet.bind(this)\n    }\n\n    // method() {return this.props.}\n\n    reload() {\n        // this.setState({ // Set new stamp forcing reloading of each DP\n        //     stamp:Date()\n        // });\n        Object.keys(window.App.rps).filter(k => k.includes(\"dashboard\")).forEach(d => {\n            window.App.rps[d].reload();\n        })\n    }\n\n    onDataGet(d) {\n        this.setState({\n            unloaded: false\n        })\n    }\n\n    renderDashboard(showReloadButton, rp) {\n        return (data) => {\n            if (data.version_mismatch && rp === \"dashboard-0\") {\n                window.App.reload();\n                return\n            }\n            if (data.html) {\n                return <div>\n                    {showReloadButton && <this.ex.prButton.Button icon={\"pi pi-refresh\"} style={{float:\"right\"}} onClick={() => {\n                        let dp = window.App.rps[rp];\n                        dp && dp.reload();\n                    }\n                    }/>}\n                    <div dangerouslySetInnerHTML={{__html: data.html}}></div>\n                </div>\n            }\n        }\n    }\n\n    render() {\n        if (!this.state.ready) return null;\n        const S = this.state;\n        const P = this.props;\n        let len = P.dashboard_items;\n        if (len === undefined) {\n            len = 0\n        }\n        // const Comp = \"Table\";\n        // return loaded ? this.props.render(data, Comp) : <p>{placeholder}</p>;\n        return <this.ex.lm.LoadingMask mask={S.unloaded} fillHeight={true} backgroundColor={\"\"}>\n            <DataProvider\n                ref={(el) => {\n                    window.App.setRpRef(el, `dashboard-main`)\n                }}\n                key={`${P.user}-${S.stamp}`}\n                endpoint={\"api/main_html\"}\n                useEverLoaded={true}\n                hideLoading={true}\n                post_data={this.onDataGet}\n                render={this.renderDashboard(false, `dashboard-main`)}\n            />\n            {[...Array(len).keys()].map(i =>\n                <DataProvider\n                    key={`${P.user}-${i}-${S.stamp}`}\n                    ref={(el) => {\n                        window.App.setRpRef(el, `dashboard-${i}`)\n                    }}\n                    endpoint={`dashboard/${i}`}\n                    post_data={this.onDataGet}\n                    hideLoading={true}\n                    render={this.renderDashboard(true, `dashboard-${i}`)}\n                />)\n            }\n        </this.ex.lm.LoadingMask>\n    }\n}\n"],"names":["ex","queryString","AbortController","whatwgFetch","prProgressSpinner","lm","i18n","RegisterImportPool","DataProvider","Component","prepare","super","this","default","constructor","liveUpdate","params","update","state","data","loaded","placeholder","actorID","reloadData","bind","reload","onReady","controller","componentWillUnmount","abort","window","App","URLContext","globals","panels","setState","query","fmt","actionHandler","defaultParams","fetch","props","endpoint","stringify","signal","then","response","status","t","status$","json","post_data","everloaded","catch","name","console","log","render","ready","_jsx","LoadingMask","mask","children","useEverLoaded","hideLoading","ProgressSpinner","requiredModules","iPool","propTypes","PropTypes","isRequired","defaultProps","prButton","DashboardItems","stamp","Date","unloaded","onDataGet","Object","keys","rps","filter","k","includes","forEach","d","renderDashboard","showReloadButton","rp","version_mismatch","html","_jsxs","Button","icon","style","float","onClick","dp","dangerouslySetInnerHTML","__html","S","P","len","dashboard_items","undefined","fillHeight","backgroundColor","ref","el","setRpRef","user","Array","map","i"],"sourceRoot":""}
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings


try:
    from yandex.cloud.priv.servicecontrol.v1 import access_service_pb2 as yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2
except ImportError:
    from datasphere.yandex.cloud.priv.servicecontrol.v1 import access_service_pb2 as yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2


GRPC_GENERATED_VERSION = '1.63.2'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in yandex/cloud/priv/servicecontrol/v1/access_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class AccessServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/yandex.cloud.priv.servicecontrol.v1.AccessService/Authenticate',
                request_serializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthenticateRequest.SerializeToString,
                response_deserializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthenticateResponse.FromString,
                _registered_method=True)
        self.Authorize = channel.unary_unary(
                '/yandex.cloud.priv.servicecontrol.v1.AccessService/Authorize',
                request_serializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthorizeRequest.SerializeToString,
                response_deserializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthorizeResponse.FromString,
                _registered_method=True)


class AccessServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Verify the identity of a subject.

        gRPC error codes

        Ok:              the provided credentials are valid
        Unauthenticated: the provided credentials are invalid or may have expired
        InvalidArgument: the client specified an invalid argument (please note that this applies to the request in itself,
        not to the content of the request, i.e. you will get the InvalidArgument error if the message
        size exceeds the server limit but Unauthenticated if the token format is not recognized)
        Unavailable:     the service is currently unavailable, the client should retry again
        Internal:        the service is broken

        Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authorize(self, request, context):
        """Check if a subject is allowed to perform an action. This also authenticates the subject if any credentials are
        passed as an identity.

        gRPC error codes

        Ok:               the provided credentials (if any) are valid and the subject has permissions to access the
        specified resource
        Unauthenticated:  the provided credentials are invalid or may have expired
        PermissionDenied: the subject does not have permissions to access the specified resource
        InvalidArgument:  the client specified an invalid argument (please note that this applies to the request in itself,
        not to the content of the request, i.e. you will get the InvalidArgument error if the message
        size exceeds the server limit or the specified permission does not exist but Unauthenticated if
        the token format is not recognized)
        Unavailable:      the service is currently unavailable, the client should retry again
        Internal:         the service is broken

        Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccessServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthenticateRequest.FromString,
                    response_serializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthenticateResponse.SerializeToString,
            ),
            'Authorize': grpc.unary_unary_rpc_method_handler(
                    servicer.Authorize,
                    request_deserializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthorizeRequest.FromString,
                    response_serializer=yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthorizeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'yandex.cloud.priv.servicecontrol.v1.AccessService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccessService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yandex.cloud.priv.servicecontrol.v1.AccessService/Authenticate',
            yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthenticateRequest.SerializeToString,
            yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Authorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yandex.cloud.priv.servicecontrol.v1.AccessService/Authorize',
            yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthorizeRequest.SerializeToString,
            yandex_dot_cloud_dot_priv_dot_servicecontrol_dot_v1_dot_access__service__pb2.AuthorizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

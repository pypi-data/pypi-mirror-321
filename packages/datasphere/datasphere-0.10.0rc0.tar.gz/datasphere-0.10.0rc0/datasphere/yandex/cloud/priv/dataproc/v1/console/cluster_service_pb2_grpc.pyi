"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.dataproc.v1.cluster_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.dataproc.v1.cluster_service_pb2


try:
    import yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ClusterServiceStub:
    """Methods for cluster console support."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    EstimateCreate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.v1.cluster_service_pb2.CreateClusterRequest,
        yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.BillingEstimateResponse,
    ]
    """Estimate billing metrics of the cluster"""

    GetConfig: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.GetClustersConfigRequest,
        yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.ClustersConfig,
    ]
    """Get available cluster options"""

class ClusterServiceAsyncStub:
    """Methods for cluster console support."""

    EstimateCreate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.v1.cluster_service_pb2.CreateClusterRequest,
        yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.BillingEstimateResponse,
    ]
    """Estimate billing metrics of the cluster"""

    GetConfig: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.GetClustersConfigRequest,
        yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.ClustersConfig,
    ]
    """Get available cluster options"""

class ClusterServiceServicer(metaclass=abc.ABCMeta):
    """Methods for cluster console support."""

    @abc.abstractmethod
    def EstimateCreate(
        self,
        request: yandex.cloud.priv.dataproc.v1.cluster_service_pb2.CreateClusterRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.BillingEstimateResponse, collections.abc.Awaitable[yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.BillingEstimateResponse]]:
        """Estimate billing metrics of the cluster"""

    @abc.abstractmethod
    def GetConfig(
        self,
        request: yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.GetClustersConfigRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.ClustersConfig, collections.abc.Awaitable[yandex.cloud.priv.dataproc.v1.console.cluster_service_pb2.ClustersConfig]]:
        """Get available cluster options"""

def add_ClusterServiceServicer_to_server(servicer: ClusterServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

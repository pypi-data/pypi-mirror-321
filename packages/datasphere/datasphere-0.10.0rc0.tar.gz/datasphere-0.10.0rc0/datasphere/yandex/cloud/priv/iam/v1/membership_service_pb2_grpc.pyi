"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.iam.v1.membership_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.iam.v1.membership_service_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MembershipServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListResourceMembers: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListResourceMembersRequest,
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListResourceMembersResponse,
    ]

    ListMemberResources: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListMemberResourcesRequest,
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListMemberResourcesResponse,
    ]
    """List member resources for specified resource type. Response resources are sorted by resource_id."""

    FilterResourceMembers: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.membership_service_pb2.FilterResourceMembersRequest,
        yandex.cloud.priv.iam.v1.membership_service_pb2.FilterResourceMembersResponse,
    ]
    """Filter resource members for specified resource. Only resource members are returned in response."""

class MembershipServiceAsyncStub:
    ListResourceMembers: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListResourceMembersRequest,
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListResourceMembersResponse,
    ]

    ListMemberResources: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListMemberResourcesRequest,
        yandex.cloud.priv.iam.v1.membership_service_pb2.ListMemberResourcesResponse,
    ]
    """List member resources for specified resource type. Response resources are sorted by resource_id."""

    FilterResourceMembers: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.membership_service_pb2.FilterResourceMembersRequest,
        yandex.cloud.priv.iam.v1.membership_service_pb2.FilterResourceMembersResponse,
    ]
    """Filter resource members for specified resource. Only resource members are returned in response."""

class MembershipServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListResourceMembers(
        self,
        request: yandex.cloud.priv.iam.v1.membership_service_pb2.ListResourceMembersRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.membership_service_pb2.ListResourceMembersResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.membership_service_pb2.ListResourceMembersResponse]]: ...

    @abc.abstractmethod
    def ListMemberResources(
        self,
        request: yandex.cloud.priv.iam.v1.membership_service_pb2.ListMemberResourcesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.membership_service_pb2.ListMemberResourcesResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.membership_service_pb2.ListMemberResourcesResponse]]:
        """List member resources for specified resource type. Response resources are sorted by resource_id."""

    @abc.abstractmethod
    def FilterResourceMembers(
        self,
        request: yandex.cloud.priv.iam.v1.membership_service_pb2.FilterResourceMembersRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.membership_service_pb2.FilterResourceMembersResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.membership_service_pb2.FilterResourceMembersResponse]]:
        """Filter resource members for specified resource. Only resource members are returned in response."""

def add_MembershipServiceServicer_to_server(servicer: MembershipServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

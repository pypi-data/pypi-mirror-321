"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.servicecontrol.v1.access_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.servicecontrol.v1.access_service_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AccessServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Authenticate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthenticateRequest,
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthenticateResponse,
    ]
    """Verify the identity of a subject.

    gRPC error codes

    Ok:              the provided credentials are valid
    Unauthenticated: the provided credentials are invalid or may have expired
    InvalidArgument: the client specified an invalid argument (please note that this applies to the request in itself,
                     not to the content of the request, i.e. you will get the InvalidArgument error if the message
                     size exceeds the server limit but Unauthenticated if the token format is not recognized)
    Unavailable:     the service is currently unavailable, the client should retry again
    Internal:        the service is broken

    Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
    """

    Authorize: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthorizeRequest,
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthorizeResponse,
    ]
    """Check if a subject is allowed to perform an action. This also authenticates the subject if any credentials are
    passed as an identity.

    gRPC error codes

    Ok:               the provided credentials (if any) are valid and the subject has permissions to access the
                      specified resource
    Unauthenticated:  the provided credentials are invalid or may have expired
    PermissionDenied: the subject does not have permissions to access the specified resource
    InvalidArgument:  the client specified an invalid argument (please note that this applies to the request in itself,
                      not to the content of the request, i.e. you will get the InvalidArgument error if the message
                      size exceeds the server limit or the specified permission does not exist but Unauthenticated if
                      the token format is not recognized)
    Unavailable:      the service is currently unavailable, the client should retry again
    Internal:         the service is broken

    Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
    """

class AccessServiceAsyncStub:
    Authenticate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthenticateRequest,
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthenticateResponse,
    ]
    """Verify the identity of a subject.

    gRPC error codes

    Ok:              the provided credentials are valid
    Unauthenticated: the provided credentials are invalid or may have expired
    InvalidArgument: the client specified an invalid argument (please note that this applies to the request in itself,
                     not to the content of the request, i.e. you will get the InvalidArgument error if the message
                     size exceeds the server limit but Unauthenticated if the token format is not recognized)
    Unavailable:     the service is currently unavailable, the client should retry again
    Internal:        the service is broken

    Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
    """

    Authorize: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthorizeRequest,
        yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthorizeResponse,
    ]
    """Check if a subject is allowed to perform an action. This also authenticates the subject if any credentials are
    passed as an identity.

    gRPC error codes

    Ok:               the provided credentials (if any) are valid and the subject has permissions to access the
                      specified resource
    Unauthenticated:  the provided credentials are invalid or may have expired
    PermissionDenied: the subject does not have permissions to access the specified resource
    InvalidArgument:  the client specified an invalid argument (please note that this applies to the request in itself,
                      not to the content of the request, i.e. you will get the InvalidArgument error if the message
                      size exceeds the server limit or the specified permission does not exist but Unauthenticated if
                      the token format is not recognized)
    Unavailable:      the service is currently unavailable, the client should retry again
    Internal:         the service is broken

    Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
    """

class AccessServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Authenticate(
        self,
        request: yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthenticateRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthenticateResponse, collections.abc.Awaitable[yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthenticateResponse]]:
        """Verify the identity of a subject.

        gRPC error codes

        Ok:              the provided credentials are valid
        Unauthenticated: the provided credentials are invalid or may have expired
        InvalidArgument: the client specified an invalid argument (please note that this applies to the request in itself,
                         not to the content of the request, i.e. you will get the InvalidArgument error if the message
                         size exceeds the server limit but Unauthenticated if the token format is not recognized)
        Unavailable:     the service is currently unavailable, the client should retry again
        Internal:        the service is broken

        Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
        """

    @abc.abstractmethod
    def Authorize(
        self,
        request: yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthorizeRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthorizeResponse, collections.abc.Awaitable[yandex.cloud.priv.servicecontrol.v1.access_service_pb2.AuthorizeResponse]]:
        """Check if a subject is allowed to perform an action. This also authenticates the subject if any credentials are
        passed as an identity.

        gRPC error codes

        Ok:               the provided credentials (if any) are valid and the subject has permissions to access the
                          specified resource
        Unauthenticated:  the provided credentials are invalid or may have expired
        PermissionDenied: the subject does not have permissions to access the specified resource
        InvalidArgument:  the client specified an invalid argument (please note that this applies to the request in itself,
                          not to the content of the request, i.e. you will get the InvalidArgument error if the message
                          size exceeds the server limit or the specified permission does not exist but Unauthenticated if
                          the token format is not recognized)
        Unavailable:      the service is currently unavailable, the client should retry again
        Internal:         the service is broken

        Please note that these do not include client-side errors (e.g. Cancelled, DeadlineExceeded, etc.)
        """

def add_AccessServiceServicer_to_server(servicer: AccessServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

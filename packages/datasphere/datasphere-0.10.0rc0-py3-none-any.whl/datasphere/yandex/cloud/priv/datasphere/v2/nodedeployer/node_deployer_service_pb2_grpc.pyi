"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class NodeDeployerServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListGroups: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListGroupsResponse,
    ]
    """List groups accessible by user"""

    ListNodes: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListNodesRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListNodesResponse,
    ]
    """List nodes on one group"""

    GetNode: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.GetNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.GetNodeResponse,
    ]

    CreateNode: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.CreateNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.CreateNodeResponse,
    ]

    UpdateNode: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.UpdateNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.UpdateNodeResponse,
    ]

    DeleteNode: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.DeleteNodeRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    SuspendNode: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.SuspendNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.SuspendNodeResponse,
    ]

    ResumeNode: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ResumeNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ResumeNodeResponse,
    ]

class NodeDeployerServiceAsyncStub:
    ListGroups: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListGroupsResponse,
    ]
    """List groups accessible by user"""

    ListNodes: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListNodesRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListNodesResponse,
    ]
    """List nodes on one group"""

    GetNode: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.GetNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.GetNodeResponse,
    ]

    CreateNode: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.CreateNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.CreateNodeResponse,
    ]

    UpdateNode: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.UpdateNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.UpdateNodeResponse,
    ]

    DeleteNode: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.DeleteNodeRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    SuspendNode: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.SuspendNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.SuspendNodeResponse,
    ]

    ResumeNode: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ResumeNodeRequest,
        yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ResumeNodeResponse,
    ]

class NodeDeployerServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListGroups(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListGroupsResponse, collections.abc.Awaitable[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListGroupsResponse]]:
        """List groups accessible by user"""

    @abc.abstractmethod
    def ListNodes(
        self,
        request: yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListNodesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListNodesResponse, collections.abc.Awaitable[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ListNodesResponse]]:
        """List nodes on one group"""

    @abc.abstractmethod
    def GetNode(
        self,
        request: yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.GetNodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.GetNodeResponse, collections.abc.Awaitable[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.GetNodeResponse]]: ...

    @abc.abstractmethod
    def CreateNode(
        self,
        request: yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.CreateNodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.CreateNodeResponse, collections.abc.Awaitable[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.CreateNodeResponse]]: ...

    @abc.abstractmethod
    def UpdateNode(
        self,
        request: yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.UpdateNodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.UpdateNodeResponse, collections.abc.Awaitable[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.UpdateNodeResponse]]: ...

    @abc.abstractmethod
    def DeleteNode(
        self,
        request: yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.DeleteNodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

    @abc.abstractmethod
    def SuspendNode(
        self,
        request: yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.SuspendNodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.SuspendNodeResponse, collections.abc.Awaitable[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.SuspendNodeResponse]]: ...

    @abc.abstractmethod
    def ResumeNode(
        self,
        request: yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ResumeNodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ResumeNodeResponse, collections.abc.Awaitable[yandex.cloud.priv.datasphere.v2.nodedeployer.node_deployer_service_pb2.ResumeNodeResponse]]: ...

def add_NodeDeployerServiceServicer_to_server(servicer: NodeDeployerServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.iam.v1.console.access_binding_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.iam.v1.console.access_binding_service_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class AccessBindingServiceStub:
    """Important thing to note here is that access bindings listing response is leaking information.
    By providing "inherited_from" field, access bindings from resources other than specified one
    are inadvertently disclosed. Those are the access bindings the user might not have had permissions
    to read.
    It was decided however to greenlight this approach since it was considered more "harmful" to
    not let the end user see that other subjects might have access to his generally private resources,
    rather than trying to maximize security on a method level.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListAccessBindings: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListAccessBindingsRequest,
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListAccessBindingsResponse,
    ]

    ListBySubject: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListSubjectAccessBindingsRequest,
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListSubjectAccessBindingsResponse,
    ]

class AccessBindingServiceAsyncStub:
    """Important thing to note here is that access bindings listing response is leaking information.
    By providing "inherited_from" field, access bindings from resources other than specified one
    are inadvertently disclosed. Those are the access bindings the user might not have had permissions
    to read.
    It was decided however to greenlight this approach since it was considered more "harmful" to
    not let the end user see that other subjects might have access to his generally private resources,
    rather than trying to maximize security on a method level.
    """

    ListAccessBindings: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListAccessBindingsRequest,
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListAccessBindingsResponse,
    ]

    ListBySubject: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListSubjectAccessBindingsRequest,
        yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListSubjectAccessBindingsResponse,
    ]

class AccessBindingServiceServicer(metaclass=abc.ABCMeta):
    """Important thing to note here is that access bindings listing response is leaking information.
    By providing "inherited_from" field, access bindings from resources other than specified one
    are inadvertently disclosed. Those are the access bindings the user might not have had permissions
    to read.
    It was decided however to greenlight this approach since it was considered more "harmful" to
    not let the end user see that other subjects might have access to his generally private resources,
    rather than trying to maximize security on a method level.
    """

    @abc.abstractmethod
    def ListAccessBindings(
        self,
        request: yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListAccessBindingsResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListAccessBindingsResponse]]: ...

    @abc.abstractmethod
    def ListBySubject(
        self,
        request: yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListSubjectAccessBindingsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListSubjectAccessBindingsResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.console.access_binding_service_pb2.ListSubjectAccessBindingsResponse]]: ...

def add_AccessBindingServiceServicer_to_server(servicer: AccessBindingServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Internal management API"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.iam.v1.inner.load_reporting_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.iam.v1.inner.load_reporting_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class LoadReportingServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.inner.load_reporting_pb2.GetLoadReportingRequest,
        yandex.cloud.priv.iam.v1.inner.load_reporting_pb2.GetLoadReportingResponse,
    ]
    """Returns current load as a double value between 0.0 and 1.0"""

class LoadReportingServiceAsyncStub:
    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.inner.load_reporting_pb2.GetLoadReportingRequest,
        yandex.cloud.priv.iam.v1.inner.load_reporting_pb2.GetLoadReportingResponse,
    ]
    """Returns current load as a double value between 0.0 and 1.0"""

class LoadReportingServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.priv.iam.v1.inner.load_reporting_pb2.GetLoadReportingRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.inner.load_reporting_pb2.GetLoadReportingResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.inner.load_reporting_pb2.GetLoadReportingResponse]]:
        """Returns current load as a double value between 0.0 and 1.0"""

def add_LoadReportingServiceServicer_to_server(servicer: LoadReportingServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

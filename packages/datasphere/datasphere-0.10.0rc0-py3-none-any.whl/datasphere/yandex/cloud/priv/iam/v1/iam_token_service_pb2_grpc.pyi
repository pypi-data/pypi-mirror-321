"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.iam.v1.iam_token_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.iam.v1.iam_token_service_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class IamTokenServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """method doesn't require auth"""

    CreateForAccessKey: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForAccessKeyRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for service account using access key"""

    CreateForServiceAccount: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForServiceAccountRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for service account"""

    CreateForService: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForServiceRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for service"""

    CreateForComputeInstance: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForComputeInstanceRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for compute instance"""

    CreateForUserAccount: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForSubjectRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for oauth request"""

    CreateForSubject: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForSubjectRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for oauth request"""

    Revoke: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.RevokeIamTokenRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.RevokeIamTokenResponse,
    ]

    Exchange: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.ExchangeIamTokenRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.ExchangeIamTokenResponse,
    ]

class IamTokenServiceAsyncStub:
    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """method doesn't require auth"""

    CreateForAccessKey: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForAccessKeyRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for service account using access key"""

    CreateForServiceAccount: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForServiceAccountRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for service account"""

    CreateForService: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForServiceRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for service"""

    CreateForComputeInstance: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForComputeInstanceRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for compute instance"""

    CreateForUserAccount: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForSubjectRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for oauth request"""

    CreateForSubject: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForSubjectRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse,
    ]
    """create iam token for oauth request"""

    Revoke: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.RevokeIamTokenRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.RevokeIamTokenResponse,
    ]

    Exchange: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.ExchangeIamTokenRequest,
        yandex.cloud.priv.iam.v1.iam_token_service_pb2.ExchangeIamTokenResponse,
    ]

class IamTokenServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse]]:
        """method doesn't require auth"""

    @abc.abstractmethod
    def CreateForAccessKey(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForAccessKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse]]:
        """create iam token for service account using access key"""

    @abc.abstractmethod
    def CreateForServiceAccount(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForServiceAccountRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse]]:
        """create iam token for service account"""

    @abc.abstractmethod
    def CreateForService(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForServiceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse]]:
        """create iam token for service"""

    @abc.abstractmethod
    def CreateForComputeInstance(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForComputeInstanceRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse]]:
        """create iam token for compute instance"""

    @abc.abstractmethod
    def CreateForUserAccount(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForSubjectRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse]]:
        """create iam token for oauth request"""

    @abc.abstractmethod
    def CreateForSubject(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenForSubjectRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.CreateIamTokenResponse]]:
        """create iam token for oauth request"""

    @abc.abstractmethod
    def Revoke(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.RevokeIamTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.RevokeIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.RevokeIamTokenResponse]]: ...

    @abc.abstractmethod
    def Exchange(
        self,
        request: yandex.cloud.priv.iam.v1.iam_token_service_pb2.ExchangeIamTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.iam_token_service_pb2.ExchangeIamTokenResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.iam_token_service_pb2.ExchangeIamTokenResponse]]: ...

def add_IamTokenServiceServicer_to_server(servicer: IamTokenServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

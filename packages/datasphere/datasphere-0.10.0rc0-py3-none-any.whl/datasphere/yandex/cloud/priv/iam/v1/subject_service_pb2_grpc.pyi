"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.iam.v1.subject_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.iam.v1.subject_service_pb2


try:
    import yandex.cloud.priv.operation.operation_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.operation.operation_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SubjectServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetOrCreate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.GetOrCreateSubjectRequest,
        yandex.cloud.priv.iam.v1.subject_service_pb2.GetOrCreateSubjectResponse,
    ]

    Merge: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.MergeSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.DeleteSubjectRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]

    BulkGetOrCreate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkGetOrCreateSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """----------------------- SubjectServiceV2 methods -----------------------

    Create new subjects or get existing.
    Method creates non-existent subjects and returns ones that were already present.
    """

    BulkUpdate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkUpdateSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Update subjects.
    Method skips non-existent subjects and returns ones that were actually updated.
    """

    BulkCreateOrUpdate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkCreateOrUpdateSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Create new subjects or update existing."""

    BulkDelete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkDeleteSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Delete subjects.
    Method skips non-existent subjects and returns ones that were actually deleted.
    """

    BulkMerge: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkMergeSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Merge subjects into one.
    Method returns NOT_FOUND if any of the specified subjects does not exist.
    """

class SubjectServiceAsyncStub:
    GetOrCreate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.GetOrCreateSubjectRequest,
        yandex.cloud.priv.iam.v1.subject_service_pb2.GetOrCreateSubjectResponse,
    ]

    Merge: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.MergeSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.DeleteSubjectRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]

    BulkGetOrCreate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkGetOrCreateSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """----------------------- SubjectServiceV2 methods -----------------------

    Create new subjects or get existing.
    Method creates non-existent subjects and returns ones that were already present.
    """

    BulkUpdate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkUpdateSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Update subjects.
    Method skips non-existent subjects and returns ones that were actually updated.
    """

    BulkCreateOrUpdate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkCreateOrUpdateSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Create new subjects or update existing."""

    BulkDelete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkDeleteSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Delete subjects.
    Method skips non-existent subjects and returns ones that were actually deleted.
    """

    BulkMerge: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.iam.v1.subject_service_pb2.BulkMergeSubjectsRequest,
        yandex.cloud.priv.operation.operation_pb2.Operation,
    ]
    """Merge subjects into one.
    Method returns NOT_FOUND if any of the specified subjects does not exist.
    """

class SubjectServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetOrCreate(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.GetOrCreateSubjectRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.subject_service_pb2.GetOrCreateSubjectResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.subject_service_pb2.GetOrCreateSubjectResponse]]: ...

    @abc.abstractmethod
    def Merge(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.MergeSubjectsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.priv.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.DeleteSubjectRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.priv.operation.operation_pb2.Operation]]: ...

    @abc.abstractmethod
    def BulkGetOrCreate(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.BulkGetOrCreateSubjectsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.priv.operation.operation_pb2.Operation]]:
        """----------------------- SubjectServiceV2 methods -----------------------

        Create new subjects or get existing.
        Method creates non-existent subjects and returns ones that were already present.
        """

    @abc.abstractmethod
    def BulkUpdate(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.BulkUpdateSubjectsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.priv.operation.operation_pb2.Operation]]:
        """Update subjects.
        Method skips non-existent subjects and returns ones that were actually updated.
        """

    @abc.abstractmethod
    def BulkCreateOrUpdate(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.BulkCreateOrUpdateSubjectsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.priv.operation.operation_pb2.Operation]]:
        """Create new subjects or update existing."""

    @abc.abstractmethod
    def BulkDelete(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.BulkDeleteSubjectsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.priv.operation.operation_pb2.Operation]]:
        """Delete subjects.
        Method skips non-existent subjects and returns ones that were actually deleted.
        """

    @abc.abstractmethod
    def BulkMerge(
        self,
        request: yandex.cloud.priv.iam.v1.subject_service_pb2.BulkMergeSubjectsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.priv.operation.operation_pb2.Operation]]:
        """Merge subjects into one.
        Method returns NOT_FOUND if any of the specified subjects does not exist.
        """

def add_SubjectServiceServicer_to_server(servicer: SubjectServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

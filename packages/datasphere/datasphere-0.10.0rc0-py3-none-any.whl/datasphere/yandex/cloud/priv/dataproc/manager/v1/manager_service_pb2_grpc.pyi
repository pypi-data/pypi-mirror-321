"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing

try:
    import yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2
except ImportError:
    import datasphere.yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2


_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DataprocManagerServiceStub:
    """Dataproc manager service defifnition"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Report: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ReportRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ReportReply,
    ]
    """Sends a status report from a host"""

    ClusterHealth: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ClusterHealthRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ClusterHealthReply,
    ]
    """Gets a cluster health info by cid"""

    HostsHealth: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.HostsHealthRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.HostsHealthReply,
    ]
    """Gets a hosts health info by fqdn"""

    Decommission: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionReply,
    ]
    """Start decommission process for the specified hosts of the cluster"""

    DecommissionStatus: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionStatusRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionStatusReply,
    ]
    """Get decommission status of the cluster"""

    MetricsAgentStatus: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.MetricsAgentStatusRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.MetricsAgentStatusReply,
    ]
    """Get metrics agent status"""

class DataprocManagerServiceAsyncStub:
    """Dataproc manager service defifnition"""

    Report: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ReportRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ReportReply,
    ]
    """Sends a status report from a host"""

    ClusterHealth: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ClusterHealthRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ClusterHealthReply,
    ]
    """Gets a cluster health info by cid"""

    HostsHealth: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.HostsHealthRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.HostsHealthReply,
    ]
    """Gets a hosts health info by fqdn"""

    Decommission: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionReply,
    ]
    """Start decommission process for the specified hosts of the cluster"""

    DecommissionStatus: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionStatusRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionStatusReply,
    ]
    """Get decommission status of the cluster"""

    MetricsAgentStatus: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.MetricsAgentStatusRequest,
        yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.MetricsAgentStatusReply,
    ]
    """Get metrics agent status"""

class DataprocManagerServiceServicer(metaclass=abc.ABCMeta):
    """Dataproc manager service defifnition"""

    @abc.abstractmethod
    def Report(
        self,
        request: yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ReportReply, collections.abc.Awaitable[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ReportReply]]:
        """Sends a status report from a host"""

    @abc.abstractmethod
    def ClusterHealth(
        self,
        request: yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ClusterHealthRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ClusterHealthReply, collections.abc.Awaitable[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.ClusterHealthReply]]:
        """Gets a cluster health info by cid"""

    @abc.abstractmethod
    def HostsHealth(
        self,
        request: yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.HostsHealthRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.HostsHealthReply, collections.abc.Awaitable[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.HostsHealthReply]]:
        """Gets a hosts health info by fqdn"""

    @abc.abstractmethod
    def Decommission(
        self,
        request: yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionReply, collections.abc.Awaitable[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionReply]]:
        """Start decommission process for the specified hosts of the cluster"""

    @abc.abstractmethod
    def DecommissionStatus(
        self,
        request: yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionStatusReply, collections.abc.Awaitable[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.DecommissionStatusReply]]:
        """Get decommission status of the cluster"""

    @abc.abstractmethod
    def MetricsAgentStatus(
        self,
        request: yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.MetricsAgentStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.MetricsAgentStatusReply, collections.abc.Awaitable[yandex.cloud.priv.dataproc.manager.v1.manager_service_pb2.MetricsAgentStatusReply]]:
        """Get metrics agent status"""

def add_DataprocManagerServiceServicer_to_server(servicer: DataprocManagerServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

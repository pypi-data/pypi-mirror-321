"use strict";(self.webpackChunkpixi_kernel=self.webpackChunkpixi_kernel||[]).push([[935],{935:(e,r,t)=>{t.r(r),t.d(r,{default:()=>u});var n=t(594),o=t(228),i=t(960),a=t(345),s=t.n(a),c=t(597),l=t(358);const u={id:"pixi-kernel:plugin",description:"Jupyter kernels using Pixi for reproducible notebooks.",autoStart:!0,requires:[i.IFormRendererRegistry,o.INotebookTracker],activate:(e,r,t)=>{try{const e={widgetRenderer:e=>(e=>{const[r,t]=(0,a.useState)([""]);return(0,a.useEffect)((()=>{(async()=>{var r,n;try{const o=(null===(n=null===(r=e.nbTracker)||void 0===r?void 0:r.currentWidget)||void 0===n?void 0:n.context.path)||"",i=c.PageConfig.getOption("serverRoot")||"",a=await async function(e="",r={}){const t=l.ServerConnection.makeSettings(),n=c.URLExt.join(t.baseUrl,"pixi-kernel",e);let o;try{o=await l.ServerConnection.makeRequest(n,r,t)}catch(e){throw new l.ServerConnection.NetworkError(e)}let i=await o.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",o)}if(!o.ok)throw new l.ServerConnection.ResponseError(o,i.message||i);return i}("envs",{method:"POST",body:JSON.stringify({relativePath:o,serverRoot:i})});t(a)}catch(e){console.error("Failed to fetch environments:",e),t([""])}})()}),[e.nbTracker]),s().createElement("select",{id:e.id,className:"form-control",value:e.value||"",onChange:r=>e.onChange(r.target.value),required:e.required},r.map((e=>s().createElement("option",{key:e,value:e},e))))})({...e,nbTracker:t})};r.addRenderer("pixi-kernel:plugin.pixi-envs",e)}catch(e){(0,n.showErrorMessage)("Pixi Kernel Error",{message:s().createElement("pre",null,e instanceof Error?e.message:String(e))})}}}}}]);
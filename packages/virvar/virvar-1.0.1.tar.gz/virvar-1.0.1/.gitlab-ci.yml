variables:
  VIRTUAL_ENV: ".venv"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip_cache"

cache:
  paths:
    - ".pip_cache/"

stages:
  - test
  - sast
  - validate-version
  - build
  - deploy

test:
  stage: test
  image: python:3.9
  before_script:
    - python -m venv $VIRTUAL_ENV
    - source $VIRTUAL_ENV/bin/activate
    - pip install --upgrade pip
    - pip install hatch pytest
  script:
    - pytest tests/

sast:
  stage: sast
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: '$SCHEDULED_PIPELINE == "true"'  # Exécute SAST dans un pipeline programmé
include:
  - template: Security/SAST.gitlab-ci.yml

validate-version:
  stage: validate-version
  image: python:3.9
  before_script:
    - python -m venv $VIRTUAL_ENV
    - source $VIRTUAL_ENV/bin/activate
    - pip install --upgrade pip
  script:
    - echo "Validation de la version dans pyproject.toml"
    - CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
    - echo "Version actuelle:" $CURRENT_VERSION
    - TAG_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
    - echo "Version du dernier tag:" $TAG_VERSION
    - |
      if [ "$CURRENT_VERSION" != "$TAG_VERSION" ]; then
        echo "La version dans pyproject.toml ne correspond pas au tag Git"
        exit 1
      else
        echo "La version dans pyproject.toml correspond au tag GIT"
      fi
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

build-job:
  stage: build
  image: python:3.9
  script:
    - echo "Creating virtual environment..."
    - python -m venv $VIRTUAL_ENV
    - source $VIRTUAL_ENV/bin/activate
    - pip install --upgrade pip
    - pip install build
    - echo "Compiling the code..."
    - python -m build
    - echo "Compile complete."
  artifacts:
    paths:
      - dist/

deploy-test:
  stage: deploy
  image: python:3.9
  only:
    - tags
  dependencies:
    - build-job
  script:
    - echo "Create virtual environment"
    - python -m venv $VIRTUAL_ENV
    - source $VIRTUAL_ENV/bin/activate
    - pip install --upgrade pip
    - pip install -U twine
    - echo "Upload to test-pypi"
    - twine upload -u __token__ -p $GITLAB_PYPITEST_VIRVAR_API_TOKEN --repository testpypi dist/* --verbose
  when: manual

deploy-prod:
  stage: deploy
  image: python:3.9
  only:
    - tags
  dependencies:
    - build-job
    - deploy-test
  script:
    - echo "Create virtual environment"
    - python -m venv $VIRTUAL_ENV
    - source $VIRTUAL_ENV/bin/activate
    - pip install --upgrade pip
    - pip install twine
    - echo "Upload to Pypi" 
    - twine upload -u __token__ -p $GITLAB_VIRVAR_PYPI_TOKEN dist/* --verbose
  when: manual

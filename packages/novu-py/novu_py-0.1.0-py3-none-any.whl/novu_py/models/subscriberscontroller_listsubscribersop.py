"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .subscriberresponsedto import SubscriberResponseDto, SubscriberResponseDtoTypedDict
from novu_py.types import BaseModel
from novu_py.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Callable, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SubscribersControllerListSubscribersRequestTypedDict(TypedDict):
    page: NotRequired[float]
    limit: NotRequired[float]


class SubscribersControllerListSubscribersRequest(BaseModel):
    page: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10


class SubscribersControllerListSubscribersResponseBodyTypedDict(TypedDict):
    page: float
    r"""The current page of the paginated response"""
    has_more: bool
    r"""Does the list have more items to fetch"""
    page_size: float
    r"""Number of items on each page"""
    data: List[SubscriberResponseDtoTypedDict]


class SubscribersControllerListSubscribersResponseBody(BaseModel):
    page: float
    r"""The current page of the paginated response"""

    has_more: Annotated[bool, pydantic.Field(alias="hasMore")]
    r"""Does the list have more items to fetch"""

    page_size: Annotated[float, pydantic.Field(alias="pageSize")]
    r"""Number of items on each page"""

    data: List[SubscriberResponseDto]


class SubscribersControllerListSubscribersResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: SubscribersControllerListSubscribersResponseBodyTypedDict


class SubscribersControllerListSubscribersResponse(BaseModel):
    next: Callable[[], Optional[SubscribersControllerListSubscribersResponse]]

    headers: Dict[str, List[str]]

    result: SubscribersControllerListSubscribersResponseBody

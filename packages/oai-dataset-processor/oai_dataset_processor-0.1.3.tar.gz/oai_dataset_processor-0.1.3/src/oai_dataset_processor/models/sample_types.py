from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
import pandas as pd

class RunnerSample(BaseModel):
    id: Optional[str] = Field(None, description="Optional Unique identifier for the sample")
    job_id: str = Field(..., description="Identifier for the job this sample belongs to")
    model_name: str = Field(..., description="Name of the model to be used")
    conversation: List[Dict[str, Any]] = Field(..., description="OpenAI-compatible conversation data")
    target_format: str = Field(..., description="Target format as a JSON schema")
    response: Optional[Dict[str, Any]] = Field(
        None, description="The response generated by the model"
    )
    processed: bool = Field(
        False, description="Whether the sample has been processed successfully"
    )
    error: Optional[str] = Field(
        None, description="Error message if processing failed"
    )

class JobResult(BaseModel):
    job_id: str = Field(..., description="Identifier for the job")
    samples: List[RunnerSample] = Field(..., description="List of samples processed in the job")
    
    def to_jsonl(self, path) -> str:
        """Converts the JobResult to a JSON Lines format string. Saves to path"""
        
        jsonl_str = "\n".join(sample.model_dump_json() for sample in self.samples)
        with open(path, 'w') as f:
            f.write(jsonl_str)
        return jsonl_str
    
    def to_dataframe (self) -> pd.DataFrame:
        """Converts the JobResult to a pandas DataFrame."""
        return pd.DataFrame([sample.model_dump() for sample in self.samples])
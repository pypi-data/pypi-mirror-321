# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API

    The version of the OpenAPI document: 0.0.2
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from asl_api.models.core_v1alpha1_data_source_spec_gold import CoreV1alpha1DataSourceSpecGold
from asl_api.models.core_v1alpha1_data_source_spec_input import CoreV1alpha1DataSourceSpecInput
from asl_api.models.core_v1alpha1_data_source_spec_silver import CoreV1alpha1DataSourceSpecSilver
from asl_api.models.core_v1alpha1_schedule import CoreV1alpha1Schedule
from typing import Optional, Set
from typing_extensions import Self

class CoreV1alpha1DataSourceSpec(BaseModel):
    """
    CoreV1alpha1DataSourceSpec
    """ # noqa: E501
    input: Optional[CoreV1alpha1DataSourceSpecInput] = None
    schedule: Optional[CoreV1alpha1Schedule] = None
    silver: Optional[CoreV1alpha1DataSourceSpecSilver] = None
    gold: Optional[CoreV1alpha1DataSourceSpecGold] = None
    __properties: ClassVar[List[str]] = ["input", "schedule", "silver", "gold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreV1alpha1DataSourceSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of silver
        if self.silver:
            _dict['silver'] = self.silver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gold
        if self.gold:
            _dict['gold'] = self.gold.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreV1alpha1DataSourceSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input": CoreV1alpha1DataSourceSpecInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "schedule": CoreV1alpha1Schedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "silver": CoreV1alpha1DataSourceSpecSilver.from_dict(obj["silver"]) if obj.get("silver") is not None else None,
            "gold": CoreV1alpha1DataSourceSpecGold.from_dict(obj["gold"]) if obj.get("gold") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API

    The version of the OpenAPI document: 0.0.2
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from asl_api.models.core_v1alpha1_data_source_field_spec import CoreV1alpha1DataSourceFieldSpec
from asl_api.models.core_v1alpha1_data_source_spec_silver_transform_preset_overrides import CoreV1alpha1DataSourceSpecSilverTransformPresetOverrides
from typing import Optional, Set
from typing_extensions import Self

class CoreV1alpha1DataSourceSpecSilverTransform(BaseModel):
    """
    CoreV1alpha1DataSourceSpecSilverTransform
    """ # noqa: E501
    use_preset: Optional[StrictStr] = Field(default=None, description="The name of the preset to use for this transform. This is often pre-populated when the original  source and sourceType are determined. ", alias="usePreset")
    skip_transform: Optional[StrictBool] = Field(default=None, description="Whether to forgo the transform step", alias="skipTransform")
    filter: Optional[StrictStr] = Field(default=None, description="A SQL filter to apply to the data at the beginning of the transform phase. This can be either an inclusion or  exclusion filter as determined by the user. ")
    post_filter: Optional[StrictStr] = Field(default=None, description="A SQL filter to apply at the end of the transform phase. This can be either an inclusion or exclusion filter as determined by the user.", alias="postFilter")
    preset_overrides: Optional[CoreV1alpha1DataSourceSpecSilverTransformPresetOverrides] = Field(default=None, alias="presetOverrides")
    add_fields: Optional[List[CoreV1alpha1DataSourceFieldSpec]] = Field(default=None, alias="addFields")
    __properties: ClassVar[List[str]] = ["usePreset", "skipTransform", "filter", "postFilter", "presetOverrides", "addFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreV1alpha1DataSourceSpecSilverTransform from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of preset_overrides
        if self.preset_overrides:
            _dict['presetOverrides'] = self.preset_overrides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in add_fields (list)
        _items = []
        if self.add_fields:
            for _item_add_fields in self.add_fields:
                if _item_add_fields:
                    _items.append(_item_add_fields.to_dict())
            _dict['addFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreV1alpha1DataSourceSpecSilverTransform from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usePreset": obj.get("usePreset"),
            "skipTransform": obj.get("skipTransform"),
            "filter": obj.get("filter"),
            "postFilter": obj.get("postFilter"),
            "presetOverrides": CoreV1alpha1DataSourceSpecSilverTransformPresetOverrides.from_dict(obj["presetOverrides"]) if obj.get("presetOverrides") is not None else None,
            "addFields": [CoreV1alpha1DataSourceFieldSpec.from_dict(_item) for _item in obj["addFields"]] if obj.get("addFields") is not None else None
        })
        return _obj



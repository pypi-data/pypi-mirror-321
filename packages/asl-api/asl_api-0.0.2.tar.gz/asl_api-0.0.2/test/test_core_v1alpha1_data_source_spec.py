# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API

    The version of the OpenAPI document: 0.0.2
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from asl_api.models.core_v1alpha1_data_source_spec import CoreV1alpha1DataSourceSpec

class TestCoreV1alpha1DataSourceSpec(unittest.TestCase):
    """CoreV1alpha1DataSourceSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1alpha1DataSourceSpec:
        """Test CoreV1alpha1DataSourceSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1alpha1DataSourceSpec`
        """
        model = CoreV1alpha1DataSourceSpec()
        if include_optional:
            return CoreV1alpha1DataSourceSpec(
                input = asl_api.models.core_v1alpha1_data_source_spec_input.core_v1alpha1_DataSourceSpec_input(
                    clustering = asl_api.models.core_v1alpha1_data_source_spec_input_clustering.core_v1alpha1_DataSourceSpec_input_clustering(
                        column_names = [
                            ''
                            ], 
                        time_column = '', ), 
                    bronze_table = '', 
                    skip_bronze_loading = True, 
                    source = '', 
                    max_bytes_per_trigger = 56, 
                    max_files_per_trigger = 56, 
                    source_type = '', 
                    format = '', 
                    location = '', 
                    schema_file = '', 
                    cloud_files = asl_api.models.core_v1alpha1_data_source_spec_input_cloud_files.core_v1alpha1_DataSourceSpec_input_cloudFiles(
                        schema_hints_file = '', 
                        schema_hints = '', ), ),
                schedule = asl_api.models.core/v1alpha1/schedule.core.v1alpha1.Schedule(
                    at_least_every = '', 
                    exactly = '', 
                    continuous = True, 
                    compute_group = '', 
                    enabled = True, ),
                silver = asl_api.models.core_v1alpha1_data_source_spec_silver.core_v1alpha1_DataSourceSpec_silver(
                    silver_table = '', 
                    pre_transform = asl_api.models.core_v1alpha1_data_source_spec_silver_pre_transform.core_v1alpha1_DataSourceSpec_silver_preTransform(
                        use_preset = '', 
                        skip_pre_transform = True, 
                        filter = '', 
                        post_filter = '', 
                        preset_overrides = asl_api.models.core_v1alpha1_data_source_spec_silver_pre_transform_preset_overrides.core_v1alpha1_DataSourceSpec_silver_preTransform_presetOverrides(
                            omit_fields = [
                                ''
                                ], ), 
                        add_fields = [
                            asl_api.models.core/v1alpha1/data_source/field_spec.core.v1alpha1.DataSource.FieldSpec(
                                name = '', 
                                from = '', 
                                alias = '', 
                                expr = '', 
                                literal = '', 
                                join = asl_api.models.core_v1alpha1_data_source_field_spec_join.core_v1alpha1_DataSource_FieldSpec_join(
                                    with_table = '', 
                                    with_csv = asl_api.models.core_v1alpha1_data_source_field_spec_join_with_csv.core_v1alpha1_DataSource_FieldSpec_join_withCSV(
                                        path = '', ), 
                                    lhs = '', 
                                    rhs = '', 
                                    select = '', ), )
                            ], ), 
                    transform = asl_api.models.core_v1alpha1_data_source_spec_silver_transform.core_v1alpha1_DataSourceSpec_silver_transform(
                        use_preset = '', 
                        skip_transform = True, 
                        filter = '', 
                        post_filter = '', ), 
                    custom = asl_api.models.core_v1alpha1_data_source_spec_silver_custom.core_v1alpha1_DataSourceSpec_silver_custom(
                        notebook = '', 
                        options = {
                            'key' : ''
                            }, ), ),
                gold = asl_api.models.core_v1alpha1_data_source_spec_gold.core_v1alpha1_DataSourceSpec_gold(
                    use_preset = '', 
                    preset_overrides = {
                        'key' : asl_api.models.core_v1alpha1_data_source_spec_gold_preset_overrides_value.core_v1alpha1_DataSourceSpec_gold_presetOverrides_value(
                            omit_fields = [
                                ''
                                ], 
                            override_liquid_columns = [
                                ''
                                ], 
                            add_fields = [
                                asl_api.models.core/v1alpha1/data_source/field_spec.core.v1alpha1.DataSource.FieldSpec(
                                    name = '', 
                                    from = '', 
                                    alias = '', 
                                    expr = '', 
                                    literal = '', 
                                    join = asl_api.models.core_v1alpha1_data_source_field_spec_join.core_v1alpha1_DataSource_FieldSpec_join(
                                        with_table = '', 
                                        with_csv = asl_api.models.core_v1alpha1_data_source_field_spec_join_with_csv.core_v1alpha1_DataSource_FieldSpec_join_withCSV(
                                            path = '', ), 
                                        lhs = '', 
                                        rhs = '', 
                                        select = '', ), )
                                ], )
                        }, 
                    add_tables = [
                        asl_api.models.core_v1alpha1_data_source_spec_gold_add_tables_inner.core_v1alpha1_DataSourceSpec_gold_addTables_inner(
                            name = '', 
                            filter = '', 
                            post_filter = '', 
                            fields = [
                                asl_api.models.core/v1alpha1/data_source/field_spec.core.v1alpha1.DataSource.FieldSpec(
                                    name = '', 
                                    from = '', 
                                    alias = '', 
                                    expr = '', 
                                    literal = '', )
                                ], )
                        ], 
                    custom = [
                        asl_api.models.core_v1alpha1_data_source_spec_gold_custom_inner.core_v1alpha1_DataSourceSpec_gold_custom_inner(
                            notebook = '', 
                            options = {
                                'key' : ''
                                }, )
                        ], )
            )
        else:
            return CoreV1alpha1DataSourceSpec(
        )
        """

    def testCoreV1alpha1DataSourceSpec(self):
        """Test CoreV1alpha1DataSourceSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

import ctypes
from collections.abc import Callable
from typing import Self
from pyautd3.derive import builder
from pyautd3.driver.link import Link
from pyautd3.driver.link import LinkBuilder
from pyautd3.native_methods.autd3capi import ControllerPtr
from pyautd3.native_methods.autd3capi import NativeMethods as Base
from pyautd3.native_methods.autd3capi_driver import LinkBuilderPtr
from pyautd3.native_methods.autd3capi_driver import LinkPtr
from pyautd3.native_methods.utils import _to_null_terminated_utf8
from pyautd3.native_methods.utils import _validate_ptr
from pyautd3.utils import Duration
from pyautd3_link_soem.adapter import EtherCATAdapter
from pyautd3_link_soem.native_methods.autd3capi_link_soem import NativeMethods as LinkSOEM
from pyautd3_link_soem.native_methods.autd3capi_link_soem import ProcessPriority
from pyautd3_link_soem.native_methods.autd3capi_link_soem import SyncMode
from pyautd3_link_soem.native_methods.autd3capi_link_soem import ThreadPriorityPtr
from pyautd3_link_soem.native_methods.autd3capi_link_soem import TimerStrategy
from pyautd3_link_soem.native_methods.autd3capi_link_soem import Status as _Status
from pyautd3_link_soem.status import Status
from pyautd3_link_soem.thread_priority import ThreadPriority



class _SOEMBuilder(LinkBuilder[SOEM]):
    def __init__(self: _SOEMBuilder, ) -> None: ...
    def _link_builder_ptr(self: _SOEMBuilder, ) -> LinkBuilderPtr: ...
    def _resolve_link(self: _SOEMBuilder, ptr: ControllerPtr) -> SOEM: ...
    def with_ifname(self: _SOEMBuilder, ifname: str) -> _SOEMBuilder: ...
    def with_buf_size(self: _SOEMBuilder, buf_size: int) -> _SOEMBuilder: ...
    def with_send_cycle(self: _SOEMBuilder, send_cycle: Duration) -> _SOEMBuilder: ...
    def with_sync0_cycle(self: _SOEMBuilder, sync0_cycle: Duration) -> _SOEMBuilder: ...
    def with_err_handler(self: _SOEMBuilder, err_handler: Callable[[int, Status], None] | None) -> _SOEMBuilder: ...
    def with_timer_strategy(self: _SOEMBuilder, timer_strategy: TimerStrategy) -> _SOEMBuilder: ...
    def with_sync_mode(self: _SOEMBuilder, sync_mode: SyncMode) -> _SOEMBuilder: ...
    def with_sync_tolerance(self: _SOEMBuilder, sync_tolerance: Duration) -> _SOEMBuilder: ...
    def with_sync_timeout(self: _SOEMBuilder, sync_timeout: Duration) -> _SOEMBuilder: ...
    def with_state_check_interval(self: _SOEMBuilder, state_check_interval: Duration) -> _SOEMBuilder: ...
    def with_process_priority(self: _SOEMBuilder, process_priority: ProcessPriority) -> _SOEMBuilder: ...
    def with_thread_priority(self: _SOEMBuilder, thread_priority: ThreadPriorityPtr) -> _SOEMBuilder: ...
    @property
    def ifname(self: _SOEMBuilder) -> str: ...
    @property
    def buf_size(self: _SOEMBuilder) -> int: ...
    @property
    def send_cycle(self: _SOEMBuilder) -> Duration: ...
    @property
    def sync0_cycle(self: _SOEMBuilder) -> Duration: ...
    @property
    def err_handler(self: _SOEMBuilder) -> Callable[[int, Status], None] | None: ...
    @property
    def timer_strategy(self: _SOEMBuilder) -> TimerStrategy: ...
    @property
    def sync_mode(self: _SOEMBuilder) -> SyncMode: ...
    @property
    def sync_tolerance(self: _SOEMBuilder) -> Duration: ...
    @property
    def sync_timeout(self: _SOEMBuilder) -> Duration: ...
    @property
    def state_check_interval(self: _SOEMBuilder) -> Duration: ...
    @property
    def process_priority(self: _SOEMBuilder) -> ProcessPriority: ...
    @property
    def thread_priority(self: _SOEMBuilder) -> ThreadPriorityPtr: ...

class SOEM(Link):
    def __init__(self: SOEM, ptr: LinkPtr, err_handler: None) -> None: ...
    @staticmethod
    def enumerate_adapters() -> list[EtherCATAdapter]: ...
    @staticmethod
    def builder() -> _SOEMBuilder: ...

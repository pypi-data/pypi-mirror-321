[project]
name = "pgnparse"
version = "0.4.0"
description = "A library for parsing PGN chess notations"
readme = "README.md"
authors = [{ name = "ItsDrike", email = "itsdrike@protonmail.com" }]
license = "MIT"
requires-python = ">=3.12"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Text Processing",
  "Topic :: Games/Entertainment :: Board Games",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
keywords = ["Chess", "PGN", "Parsing"]
dependencies = ["lark>=1.2.2"]

[project.urls]
Documentation = "https://github.com/ItsDrike/pgnparse"
"Source code" = "https://github.com/ItsDrike/pgnparse"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
default-groups = ["dev", "lint", "test"]

[dependency-groups]
lint = ["basedpyright>=1.23.2", "pre-commit>=4.0.1", "ruff>=0.9.1"]
dev = ["poethepoet>=0.32.1"]
test = ["pytest>=8.3.4", "pytest-cov>=6.0.0"]

[tool.poe.tasks]
precommit = "pre-commit install"
lint = "pre-commit run --all-files"
basedpyright = "basedpyright --warnings ."
ruff = "ruff check --fix ."
ruff-format = "ruff format ."
test = "pytest -v --failed-first"
retest = "pytest -v --last-failed"

[tool.basedpyright]
pythonPlatform = "All"
pythonVersion = "3.12"
typeCheckingMode = "all"

# Diagnostic behavior settings
strictListInference = false
strictDictionaryInference = false
strictSetInference = false
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
deprecateTypingAliases = true
enableExperimentalFeatures = false
disableBytesTypePromotions = true

# Diagnostic rules
reportAny = false
reportExplicitAny = false
reportImplicitStringConcatenation = false
reportUnreachable = "hint"
reportUnusedParameter = "hint"
reportUnannotatedClassAttribute = false
reportMissingTypeStubs = "information"      # consider bumping to warning/error
reportUninitializedInstanceVariable = false # until https://github.com/DetachHead/basedpyright/issues/491
reportMissingParameterType = false          # ruff's flake8-annotations (ANN) already covers this + gives us more control

[tool.ruff]
target-version = "py312"
line-length = 119

[tool.ruff.lint]
select = ["ALL"]

ignore = [
  "C90", # mccabe
  "FBT", # flake8-boolean-trap
  "CPY", # flake8-copyright
  "EM",  # flake8-errmsg
  "SLF", # flake8-self
  "ARG", # flake8-unused-arguments
  "TD",  # flake8-todos
  "FIX", # flake8-fixme

  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D107", # Missing docstring in __init__
  "D203", # Blank line required before class docstring
  "D213", # Multi-line summary should start at second line (incompatible with D212)
  "D301", # Use r""" if any backslashes in a docstring
  "D405", # Section name should be properly capitalized
  "D406", # Section name should end with a newline
  "D407", # Missing dashed underline after section
  "D408", # Section underline should be in the line following the section's name
  "D409", # Section underline should match the length of its name
  "D410", # Missing blank line after section
  "D411", # Missing blank line before section
  "D412", # No blank lines allowed between a section header and its content
  "D413", # Missing blank line after last section
  "D414", # Section has no content
  "D416", # Section name should end with a colon
  "D417", # Missing argument descrition in the docstring

  "ANN002", # Missing type annotation for *args
  "ANN003", # Missing type annotation for **kwargs
  "ANN204", # Missing return type annotation for special method
  "ANN401", # Dynamically typed expressions (typing.Any) disallowed

  "SIM102", # use a single if statement instead of nested if statements
  "SIM108", # Use ternary operator {contents} instead of if-else-block

  "TC001", # Move application imports used only for annotations into a type-checking block
  "TC002", # Move 3rd-party imports used only for annotations into a type-checking block
  "TC003", # Move standard library imports used only for annotations into a type-checking block

  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO

  "TRY003",  # No f-strings in raise statements
  "UP024",   # Using errors that alias OSError
  "PLR2004", # Using unnamed numerical constants
  "E731",    # Don't assign a lambda expression, use a def
  "S105",    # Hard-coded passwords
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
  "ANN",  # flake8-annotations
  "S101", # Use of assert
]

[tool.ruff.lint.isort]
order-by-type = false
case-sensitive = true
combine-as-imports = true

[tool.ruff.lint.pylint]
max-args = 20
max-branches = 20
max-returns = 20
max-statements = 250

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.format]
line-ending = "lf"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
addopts = "--strict-markers --cov --no-cov-on-fail"

[tool.coverage.report]
precision = 2
#fail_under = 80
show_missing = true
skip_covered = false
skip_empty = false
sort = "cover"
exclude_lines = [
  "\\#\\s*pragma: no cover",
  "^\\s*if (typing\\.)?TYPE_CHECKING:",
  "^\\s*@(abc\\.)?abstractmethod",
  "^\\s*@(typing\\.)?overload",
  "^\\s*def __repr__\\(",
  "^\\s*class .*\\bProtocol\\):",
  "^\\s*raise NotImplementedError",
  "^\\s*return NotImplemented",
  "^\\s*\\.\\.\\.",
]

[tool.coverage.run]
relative_files = true
parallel = true
branch = true
timid = false
source = ["src/pgnparse"]

"""Code coverage for repositories."""

import logging
import re
from typing import Optional

import requests

from sitreps_client.exceptions import CodeCoverageError
from sitreps_client.exceptions import SitrepsError
from sitreps_client.utils.ci_downloader import CIDownloader

LOGGER = logging.getLogger(__name__)


class CodecovCoverage:
    """Code coverage from codecov.io."""

    def __init__(self, repo_slug: str):
        self.repo_slug = repo_slug

    def get_coverage(self) -> Optional[float]:
        """Get coverage info for the branch."""
        org, repo = self.repo_slug.split("/")

        url = f"https://api.codecov.io/api/v2/github/{org}/repos/{repo}"
        headers = {"accept": "application/json"}
        response = requests.get(url=url, headers=headers)

        if response.status_code == 404:
            msg = f'code-coverage not available for "{self.repo_slug}"'
            LOGGER.info(msg)
            return None

        if not (response or response.ok):
            msg = f'Failed to fetch code-coverage for "{self.repo_slug}" "[{response.text}]"'
            LOGGER.error(msg)
            return None

        response_json = response.json()
        if response_json["active"]:
            totals = response_json["totals"]
            return {
                "updatestamp": response_json["updatestamp"],
                "lines": totals["lines"],
                "hits": totals["hits"],
                "misses": totals["misses"],
                "partials": totals["partials"],
                "coverage": totals["coverage"],
            }
        else:
            LOGGER.warning(f"{self.repo_slug} is not active project on codecov.io.")

    def __repr__(self):
        return f"<CodecovCoverage(repo_slug={self.repo_slug})>"


def get_regex_cov(pattern: str, string: str) -> Optional[float]:
    """Return coverage matched by regex pattern."""
    match = re.search(pattern, string)
    if match is None:
        return None

    try:
        return float(match.group(1))
    except (IndexError, ValueError) as err:
        LOGGER.warning("Coverage, failure: %s", str(err))
        return None


def get_htmlcov(string: str) -> Optional[float]:
    """Return coverage from "htmlcov" index.html generated by Coverage.py."""
    return get_regex_cov('<span class="pc_cov">([0-9]+)%</span>', string)


class CICoverage:
    """Code coverage from CI log (Jenkins, ...).

    Args:
        url (str): CI raw link (eg. jenkins job raw link)
        ci_downloader (CIDownloader): Instance of CI downloader (eg. JenkinsDownloader)
        pattern (str, optional): Match pattern
    """

    def __init__(self, url: str, ci_downloader: CIDownloader, pattern: Optional[str] = None):
        self.url = url
        self.ci_downloader = ci_downloader
        self.pattern = pattern

    def get_coverage(self) -> Optional[float]:
        """Get coverage info."""
        try:
            string = self.ci_downloader.get_text(self.url)
        except SitrepsError as err:
            LOGGER.warning(f"Failed to get code coverage for url {self.url}, error: {str(err)}")
            raise CodeCoverageError(
                f"Failed to get code coverage for url {self.url}, error: {str(err)}"
            )

        if not self.pattern:
            return get_htmlcov(string)
        return get_regex_cov(self.pattern, string)

    def __repr__(self):
        return f"<CICoverage(url={self.url})>"


def get_code_coverage(repo_slug: str) -> Optional[float]:
    """Get code coverage from codecov.io

    Args:
        repo_slug (str): Repository slug
        branch (str, optional): Branch for which Code Coverage fetch. Defaults to "master".

    Returns:
        Optional[float]: code coverage
    """
    code_cov = CodecovCoverage(repo_slug=repo_slug)
    # TODO: Add CICoverage facility.
    return code_cov.get_coverage()

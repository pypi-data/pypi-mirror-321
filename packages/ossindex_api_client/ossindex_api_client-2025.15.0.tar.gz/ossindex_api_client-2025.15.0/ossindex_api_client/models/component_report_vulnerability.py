# coding: utf-8

"""
    Sonatype OSS Index

    This documents the available APIs into [Sonatype OSS Index](https://ossindex.sonatype.org/) - API Version: 1-SNAPSHOT (be72c8343baab38a8c598d28dafc78003dce81db).

    The version of the OpenAPI document: 2024.323
    Contact: community@sonatype.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ComponentReportVulnerability(BaseModel):
    """
    Component vulnerability
    """ # noqa: E501
    cve: Optional[StrictStr] = Field(default=None, description="CVE")
    cvss_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="CVSS score", alias="cvssScore")
    cvss_vector: Optional[StrictStr] = Field(default=None, description="CVSS vector", alias="cvssVector")
    cwe: Optional[StrictStr] = Field(default=None, description="CWE")
    description: Optional[StrictStr] = Field(default=None, description="Vulnerability description")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name", alias="displayName")
    external_references: Optional[List[StrictStr]] = Field(default=None, description="External references related to the vulnerability", alias="externalReferences")
    id: Optional[StrictStr] = Field(default=None, description="Public identifier")
    reference: Optional[StrictStr] = Field(default=None, description="Vulnerability details reference")
    title: Optional[StrictStr] = Field(default=None, description="Vulnerability title")
    version_ranges: Optional[List[StrictStr]] = Field(default=None, description="Affected version ranges", alias="versionRanges")
    __properties: ClassVar[List[str]] = ["cve", "cvssScore", "cvssVector", "cwe", "description", "displayName", "externalReferences", "id", "reference", "title", "versionRanges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComponentReportVulnerability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComponentReportVulnerability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cve": obj.get("cve"),
            "cvssScore": obj.get("cvssScore"),
            "cvssVector": obj.get("cvssVector"),
            "cwe": obj.get("cwe"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "externalReferences": obj.get("externalReferences"),
            "id": obj.get("id"),
            "reference": obj.get("reference"),
            "title": obj.get("title"),
            "versionRanges": obj.get("versionRanges")
        })
        return _obj



[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agentic-fleet"
version = "0.4.3"
summary = "A multi-agent system for adaptive AI reasoning and automation"
requires-python = ">=3.10"
readme = { file = "README.md", content-type = "text/markdown" }
description = "Adaptive Agentic AI Reasoning That Empower, Inform, and Integrate Seamlessly"
urls.homepage = "https://www.qredence.ai"
urls."Bug Tracker" = "https://github.com/Qredence/AgenticFleet/issues"
urls.documentation = "https://github.com/Qredence/AgenticFleet/tree/main/docs"
urls."source code" = "https://github.com/Qredence/AgenticFleet"
keywords = ["agentic", "autogen", "ai-agents", "agentic-ai", "machine-learning", "artificial-intelligence", "multi-agent", "ai", "qredence"]
authors = [
  {name = "Zachary BENSALEM", email = "contact@zachary.ai"}
]
license = {file = "LICENSE"}
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",

]

dependencies = [
    # Core Framework
    "fastapi>=0.109.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.2.1",
    "python-dotenv>=1.0.1",
    "typing-extensions>=4.8.0",
    "packaging>=23.2",
    # Networking & Async
    "aiohttp>=3.11.11,<4.0.0",
    "httpx>=0.25.0",
    "requests>=2.32.3",
    "aiofiles>=23.1.0,<24.0.0",
    "python-multipart>=0.0.6",
    "asyncio>=3.4.3",
    # AI/ML Infrastructure
    "autogen-core==0.4.1",
    "autogen-agentchat==0.4.1",
    "autogen-ext[openai,azure]>=0.4.1,<0.5.0",
    "autogen-ext[docker]>=0.4.1,<0.5.0",
    "autogen-ext[magentic-one]>=0.4.1,<0.5.0",
    "autogen-ext[web-surfer]>=0.4.1,<0.5.0",
    "autogen-magentic-one>=0.0.1",
    "magentic-one-cli==0.2.0",
    "agentops>=0.3.21",
    "promptflow-tracing==1.17.1",
    "composio-core>=0.6.11.post1",
    # Azure Services
    "azure-core>=1.32.0",
    "azure-identity>=1.19.0",
    "azure-keyvault-secrets>=4.9.0",
    "azure-search-documents==11.6.0b4",
    "azure-storage-blob>=12.24.0",
    "azure-cosmos>=4.9.0",
    # Data Processing
    "pandas>=2.2.3",
    "numpy>=1.26,<2.0",
    "matplotlib>=3.10.0",
    "yfinance>=0.2.51",
    "jsonlines>=4.0.0",
    "pytz>=2024.2",
    # Web & Utilities
    "chainlit==2.0.3",
    "playwright>=1.49.1,<2.0.0",
    "beautifulsoup4>=4.12.0",
    "bing>=0.31",
    "markitdown>=0.0.1a3",
    "tenacity>=9.0.0",
    "docker>=7.1.0",
    "opentelemetry-instrumentation-fastapi>=0.44b0",
    # Developer Tools
    "rich>=13.9.4",
    "aioconsole>=0.8.1",
    "grpcio-tools~=1.62.0",
    "typer>=0.15.1",
    "ruff==0.4.8",
    "azure-ai-projects>=1.0.0b4",
    "azure-ai-inference>=1.0.0b6",
    "puremagic>=1.28",
]

[project.optional-dependencies]
test = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "pytest-asyncio>=0.21.1",
  "pytest-mock>=3.11.1",
  "pytest-timeout>=2.1.0",
  "coverage>=7.3.2"
]

dev = [
  "black>=23.9.1",
  "isort>=5.12.0",
  "flake8>=6.1.0",
  "mypy>=1.5.1",
  "pre-commit>=3.4.0"
]

docs = [
  "sphinx>=7.2.6",
  "sphinx-rtd-theme>=1.3.0",
  "sphinx-autodoc-typehints>=1.24.0"
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.metadata]
allow-direct-references = true

[project.scripts]
agenticfleet = "scripts.run:cli"

[tool.hatch.build]
artifacts = [
  "*.pyc",
  "**/*.pyc",
  "**/__pycache__",
  "**/.pytest_cache",
  "**/.mypy_cache",
  "**/.coverage"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=xml --cov-report=term-missing"
testpaths = ["src/backend/test", "src/frontend/test"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.coverage.run]
source = ["src"]
omit = ["**/test/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]

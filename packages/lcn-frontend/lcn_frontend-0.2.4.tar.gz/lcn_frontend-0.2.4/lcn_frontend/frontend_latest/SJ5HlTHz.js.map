{"version":3,"file":"SJ5HlTHz.js","mappings":";;;AAsBA;AACA;AACA;;AAGA;;ACYA;AACA;AACA;AACA;;AAEA;;AAKA;;;;;;;;;;;;AAgBA;;ACXA;;AAEA;;AAEA;AAEA;;;;;;;;;;;;;;;;;AAqFA;;AClIA;;;;;;;AAOA;AAIA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;ACpBA;;;AAKA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyFA;ACzIA;AAEA;;AAGA;AACA;;AAEA;;AAGA;AACA;;;AAGA;;AAGA;;AAEA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;;ACQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;;;;AAOA;;;AAIA;;AAMA;AAEA","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-icon-button-arrow-prev.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-icon-button.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-menu-button.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-svg-icon.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-alert.ts","webpack://lcn-frontend/./homeassistant-frontend/src/layouts/hass-error-screen.ts","webpack://lcn-frontend/mwc-button-base.ts"],"sourcesContent":["import { mdiArrowLeft, mdiArrowRight } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-icon-button-arrow-prev\")\nexport class HaIconButtonArrowPrev extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  @state() private _icon =\n    mainWindow.document.dir === \"rtl\" ? mdiArrowRight : mdiArrowLeft;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        .disabled=${this.disabled}\n        .label=${this.label || this.hass?.localize(\"ui.common.back\") || \"Back\"}\n        .path=${this._icon}\n      ></ha-icon-button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button-arrow-prev\": HaIconButtonArrowPrev;\n  }\n}\n","import \"@material/mwc-icon-button\";\nimport type { IconButton } from \"@material/mwc-icon-button\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided slot to pass an <ha-icon> in)\n  @property({ type: String }) path?: string;\n\n  // Label that is used for ARIA support and as tooltip\n  @property({ type: String }) label?: string;\n\n  // These should always be set as properties, not attributes,\n  // so that only the <button> element gets the attribute\n  @property({ type: String, attribute: \"aria-haspopup\" })\n  override ariaHasPopup!: IconButton[\"ariaHasPopup\"];\n\n  @property({ type: Boolean }) hideTitle = false;\n\n  @query(\"mwc-icon-button\", true) private _button?: IconButton;\n\n  public override focus() {\n    this._button?.focus();\n  }\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button\n        aria-label=${ifDefined(this.label)}\n        title=${ifDefined(this.hideTitle ? undefined : this.label)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        .disabled=${this.disabled}\n      >\n        ${this.path\n          ? html`<ha-svg-icon .path=${this.path}></ha-svg-icon>`\n          : html`<slot></slot>`}\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n","import { mdiMenu } from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { subscribeNotifications } from \"../data/persistent_notification\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-menu-button\")\nclass HaMenuButton extends LitElement {\n  @property({ type: Boolean }) public hassio = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _hasNotifications = false;\n\n  @state() private _show = false;\n\n  private _alwaysVisible = false;\n\n  private _attachNotifOnConnect = false;\n\n  private _unsubNotifications?: UnsubscribeFunc;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._attachNotifOnConnect) {\n      this._attachNotifOnConnect = false;\n      this._subscribeNotifications();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubNotifications) {\n      this._attachNotifOnConnect = true;\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n  }\n\n  protected render() {\n    if (!this._show) {\n      return nothing;\n    }\n    const hasNotifications =\n      this._hasNotifications &&\n      (this.narrow || this.hass.dockedSidebar === \"always_hidden\");\n    return html`\n      <ha-icon-button\n        .label=${this.hass.localize(\"ui.sidebar.sidebar_toggle\")}\n        .path=${mdiMenu}\n        @click=${this._toggleMenu}\n      ></ha-icon-button>\n      ${hasNotifications ? html`<div class=\"dot\"></div>` : \"\"}\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (!this.hassio) {\n      return;\n    }\n    // This component is used on Hass.io too, but Hass.io might run the UI\n    // on older frontends too, that don't have an always visible menu button\n    // in the sidebar.\n    this._alwaysVisible =\n      (Number((window.parent as any).frontendVersion) || 0) < 20190710;\n  }\n\n  protected willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n\n    if (!changedProps.has(\"narrow\") && !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.has(\"hass\")\n      ? (changedProps.get(\"hass\") as HomeAssistant | undefined)\n      : this.hass;\n    const oldNarrow = changedProps.has(\"narrow\")\n      ? (changedProps.get(\"narrow\") as boolean | undefined)\n      : this.narrow;\n\n    const oldShowButton =\n      oldNarrow || oldHass?.dockedSidebar === \"always_hidden\";\n    const showButton =\n      this.narrow || this.hass.dockedSidebar === \"always_hidden\";\n\n    if (this.hasUpdated && oldShowButton === showButton) {\n      return;\n    }\n\n    this._show = showButton || this._alwaysVisible;\n\n    if (!showButton) {\n      if (this._unsubNotifications) {\n        this._unsubNotifications();\n        this._unsubNotifications = undefined;\n      }\n      return;\n    }\n\n    this._subscribeNotifications();\n  }\n\n  private _subscribeNotifications() {\n    if (this._unsubNotifications) {\n      throw new Error(\"Already subscribed\");\n    }\n    this._unsubNotifications = subscribeNotifications(\n      this.hass.connection,\n      (notifications) => {\n        this._hasNotifications = notifications.length > 0;\n      }\n    );\n  }\n\n  private _toggleMenu(): void {\n    fireEvent(this, \"hass-toggle-menu\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        position: relative;\n      }\n      .dot {\n        pointer-events: none;\n        position: absolute;\n        background-color: var(--accent-color);\n        width: 12px;\n        height: 12px;\n        top: 9px;\n        right: 7px;\n        inset-inline-end: 7px;\n        inset-inline-start: initial;\n        border-radius: 50%;\n        border: 2px solid var(--app-header-background-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-menu-button\": HaMenuButton;\n  }\n}\n","import type { CSSResultGroup, SVGTemplateResult } from \"lit\";\nimport { css, LitElement, nothing, svg } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-svg-icon\")\nexport class HaSvgIcon extends LitElement {\n  @property() public path?: string;\n\n  @property() public secondaryPath?: string;\n\n  @property() public viewBox?: string;\n\n  protected render(): SVGTemplateResult {\n    return svg`\n    <svg\n      viewBox=${this.viewBox || \"0 0 24 24\"}\n      preserveAspectRatio=\"xMidYMid meet\"\n      focusable=\"false\"\n      role=\"img\"\n      aria-hidden=\"true\"\n    >\n      <g>\n        ${\n          this.path\n            ? svg`<path class=\"primary-path\" d=${this.path}></path>`\n            : nothing\n        }\n        ${\n          this.secondaryPath\n            ? svg`<path class=\"secondary-path\" d=${this.secondaryPath}></path>`\n            : nothing\n        }\n      </g>\n    </svg>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: var(--ha-icon-display, inline-flex);\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        vertical-align: middle;\n        fill: var(--icon-primary-color, currentcolor);\n        width: var(--mdc-icon-size, 24px);\n        height: var(--mdc-icon-size, 24px);\n      }\n      svg {\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        display: block;\n      }\n      path.primary-path {\n        opacity: var(--icon-primary-opactity, 1);\n      }\n      path.secondary-path {\n        fill: var(--icon-secondary-color, currentcolor);\n        opacity: var(--icon-secondary-opactity, 0.5);\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-svg-icon\": HaSvgIcon;\n  }\n}\n","import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n      text-align: var(--float-start);\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n      margin-inline-start: 8px;\n      margin-inline-end: 0;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n    :host ::slotted(ul) {\n      margin: 0;\n      padding-inline-start: 20px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import \"@material/mwc-button\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport type { HomeAssistant } from \"../types\";\nimport \"../components/ha-alert\";\n\n@customElement(\"hass-error-screen\")\nclass HassErrorScreen extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public toolbar = true;\n\n  @property({ type: Boolean }) public rootnav = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public error?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.toolbar\n        ? html`<div class=\"toolbar\">\n            ${this.rootnav || history.state?.root\n              ? html`\n                  <ha-menu-button\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                  ></ha-menu-button>\n                `\n              : html`\n                  <ha-icon-button-arrow-prev\n                    .hass=${this.hass}\n                    @click=${this._handleBack}\n                  ></ha-icon-button-arrow-prev>\n                `}\n          </div>`\n        : \"\"}\n      <div class=\"content\">\n        <ha-alert alert-type=\"error\">${this.error}</ha-alert>\n        <slot>\n          <mwc-button @click=${this._handleBack}>\n            ${this.hass?.localize(\"ui.common.back\")}\n          </mwc-button>\n        </slot>\n      </div>\n    `;\n  }\n\n  private _handleBack(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        :host {\n          display: block;\n          height: 100%;\n          background-color: var(--primary-background-color);\n        }\n        .toolbar {\n          display: flex;\n          align-items: center;\n          font-size: 20px;\n          height: var(--header-height);\n          padding: 8px 12px;\n          pointer-events: none;\n          background-color: var(--app-header-background-color);\n          font-weight: 400;\n          color: var(--app-header-text-color, white);\n          border-bottom: var(--app-header-border-bottom, none);\n          box-sizing: border-box;\n        }\n        @media (max-width: 599px) {\n          .toolbar {\n            padding: 4px;\n          }\n        }\n        ha-icon-button-arrow-prev {\n          pointer-events: auto;\n        }\n        .content {\n          color: var(--primary-text-color);\n          height: calc(100% - var(--header-height));\n          display: flex;\n          padding: 16px;\n          align-items: center;\n          justify-content: center;\n          flex-direction: column;\n          box-sizing: border-box;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        ha-alert {\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-error-screen\": HassErrorScreen;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-icon/mwc-icon.js';\nimport '@material/mwc-ripple/mwc-ripple.js';\n\nimport {AriaHasPopup, ariaProperty} from '@material/mwc-base/aria-property.js';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple.js';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers.js';\nimport {html, LitElement, TemplateResult} from 'lit';\nimport {eventOptions, property, query, queryAsync, state} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\n/** @soyCompatible */\nexport class ButtonBase extends LitElement {\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-haspopup'})\n  override ariaHasPopup!: AriaHasPopup;\n\n  @property({type: Boolean, reflect: true}) raised = false;\n\n  @property({type: Boolean, reflect: true}) unelevated = false;\n\n  @property({type: Boolean, reflect: true}) outlined = false;\n\n  @property({type: Boolean}) dense = false;\n\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  @property({type: Boolean, attribute: 'trailingicon'}) trailingIcon = false;\n\n  @property({type: Boolean, reflect: true}) fullwidth = false;\n\n  @property({type: String}) icon = '';\n\n  @property({type: String}) label = '';\n\n  @property({type: Boolean}) expandContent = false;\n\n  @query('#button') buttonElement!: HTMLElement;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @state() protected shouldRenderRipple = false;\n\n  protected rippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  /** @soyTemplate */\n  protected renderOverlay(): TemplateResult {\n    return html``;\n  }\n\n  /** @soyTemplate */\n  protected renderRipple(): TemplateResult|string {\n    const filled = this.raised || this.unelevated;\n    return this.shouldRenderRipple ?\n        html`<mwc-ripple class=\"ripple\" .primary=\"${!filled}\" .disabled=\"${\n            this.disabled}\"></mwc-ripple>` :\n        '';\n  }\n\n  override focus() {\n    const buttonElement = this.buttonElement;\n    if (buttonElement) {\n      this.rippleHandlers.startFocus();\n      buttonElement.focus();\n    }\n  }\n\n  override blur() {\n    const buttonElement = this.buttonElement;\n    if (buttonElement) {\n      this.rippleHandlers.endFocus();\n      buttonElement.blur();\n    }\n  }\n\n  /** @soyTemplate */\n  protected getRenderClasses(): ClassInfo {\n    return {\n      'mdc-button--raised': this.raised,\n      'mdc-button--unelevated': this.unelevated,\n      'mdc-button--outlined': this.outlined,\n      'mdc-button--dense': this.dense,\n    };\n  }\n\n  /**\n   * @soyTemplate\n   * @soyAttributes buttonAttributes: #button\n   * @soyClasses buttonClasses: #button\n   */\n  protected override render(): TemplateResult {\n    return html`\n      <button\n          id=\"button\"\n          class=\"mdc-button ${classMap(this.getRenderClasses())}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          aria-haspopup=\"${ifDefined(this.ariaHasPopup)}\"\n          @focus=\"${this.handleRippleFocus}\"\n          @blur=\"${this.handleRippleBlur}\"\n          @mousedown=\"${this.handleRippleActivate}\"\n          @mouseenter=\"${this.handleRippleMouseEnter}\"\n          @mouseleave=\"${this.handleRippleMouseLeave}\"\n          @touchstart=\"${this.handleRippleActivate}\"\n          @touchend=\"${this.handleRippleDeactivate}\"\n          @touchcancel=\"${this.handleRippleDeactivate}\">\n        ${this.renderOverlay()}\n        ${this.renderRipple()}\n        <span class=\"leading-icon\">\n          <slot name=\"icon\">\n            ${this.icon && !this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n        <span class=\"mdc-button__label\">${this.label}</span>\n        <span class=\"slot-container ${classMap({\n      flex: this.expandContent\n    })}\">\n          <slot></slot>\n        </span>\n        <span class=\"trailing-icon\">\n          <slot name=\"trailingIcon\">\n            ${this.icon && this.trailingIcon ? this.renderIcon() : ''}\n          </slot>\n        </span>\n      </button>`;\n  }\n\n  /** @soyTemplate */\n  protected renderIcon(): TemplateResult {\n    return html`\n    <mwc-icon class=\"mdc-button__icon\">\n      ${this.icon}\n    </mwc-icon>`;\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleActivate(evt?: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.rippleHandlers.startPress(evt);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n"],"names":[],"sourceRoot":""}
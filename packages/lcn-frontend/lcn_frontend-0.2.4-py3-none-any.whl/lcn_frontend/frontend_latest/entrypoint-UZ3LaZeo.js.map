{"version":3,"file":"entrypoint-UZ3LaZeo.js","mappings":";;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;AC/FA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuZA;;AAMA;;AChXA;AACA;AACA;AACA;;AAPA","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/resources/roboto.ts","webpack://lcn-frontend/./homeassistant-frontend/src/resources/ha-style.ts","webpack://lcn-frontend/./src/main.ts"],"sourcesContent":["import { css, unsafeCSS } from \"lit\";\n\nexport const fontStyles = css`\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Thin\"),\n      local(\"Roboto-Thin\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-Thin.woff2)\n        format(\"woff2\");\n    font-weight: 100;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Thin Italic\"),\n      local(\"Roboto-ThinItalic\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-ThinItalic.woff2)\n        format(\"woff2\");\n    font-weight: 100;\n    font-style: italic;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Light\"),\n      local(\"Roboto-Light\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-Light.woff2)\n        format(\"woff2\");\n    font-weight: 300;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Light Italic\"),\n      local(\"Roboto-LightItalic\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-LightItalic.woff2)\n        format(\"woff2\");\n    font-weight: 300;\n    font-style: italic;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Regular\"),\n      local(\"Roboto-Regular\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-Regular.woff2)\n        format(\"woff2\");\n    font-weight: 400;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Italic\"),\n      local(\"Roboto-Italic\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-RegularItalic.woff2)\n        format(\"woff2\");\n    font-weight: 400;\n    font-style: italic;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Medium\"),\n      local(\"Roboto-Medium\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-Medium.woff2)\n        format(\"woff2\");\n    font-weight: 500;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Medium Italic\"),\n      local(\"Roboto-MediumItalic\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-MediumItalic.woff2)\n        format(\"woff2\");\n    font-weight: 500;\n    font-style: italic;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Bold\"),\n      local(\"Roboto-Bold\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-Bold.woff2)\n        format(\"woff2\");\n    font-weight: 700;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Bold Italic\"),\n      local(\"Roboto-BoldItalic\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-BoldItalic.woff2)\n        format(\"woff2\");\n    font-weight: 700;\n    font-style: italic;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Black\"),\n      local(\"Roboto-Black\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-Black.woff2)\n        format(\"woff2\");\n    font-weight: 900;\n    font-style: normal;\n  }\n  @font-face {\n    font-family: \"Roboto\";\n    src:\n      local(\"Roboto Black Italic\"),\n      local(\"Roboto-BlackItalic\"),\n      url(${unsafeCSS(__STATIC_PATH__)}fonts/roboto/Roboto-BlackItalic.woff2)\n        format(\"woff2\");\n    font-weight: 900;\n    font-style: italic;\n  }\n`.toString();\n","import { css, unsafeCSS } from \"lit\";\nimport { fontStyles } from \"./roboto\";\nimport {\n  DEFAULT_ACCENT_COLOR,\n  DEFAULT_PRIMARY_COLOR,\n  derivedStyles,\n} from \"./styles-data\";\n\nconst mainStyles = css`\n  /*\n    Home Assistant default styles.\n\n    In Polymer 2.0, default styles should to be set on the html selector.\n    (Setting all default styles only on body breaks shadyCSS polyfill.)\n    See: https://github.com/home-assistant/home-assistant-polymer/pull/901\n  */\n  html {\n    font-size: 14px;\n    height: 100vh;\n\n    /* text */\n    --primary-text-color: #212121;\n    --secondary-text-color: #727272;\n    --text-primary-color: #ffffff;\n    --text-light-primary-color: #212121;\n    --disabled-text-color: #bdbdbd;\n\n    /* main interface colors */\n    --primary-color: ${unsafeCSS(DEFAULT_PRIMARY_COLOR)};\n    --dark-primary-color: #0288d1;\n    --light-primary-color: #b3e5fc;\n    --accent-color: ${unsafeCSS(DEFAULT_ACCENT_COLOR)};\n    --divider-color: rgba(0, 0, 0, 0.12);\n    --outline-color: rgba(0, 0, 0, 0.12);\n    --outline-hover-color: rgba(0, 0, 0, 0.24);\n\n    --scrollbar-thumb-color: rgb(194, 194, 194);\n\n    --error-color: #db4437;\n    --warning-color: #ffa600;\n    --success-color: #43a047;\n    --info-color: #039be5;\n\n    /* backgrounds */\n    --card-background-color: #ffffff;\n    --primary-background-color: #fafafa;\n    --secondary-background-color: #e5e5e5; /* behind the cards on state */\n    --clear-background-color: #ffffff;\n\n    /* for header */\n    --header-height: 56px;\n\n    /* for label-badge */\n    --label-badge-red: var(--error-color);\n    --label-badge-blue: var(--info-color);\n    --label-badge-green: var(--success-color);\n    --label-badge-yellow: var(--warning-color);\n    --label-badge-grey: #9e9e9e;\n\n    /* states icon */\n    --state-icon-color: #44739e;\n    /* an error state is anything that would be considered an error */\n    /* --state-icon-error-color: #db4437; derived from error-color */\n\n    /* energy */\n    --energy-grid-consumption-color: #488fc2;\n    --energy-grid-return-color: #8353d1;\n    --energy-solar-color: #ff9800;\n    --energy-non-fossil-color: #0f9d58;\n    --energy-battery-out-color: #4db6ac;\n    --energy-battery-in-color: #f06292;\n    --energy-gas-color: #8e021b;\n    --energy-water-color: #00bcd4;\n\n    /* opacity for dark text on a light background */\n    --dark-divider-opacity: 0.12;\n    --dark-disabled-opacity: 0.38; /* or hint text or icon */\n    --dark-secondary-opacity: 0.54;\n    --dark-primary-opacity: 0.87;\n\n    /* opacity for light text on a dark background */\n    --light-divider-opacity: 0.12;\n    --light-disabled-opacity: 0.3; /* or hint text or icon */\n    --light-secondary-opacity: 0.7;\n    --light-primary-opacity: 1;\n\n    /* rgb */\n    --rgb-primary-color: 3, 169, 244;\n    --rgb-accent-color: 255, 152, 0;\n    --rgb-primary-text-color: 33, 33, 33;\n    --rgb-secondary-text-color: 114, 114, 114;\n    --rgb-text-primary-color: 255, 255, 255;\n    --rgb-card-background-color: 255, 255, 255;\n\n    /* color */\n    --disabled-color: #bdbdbd;\n    --red-color: #f44336;\n    --pink-color: #e91e63;\n    --purple-color: #926bc7;\n    --deep-purple-color: #6e41ab;\n    --indigo-color: #3f51b5;\n    --blue-color: #2196f3;\n    --light-blue-color: #03a9f4;\n    --cyan-color: #00bcd4;\n    --teal-color: #009688;\n    --green-color: #4caf50;\n    --light-green-color: #8bc34a;\n    --lime-color: #cddc39;\n    --yellow-color: #ffeb3b;\n    --amber-color: #ffc107;\n    --orange-color: #ff9800;\n    --deep-orange-color: #ff6f22;\n    --brown-color: #795548;\n    --light-grey-color: #bdbdbd;\n    --grey-color: #9e9e9e;\n    --dark-grey-color: #606060;\n    --blue-grey-color: #607d8b;\n    --black-color: #000000;\n    --white-color: #ffffff;\n\n    /* state color */\n    --state-active-color: var(--amber-color);\n    --state-inactive-color: var(--grey-color);\n    --state-unavailable-color: var(--disabled-color);\n\n    /* state domain colors */\n    --state-alarm_control_panel-armed_away-color: var(--green-color);\n    --state-alarm_control_panel-armed_custom_bypass-color: var(--green-color);\n    --state-alarm_control_panel-armed_home-color: var(--green-color);\n    --state-alarm_control_panel-armed_night-color: var(--green-color);\n    --state-alarm_control_panel-armed_vacation-color: var(--green-color);\n    --state-alarm_control_panel-arming-color: var(--orange-color);\n    --state-alarm_control_panel-disarming-color: var(--orange-color);\n    --state-alarm_control_panel-pending-color: var(--orange-color);\n    --state-alarm_control_panel-triggered-color: var(--red-color);\n    --state-alert-off-color: var(--orange-color);\n    --state-alert-on-color: var(--red-color);\n    --state-binary_sensor-active-color: var(--amber-color);\n    --state-binary_sensor-battery-on-color: var(--red-color);\n    --state-binary_sensor-carbon_monoxide-on-color: var(--red-color);\n    --state-binary_sensor-gas-on-color: var(--red-color);\n    --state-binary_sensor-heat-on-color: var(--red-color);\n    --state-binary_sensor-lock-on-color: var(--red-color);\n    --state-binary_sensor-moisture-on-color: var(--red-color);\n    --state-binary_sensor-problem-on-color: var(--red-color);\n    --state-binary_sensor-safety-on-color: var(--red-color);\n    --state-binary_sensor-smoke-on-color: var(--red-color);\n    --state-binary_sensor-sound-on-color: var(--red-color);\n    --state-binary_sensor-tamper-on-color: var(--red-color);\n    --state-climate-auto-color: var(--green-color);\n    --state-climate-cool-color: var(--blue-color);\n    --state-climate-dry-color: var(--orange-color);\n    --state-climate-fan_only-color: var(--cyan-color);\n    --state-climate-heat-color: var(--deep-orange-color);\n    --state-climate-heat-cool-color: var(--amber-color);\n    --state-cover-active-color: var(--purple-color);\n    --state-device_tracker-active-color: var(--blue-color);\n    --state-device_tracker-home-color: var(--green-color);\n    --state-fan-active-color: var(--cyan-color);\n    --state-humidifier-on-color: var(--blue-color);\n    --state-lawn_mower-error-color: var(--red-color);\n    --state-lawn_mower-mowing-color: var(--teal-color);\n    --state-light-active-color: var(--amber-color);\n    --state-lock-jammed-color: var(--red-color);\n    --state-lock-locked-color: var(--green-color);\n    --state-lock-locking-color: var(--orange-color);\n    --state-lock-unlocked-color: var(--red-color);\n    --state-lock-unlocking-color: var(--orange-color);\n    --state-lock-open-color: var(--red-color);\n    --state-lock-opening-color: var(--orange-color);\n    --state-media_player-active-color: var(--light-blue-color);\n    --state-person-active-color: var(--blue-color);\n    --state-person-home-color: var(--green-color);\n    --state-plant-active-color: var(--red-color);\n    --state-siren-active-color: var(--red-color);\n    --state-sun-above_horizon-color: var(--amber-color);\n    --state-sun-below_horizon-color: var(--indigo-color);\n    --state-switch-active-color: var(--amber-color);\n    --state-update-active-color: var(--orange-color);\n    --state-vacuum-active-color: var(--teal-color);\n    --state-valve-active-color: var(--blue-color);\n    --state-sensor-battery-high-color: var(--green-color);\n    --state-sensor-battery-low-color: var(--red-color);\n    --state-sensor-battery-medium-color: var(--orange-color);\n    --state-water_heater-eco-color: var(--green-color);\n    --state-water_heater-electric-color: var(--orange-color);\n    --state-water_heater-gas-color: var(--orange-color);\n    --state-water_heater-heat_pump-color: var(--orange-color);\n    --state-water_heater-high_demand-color: var(--deep-orange-color);\n    --state-water_heater-performance-color: var(--deep-orange-color);\n\n    /* history colors */\n    --history-unavailable-color: transparent;\n    --history-unknown-color: var(--dark-grey-color);\n\n    /* input components */\n    --input-idle-line-color: rgba(0, 0, 0, 0.42);\n    --input-hover-line-color: rgba(0, 0, 0, 0.87);\n    --input-disabled-line-color: rgba(0, 0, 0, 0.06);\n    --input-outlined-idle-border-color: rgba(0, 0, 0, 0.38);\n    --input-outlined-hover-border-color: rgba(0, 0, 0, 0.87);\n    --input-outlined-disabled-border-color: rgba(0, 0, 0, 0.06);\n    --input-fill-color: rgb(245, 245, 245);\n    --input-disabled-fill-color: rgb(250, 250, 250);\n    --input-ink-color: rgba(0, 0, 0, 0.87);\n    --input-label-ink-color: rgba(0, 0, 0, 0.6);\n    --input-disabled-ink-color: rgba(0, 0, 0, 0.37);\n    --input-dropdown-icon-color: rgba(0, 0, 0, 0.54);\n\n    /* Vaadin typography */\n    --material-h6-font-size: 1.25rem;\n    --material-small-font-size: 0.875rem;\n    --material-caption-font-size: 0.75rem;\n    --material-button-font-size: 0.875rem;\n\n    /* Paper shadow */\n    --shadow-transition: {\n      transition: box-shadow 0.28s cubic-bezier(0.4, 0, 0.2, 1);\n    };\n\n    --shadow-none: {\n      box-shadow: none;\n    };\n\n    /* from http://codepen.io/shyndman/pen/c5394ddf2e8b2a5c9185904b57421cdb */\n\n    --shadow-elevation-2dp: {\n      box-shadow:\n        0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 1px 5px 0 rgba(0, 0, 0, 0.12),\n        0 3px 1px -2px rgba(0, 0, 0, 0.2);\n    };\n\n    --shadow-elevation-3dp: {\n      box-shadow:\n        0 3px 4px 0 rgba(0, 0, 0, 0.14),\n        0 1px 8px 0 rgba(0, 0, 0, 0.12),\n        0 3px 3px -2px rgba(0, 0, 0, 0.4);\n    };\n\n    --shadow-elevation-4dp: {\n      box-shadow:\n        0 4px 5px 0 rgba(0, 0, 0, 0.14),\n        0 1px 10px 0 rgba(0, 0, 0, 0.12),\n        0 2px 4px -1px rgba(0, 0, 0, 0.4);\n    };\n\n    --shadow-elevation-6dp: {\n      box-shadow:\n        0 6px 10px 0 rgba(0, 0, 0, 0.14),\n        0 1px 18px 0 rgba(0, 0, 0, 0.12),\n        0 3px 5px -1px rgba(0, 0, 0, 0.4);\n    };\n\n    --shadow-elevation-8dp: {\n      box-shadow:\n        0 8px 10px 1px rgba(0, 0, 0, 0.14),\n        0 3px 14px 2px rgba(0, 0, 0, 0.12),\n        0 5px 5px -3px rgba(0, 0, 0, 0.4);\n    };\n\n    --shadow-elevation-12dp: {\n      box-shadow:\n        0 12px 16px 1px rgba(0, 0, 0, 0.14),\n        0 4px 22px 3px rgba(0, 0, 0, 0.12),\n        0 6px 7px -4px rgba(0, 0, 0, 0.4);\n    };\n\n    --shadow-elevation-16dp: {\n      box-shadow:\n        0 16px 24px 2px rgba(0, 0, 0, 0.14),\n        0 6px 30px 5px rgba(0, 0, 0, 0.12),\n        0 8px 10px -5px rgba(0, 0, 0, 0.4);\n    };\n\n    --shadow-elevation-24dp: {\n      box-shadow:\n        0 24px 38px 3px rgba(0, 0, 0, 0.14),\n        0 9px 46px 8px rgba(0, 0, 0, 0.12),\n        0 11px 15px -7px rgba(0, 0, 0, 0.4);\n    };\n\n    /* Paper typography Styles */\n    --paper-font-common-base: {\n      font-family: \"Roboto\", \"Noto\", sans-serif;\n      -webkit-font-smoothing: antialiased;\n    };\n\n    --paper-font-common-code: {\n      font-family: \"Roboto Mono\", \"Consolas\", \"Menlo\", monospace;\n      -webkit-font-smoothing: antialiased;\n    };\n\n    --paper-font-common-expensive-kerning: {\n      text-rendering: optimizeLegibility;\n    };\n\n    --paper-font-common-nowrap: {\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    };\n\n    /* Material Font Styles */\n\n    --paper-font-display4: {\n      @apply --paper-font-common-base;\n      @apply --paper-font-common-nowrap;\n\n      font-size: 112px;\n      font-weight: 300;\n      letter-spacing: -0.044em;\n      line-height: 120px;\n    };\n\n    --paper-font-display3: {\n      @apply --paper-font-common-base;\n      @apply --paper-font-common-nowrap;\n\n      font-size: 56px;\n      font-weight: 400;\n      letter-spacing: -0.026em;\n      line-height: 60px;\n    };\n\n    --paper-font-display2: {\n      @apply --paper-font-common-base;\n\n      font-size: 45px;\n      font-weight: 400;\n      letter-spacing: -0.018em;\n      line-height: 48px;\n    };\n\n    --paper-font-display1: {\n      @apply --paper-font-common-base;\n\n      font-size: 34px;\n      font-weight: 400;\n      letter-spacing: -0.01em;\n      line-height: 40px;\n    };\n\n    --paper-font-headline: {\n      @apply --paper-font-common-base;\n\n      font-size: 24px;\n      font-weight: 400;\n      letter-spacing: -0.012em;\n      line-height: 32px;\n    };\n\n    --paper-font-title: {\n      @apply --paper-font-common-base;\n      @apply --paper-font-common-nowrap;\n\n      font-size: 20px;\n      font-weight: 500;\n      line-height: 28px;\n    };\n\n    --paper-font-subhead: {\n      @apply --paper-font-common-base;\n\n      font-size: 16px;\n      font-weight: 400;\n      line-height: 24px;\n    };\n\n    --paper-font-body2: {\n      @apply --paper-font-common-base;\n\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 24px;\n    };\n\n    --paper-font-body1: {\n      @apply --paper-font-common-base;\n\n      font-size: 14px;\n      font-weight: 400;\n      line-height: 20px;\n    };\n\n    --paper-font-caption: {\n      @apply --paper-font-common-base;\n      @apply --paper-font-common-nowrap;\n\n      font-size: 12px;\n      font-weight: 400;\n      letter-spacing: 0.011em;\n      line-height: 20px;\n    };\n\n    --paper-font-menu: {\n      @apply --paper-font-common-base;\n      @apply --paper-font-common-nowrap;\n\n      font-size: 13px;\n      font-weight: 500;\n      line-height: 24px;\n    };\n\n    --paper-font-button: {\n      @apply --paper-font-common-base;\n      @apply --paper-font-common-nowrap;\n\n      font-size: 14px;\n      font-weight: 500;\n      letter-spacing: 0.018em;\n      line-height: 24px;\n      text-transform: uppercase;\n    };\n\n    --paper-font-code2: {\n      @apply --paper-font-common-code;\n\n      font-size: 14px;\n      font-weight: 700;\n      line-height: 20px;\n    };\n\n    --paper-font-code1: {\n      @apply --paper-font-common-code;\n\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 20px;\n    };\n\n    direction: ltr;\n    --direction: ltr;\n    --float-start: left;\n    --float-end: right;\n    --margin-title-ltr: 0 0 0 24px;\n    --margin-title-rtl: 0 24px 0 0;\n\n    ${unsafeCSS(\n      Object.entries(derivedStyles)\n        .map(([key, value]) => `--${key}: ${value};`)\n        .join(\"\")\n    )}\n  }\n`.toString();\n\nconst styleElement = document.createElement(\"style\");\nstyleElement.textContent = [mainStyles, fontStyles].join(\"\");\ndocument.head.append(styleElement);\n","import { ContextProvider } from \"@lit-labs/context\";\nimport { deviceConfigsContext, entityConfigsContext } from \"components/context\";\nimport { LitElement, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { debounce } from \"@ha/common/util/debounce\";\nimport { applyThemesOnElement } from \"@ha/common/dom/apply_themes_on_element\";\nimport { listenMediaQuery } from \"@ha/common/dom/media_query\";\nimport { navigate } from \"@ha/common/navigate\";\nimport { makeDialogManager } from \"@ha/dialogs/make-dialog-manager\";\nimport \"@ha/resources/ha-style\";\nimport { getConfigEntry } from \"@ha/data/config_entries\";\nimport type { HomeAssistant, Route } from \"@ha/types\";\nimport { fullEntitiesContext } from \"@ha/data/context\";\nimport { fetchEntityRegistry } from \"@ha/data/entity_registry\";\nimport \"./lcn-router\";\nimport { ProvideHassLitMixin } from \"@ha/mixins/provide-hass-lit-mixin\";\nimport { LCNLogger } from \"./lcn-logger\";\nimport { localize } from \"./localize/localize\";\nimport { LCN, fetchDevices, fetchEntities } from \"./types/lcn\";\nimport { LocationChangedEvent } from \"./types/navigation\";\n\n@customElement(\"lcn-frontend\")\nclass LcnFrontend extends ProvideHassLitMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ attribute: false }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _searchParms = new URLSearchParams(window.location.search);\n\n  private _deviceConfigs = new ContextProvider(this, {\n    context: deviceConfigsContext,\n    initialValue: [],\n  });\n\n  private _entityConfigs = new ContextProvider(this, {\n    context: entityConfigsContext,\n    initialValue: [],\n  });\n\n  private _entityRegistryEntries = new ContextProvider(this, {\n    context: fullEntitiesContext,\n    initialValue: [],\n  });\n\n  protected async firstUpdated(_changedProps) {\n    super.firstUpdated(_changedProps);\n    if (!this.hass) {\n      return;\n    }\n    if (!this.lcn) {\n      await this._initLCN();\n      await this._postLCNSetup();\n    }\n    this.addEventListener(\"lcn-location-changed\", (e) => this._setRoute(e as LocationChangedEvent));\n\n    listenMediaQuery(\"(prefers-color-scheme: dark)\", (_matches) => {\n      this._applyTheme();\n    });\n\n    makeDialogManager(this, this.shadowRoot!);\n\n    if (this.route.path === \"\" || this.route.path === \"/\") {\n      navigate(\"/lcn/devices\", { replace: true });\n    }\n  }\n\n  protected render() {\n    if (!this.hass || !this.lcn) {\n      return nothing;\n    }\n    return html`\n      <lcn-router\n        .hass=${this.hass}\n        .lcn=${this.lcn}\n        .route=${this.route}\n        .narrow=${this.narrow}\n      ></lcn-router>\n    `;\n  }\n\n  protected async _initLCN(): Promise<void> {\n    let entry_id: string = this._searchParms.get(\"config_entry\")!;\n    if (entry_id != null) {\n      window.localStorage.setItem(\"lcn_entry_id\", entry_id);\n    }\n    entry_id = window.localStorage.getItem(\"lcn_entry_id\")!;\n    this.lcn = {\n      language: this.hass.language,\n      localize: (string, replace) => localize(this.hass, string, replace),\n      log: new LCNLogger(),\n      config_entry: (await getConfigEntry(this.hass, entry_id)).config_entry,\n    };\n  }\n\n  protected async _postLCNSetup(): Promise<void> {\n    await this._fetchDevices();\n    await this._fetchEntities();\n    this._fetchEntityRegistryEntries();\n\n    this.addEventListener(\"lcn-update-device-configs\", (_e) => this._fetchDevices());\n    this.addEventListener(\"lcn-update-entity-configs\", (_e) => this._fetchEntities());\n\n    this.hass.connection.subscribeEvents(\n      debounce(async () => this._fetchEntityRegistryEntries(), 500, false),\n      \"entity_registry_updated\",\n    );\n  }\n\n  private _setRoute(ev: LocationChangedEvent): void {\n    if (!ev.detail?.route) {\n      return;\n    }\n    this.route = ev.detail.route;\n    navigate(this.route.path, { replace: true });\n    this.requestUpdate();\n  }\n\n  private _applyTheme() {\n    applyThemesOnElement(\n      this.parentElement,\n      this.hass.themes,\n      this.hass.selectedTheme?.theme ||\n        (this.hass.themes.darkMode && this.hass.themes.default_dark_theme\n          ? this.hass.themes.default_dark_theme!\n          : this.hass.themes.default_theme),\n      {\n        ...this.hass.selectedTheme,\n        dark: this.hass.themes.darkMode,\n      },\n    );\n    this.parentElement!.style.backgroundColor = \"var(--primary-background-color)\";\n    this.parentElement!.style.color = \"var(--primary-text-color)\";\n  }\n\n  private async _fetchDevices() {\n    const deviceConfigs = await fetchDevices(this.hass, this.lcn.config_entry);\n    this._deviceConfigs.setValue(deviceConfigs);\n  }\n\n  private async _fetchEntities() {\n    const entityConfigs = await fetchEntities(this.hass, this.lcn.config_entry);\n    this._entityConfigs.setValue(entityConfigs);\n  }\n\n  private async _fetchEntityRegistryEntries() {\n    const entityRegistryEntries = await fetchEntityRegistry(this.hass.connection).then((entries) =>\n      entries.filter((entry) => entry.config_entry_id === this.lcn.config_entry.entry_id),\n    );\n    this._entityRegistryEntries.setValue(entityRegistryEntries);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-frontend\": LcnFrontend;\n  }\n}\n"],"names":[],"sourceRoot":""}
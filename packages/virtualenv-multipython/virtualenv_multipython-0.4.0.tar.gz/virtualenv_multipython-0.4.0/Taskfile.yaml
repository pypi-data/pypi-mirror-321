version: '3'

tasks:

  init:
    desc: Init local dev environment.
    cmds:
      - uv sync

  news:
    desc: Show available news categories.
    cmds:
      - yq '.tool.towncrier.type[].name' -oj -r pyproject.toml

  news:*:
    desc: Create news item in category.
    vars:
      SECTION: '{{index .MATCH 0}}'
      ISSUE: {sh: git rev-parse --abbrev-ref HEAD | cut -d- -f1}
      MSG: {sh: "git rev-parse --abbrev-ref HEAD | sed 's/^[0-9][0-9]*-//' | uv run caseutil -csentence"}
    cmds:
      - uv run towncrier create -c '{{coalesce .CLI_ARGS .MSG}}' "{{.ISSUE}}.{{.SECTION}}.md"

  lint:
    desc: Run linters.
    cmds:
      - uv run mypy src
      - uv run ruff check
      - uv run ruff format --check
      - shellcheck tests/test_*.sh
      - hadolint tests/Dockerfile

  shell:
    desc: Shell to multipython:unsafe, cwd=/test.
    cmds:
      - docker run --rm -it -v .:/test -w /test -h unsafe makukha/multipython:unsafe

  shell:*:
    desc: Shell to specific test target.
    vars:
      TARGET: '{{index .MATCH 0}}'
    cmds:
      - docker buildx bake -f tests/docker-bake.hcl --set {{.TARGET}}.output=type=image {{.TARGET}}
      - docker run --rm -it -h {{.TARGET}} virtualenv-multipython-{{.TARGET}}

  test:
    desc: Run tests.
    env:
      BUILDKIT_PROGRESS: plain
    cmds:
      - task: build
      - docker buildx bake -f tests/docker-bake.hcl test

  debug:
    desc: Run debugging test case.
    env:
      BUILDKIT_PROGRESS: plain
    cmds:
      - task: build
      - docker buildx bake -f tests/docker-bake.hcl debug
      - docker run --rm -it virtualenv-multipython-debug bash test_tox4.sh

  docs:
    desc: Update docs.
    cmds:
      - uv run docsub x generate
      - uv run docsub apply -i README.md

  build:
    desc: Build package.
    cmds:
      - uv lock
      - rm -rf dist
      - uv build

  clean:
    desc: Prune build cache.
    cmds:
      - docker builder prune
      - docker image prune

  #
  #  RELEASE
  # ---------
  #
  # > task lint
  # > task test
  # > task docs
  #
  # > task release:version -- [patch|minor|major]
  # > task release:changelog
  # > (proofread changelog)
  #
  # > task build
  # > task release:publish
  #

  release:version:
    desc: Bump release version.
    cmds:
      - uv run bump-my-version bump -- {{.CLI_ARGS}}
      - uv lock

  release:changelog:
    desc: Collect changelog entries.
    vars:
      VERSION: {sh: uv run bump-my-version show current_version 2>/dev/null}
    cmds:
      - uv run towncrier build --yes --version "{{.VERSION}}"
      - sed -e's/^### \(.*\)$/***\1***/; s/\([a-z]\)\*\*\*$/\1:***/' -i '' CHANGELOG.md

  release:publish:
    desc: Publish package on PyPI.
    cmds:
      - task: build
      - uv publish

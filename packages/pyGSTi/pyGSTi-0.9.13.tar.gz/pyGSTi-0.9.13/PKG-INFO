Metadata-Version: 2.1
Name: pyGSTi
Version: 0.9.13
Summary: A python implementation of Gate Set Tomography
Home-page: http://www.pygsti.info
Download-URL: https://github.com/pyGSTio/pyGSTi/tarball/master
Author: Erik Nielsen, Stefan Seritan, Corey Ostrove, Riley Murray, Jordan Hines, Kenneth Rudinger, Timothy Proctor, John Gamble, Robin Blume-Kohout
Author-email: pygsti@sandia.gov
Keywords: pygsti,tomography,gate set,pigsty,pig,quantum,qubit
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Unix
Requires-Python: >=3.8
Provides-Extra: pytorch
Provides-Extra: diamond_norm
Provides-Extra: memory_profiling
Provides-Extra: multiprocessor
Provides-Extra: evolutionary_optimization
Provides-Extra: report_pickling
Provides-Extra: report_pdf_figures
Provides-Extra: html_reports
Provides-Extra: notebooks
Provides-Extra: mongodb
Provides-Extra: msgpack
Provides-Extra: extensions
Provides-Extra: linting
Provides-Extra: interpygate
Provides-Extra: testing
Provides-Extra: complete
Provides-Extra: no_mpi
Provides-Extra: testing_no_cython
License-File: LICENSE

Gate set tomography (GST) is a quantum tomography protocol that provides full characterization of a quantum logic device
(e.g. a qubit).  GST estimates a set of quantum logic gates and (simultaneously) the associated state preparation and
measurement (SPAM) operations.  GST is self-calibrating.  This eliminates a key limitation of traditional quantum state
and process tomography, which characterize either states (assuming perfect processes) or processes (assuming perfect
state preparation and measurement), but not both together.  Compared with benchmarking protocols such as randomized
benchmarking, GST provides much more detailed and accurate information about the gates, but demands more data.  The
primary downside of GST has been its complexity.  Whereas benchmarking and state/process tomography data can be analyzed
with relatively simple algorithms, GST requires more complex algorithms and more fine-tuning (linear GST is an exception
that can be implemented easily).  pyGSTi addresses and eliminates this obstacle by providing a fully-featured, publicly
available implementation of GST in the Python programming language.

The primary goals of the pyGSTi project are to:

- provide efficient and robust implementations of Gate Set Tomography algorithms;
- allow straightforward interoperability with other software;
- provide a powerful high-level interface suited to inexperienced programmers, so that
  common GST tasks can be performed using just one or two lines of code;
- use modular design to make it easy for users to modify, customize, and extend GST functionality.

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "icalendar_compatibility"
license = {file = "LICENSE"}
keywords = ["icalendar", "calendar", "ics", "rfc5545"]
dynamic = ["urls", "version"]
authors = [
  { name="Nicco Kunzmann", email="niccokunzmann@rambler.ru" },
]
maintainers = [
  { name="Nicco Kunzmann", email="niccokunzmann@rambler.ru" },
]
description = "Read icalendar properties with maximum compatibility to all calendar providers."
readme = "README.rst"
requires-python = ">=3.9"
# see https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "Topic :: Office/Business :: Scheduling",
]

dependencies = [
    "icalendar",
]

[project.optional-dependencies]
dev = [
    "pytest",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "sphinx-copybutton",
]

[project.scripts]

[tool.hatch.metadata.hooks.vcs.urls]
#[project.urls]
Homepage = "https://icalendar-compatibility.readthedocs.io/"
Repository = "https://github.com/niccokunzmann/icalendar_compatibility/"
source_archive = "https://github.com/niccokunzmann/icalendar_compatibility/archive/{commit_hash}.zip"
Issues = "https://github.com/niccokunzmann/icalendar_compatibility/issues"
Documentation = "https://icalendar-compatibility.readthedocs.io/"
Changelog = "https://icalendar-compatibility.readthedocs.io/en/latest/changes.html"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
# see https://github.com/ofek/hatch-vcs/issues/43#issuecomment-1553065222
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "icalendar_compatibility/_version.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN",     # flake8-annotations
    "B020",    # Loop control variable {name} overrides iterable it iterates
    "C401",    # Unnecessary generator (rewrite as a set comprehension)
    "C901",    # {name} is too complex ({complexity} > {max_complexity})
    "COM812",  # Trailing comma missing
    "D1",      # Missing docstring
    "D2",      # docstrings stuffs
    "D4",      # docstrings stuffs
    "EM10",    # Exception string usage
    "ERA001",  # Found commented-out code
    "FBT002",  # Boolean default positional argument in function definition
    "FIX",     # TODO comments
    "ISC001",  # Implicitly concatenated string literals on one line (to avoid with formatter)
    "N818",    # Exception name {name} should be named with an Error suffix
    "PLR091",  # Too many things (complexity, arguments, branches, etc...)
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "RUF012",  # Mutable class attributes should be annotated with typing.ClassVar
    "RUF015",  # Prefer next({iterable}) over single element slice
    "S101",    # Use of assert detected
    "TD",      # TODO comments
    "TRY003",  # Avoid specifying long messages outside the exception class
    "S104",    # Possible binding to all interfaces
    "E722",    # Do not use bare `except`
    "RUF005",  # Consider iterable unpacking instead of concatenation
    "DTZ005",  # `datetime.datetime.now()` called without a `tz` argument
    "PERF401", # Use a list comprehension to create a transformed list
    "ARG002",  # Unused method argument: ...
    "ARG001",  # Unused function argument: ...
    "UP007",   # Optional
    "E501",    # line too long
]
extend-safe-fixes = [
    "PT006", # Wrong type passed to first argument of @pytest.mark.parametrize; expected {expected_string}
]

[tool.ruff.lint.per-file-ignores]
"icalendar_compatibility/test/*" = [
    "B011",   # Do not assert False (python -O removes these calls), raise AssertionError()
    "DTZ001", # datetime.datetime() called without a tzinfo argument
    "E501",   # Indentation is not a multiple of {indent_size}
    "N802",   # Function name {name} should be lowercase
    "PT011",  # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "PT012",  # pytest.raises() block should contain a single simple statement
    "PT015",  # Assertion always fails, replace with pytest.fail()
    "T201",   # print found
    "T203",   # `pprint` found
    "RUF001", # String contains ambiguous character
]


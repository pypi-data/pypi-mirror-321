# Generated by cloudcoil-model-codegen v0.0.33
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Dict, List, Literal, Optional

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseModel
from cloudcoil.resources import Resource


class Owner(BaseModel):
    api_version: Annotated[
        str, Field(alias="apiVersion", description="API version of the referent.")
    ]
    block_owner_deletion: Annotated[
        Optional[bool],
        Field(
            alias="blockOwnerDeletion",
            description='If true, AND if the owner has the "foregroundDeletion" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs "delete" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.',
        ),
    ] = None
    controller: Annotated[
        Optional[bool],
        Field(description="If true, this reference points to the managing controller."),
    ] = None
    kind: Annotated[
        str,
        Field(
            description="Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"
        ),
    ]
    uid: Annotated[
        str,
        Field(
            description="UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"
        ),
    ]


class MatchExpression(BaseModel):
    key: Annotated[str, Field(description="key is the label key that the selector applies to.")]
    operator: Annotated[
        str,
        Field(
            description="operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
        ),
    ]
    values: Annotated[
        Optional[List[str]],
        Field(
            description="values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
        ),
    ] = None


class ResourceSelector(BaseModel):
    match_expressions: Annotated[
        Optional[List[MatchExpression]],
        Field(
            alias="matchExpressions",
            description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
        ),
    ] = None
    match_labels: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="matchLabels",
            description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
        ),
    ] = None


class ResourceModel(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="API version of the referent."),
    ] = None
    field_path: Annotated[
        Optional[str],
        Field(
            alias="fieldPath",
            description='If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n"spec.containers{name}" (where "name" refers to the name of the container that triggered\nthe event) or if no container name is specified "spec.containers[2]" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.',
        ),
    ] = None
    kind: Annotated[
        Optional[str],
        Field(
            description="Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        ),
    ] = None
    namespace: Annotated[
        Optional[str],
        Field(
            description="Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
        ),
    ] = None
    resource_version: Annotated[
        Optional[str],
        Field(
            alias="resourceVersion",
            description="Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
        ),
    ] = None
    uid: Annotated[
        Optional[str],
        Field(
            description="UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
        ),
    ] = None


class Timestamp(BaseModel):
    nanos: Annotated[
        int,
        Field(
            description="Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context."
        ),
    ]
    seconds: Annotated[
        int,
        Field(
            description="Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
        ),
    ]


class Result(BaseModel):
    category: Annotated[Optional[str], Field(description="Category indicates policy category")] = (
        None
    )
    message: Annotated[
        Optional[str],
        Field(description="Description is a short user friendly message for the policy rule"),
    ] = None
    policy: Annotated[str, Field(description="Policy is the name or identifier of the policy")]
    properties: Annotated[
        Optional[Dict[str, str]],
        Field(description="Properties provides additional information for the policy rule"),
    ] = None
    resource_selector: Annotated[
        Optional[ResourceSelector],
        Field(
            alias="resourceSelector",
            description="SubjectSelector is an optional label selector for checked Kubernetes resources.\nFor example, a policy result may apply to all pods that match a label.\nEither a Subject or a SubjectSelector can be specified.\nIf neither are provided, the result is assumed to be for the policy report scope.",
        ),
    ] = None
    resources: Annotated[
        Optional[List[ResourceModel]],
        Field(description="Subjects is an optional reference to the checked Kubernetes resources"),
    ] = None
    result: Annotated[
        Optional[Literal["pass", "fail", "warn", "error", "skip"]],
        Field(description="Result indicates the outcome of the policy rule execution"),
    ] = None
    rule: Annotated[
        Optional[str],
        Field(description="Rule is the name or identifier of the rule within the policy"),
    ] = None
    scored: Annotated[
        Optional[bool], Field(description="Scored indicates if this result is scored")
    ] = None
    severity: Annotated[
        Optional[Literal["critical", "high", "low", "medium", "info"]],
        Field(description="Severity indicates policy check result criticality"),
    ] = None
    source: Annotated[
        Optional[str],
        Field(description="Source is an identifier for the policy engine that manages this report"),
    ] = None
    timestamp: Annotated[
        Optional[Timestamp],
        Field(description="Timestamp indicates the time the result was found"),
    ] = None


class Summary(BaseModel):
    error: Annotated[
        Optional[int],
        Field(description="Error provides the count of policies that could not be evaluated"),
    ] = None
    fail: Annotated[
        Optional[int],
        Field(description="Fail provides the count of policies whose requirements were not met"),
    ] = None
    pass_: Annotated[
        Optional[int],
        Field(
            alias="pass",
            description="Pass provides the count of policies whose requirements were met",
        ),
    ] = None
    skip: Annotated[
        Optional[int],
        Field(
            description="Skip indicates the count of policies that were not selected for evaluation"
        ),
    ] = None
    warn: Annotated[
        Optional[int],
        Field(
            description="Warn provides the count of non-scored policies whose requirements were not met"
        ),
    ] = None


class ClusterEphemeralReportSpec(BaseModel):
    owner: Annotated[
        Owner,
        Field(
            description="Owner is a reference to the report owner (e.g. a Deployment, Namespace, or Node)"
        ),
    ]
    results: Annotated[
        Optional[List[Result]],
        Field(description="PolicyReportResult provides result details"),
    ] = None
    summary: Annotated[
        Optional[Summary],
        Field(description="PolicyReportSummary provides a summary of results"),
    ] = None


class EphemeralReportSpec(BaseModel):
    owner: Annotated[
        Owner,
        Field(
            description="Owner is a reference to the report owner (e.g. a Deployment, Namespace, or Node)"
        ),
    ]
    results: Annotated[
        Optional[List[Result]],
        Field(description="PolicyReportResult provides result details"),
    ] = None
    summary: Annotated[
        Optional[Summary],
        Field(description="PolicyReportSummary provides a summary of results"),
    ] = None


class ClusterEphemeralReport(Resource):
    api_version: Annotated[
        Optional[Literal["reports.kyverno.io/v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "reports.kyverno.io/v1"
    kind: Annotated[
        Optional[Literal["ClusterEphemeralReport"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ClusterEphemeralReport"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: ClusterEphemeralReportSpec


class EphemeralReport(Resource):
    api_version: Annotated[
        Optional[Literal["reports.kyverno.io/v1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "reports.kyverno.io/v1"
    kind: Annotated[
        Optional[Literal["EphemeralReport"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "EphemeralReport"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: EphemeralReportSpec

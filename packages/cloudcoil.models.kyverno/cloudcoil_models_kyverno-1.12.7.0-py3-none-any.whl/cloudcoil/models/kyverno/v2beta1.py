# Generated by cloudcoil-model-codegen v0.0.33
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseModel
from cloudcoil.resources import Resource


class All(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class Conditions(BaseModel):
    all: Annotated[
        Optional[List[All]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass."
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass."
        ),
    ] = None


class Datum(BaseModel):
    key: Annotated[str, Field(description="Key is a unique identifier for the data value")]
    value: Annotated[Any, Field(description="Value is the data value")]


class Service(BaseModel):
    ca_bundle: Annotated[
        Optional[str],
        Field(
            alias="caBundle",
            description="CABundle is a PEM encoded CA bundle which will be used to validate\nthe server certificate.",
        ),
    ] = None
    url: Annotated[
        str,
        Field(
            description="URL is the JSON web service URL. A typical form is\n`https://{service}.{namespace}:{port}/{path}`."
        ),
    ]


class ApiCall(BaseModel):
    data: Annotated[
        Optional[List[Datum]],
        Field(
            description="The data object specifies the POST data sent to the server.\nOnly applicable when the method field is set to POST."
        ),
    ] = None
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description='JMESPath is an optional JSON Match Expression that can be used to\ntransform the JSON response returned from the server. For example\na JMESPath of "items | length(@)" applied to the API server response\nfor the URLPath "/apis/apps/v1/deployments" will return the total count\nof deployments across all namespaces.',
        ),
    ] = None
    method: Annotated[
        Optional[Literal["GET", "POST"]],
        Field(description="Method is the HTTP request type (GET or POST)."),
    ] = "GET"
    service: Annotated[
        Optional[Service],
        Field(
            description="Service is an API call to a JSON web service.\nThis is used for non-Kubernetes API server calls.\nIt's mutually exclusive with the URLPath field."
        ),
    ] = None
    url_path: Annotated[
        Optional[str],
        Field(
            alias="urlPath",
            description='URLPath is the URL path to be used in the HTTP GET or POST request to the\nKubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").\nThe format required is the same format used by the `kubectl get --raw` command.\nSee https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls\nfor details.\nIt\'s mutually exclusive with the Service field.',
        ),
    ] = None


class ConfigMap(BaseModel):
    name: Annotated[str, Field(description="Name is the ConfigMap name.")]
    namespace: Annotated[
        Optional[str], Field(description="Namespace is the ConfigMap namespace.")
    ] = None


class GlobalReference(BaseModel):
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description='JMESPath is an optional JSON Match Expression that can be used to\ntransform the JSON response returned from the server. For example\na JMESPath of "items | length(@)" applied to the API server response\nfor the URLPath "/apis/apps/v1/deployments" will return the total count\nof deployments across all namespaces.',
        ),
    ] = None
    name: Annotated[Optional[str], Field(description="Name of the global context entry")] = None


class ImageRegistryCredentials(BaseModel):
    allow_insecure_registry: Annotated[
        Optional[bool],
        Field(
            alias="allowInsecureRegistry",
            description="AllowInsecureRegistry allows insecure access to a registry.",
        ),
    ] = None
    providers: Annotated[
        Optional[List[Literal["default", "amazon", "azure", "google", "github"]]],
        Field(
            description="Providers specifies a list of OCI Registry names, whose authentication providers are provided.\nIt can be of one of these values: default,google,azure,amazon,github."
        ),
    ] = None
    secrets: Annotated[
        Optional[List[str]],
        Field(
            description="Secrets specifies a list of secrets that are provided for credentials.\nSecrets must live in the Kyverno namespace."
        ),
    ] = None


class ImageRegistry(BaseModel):
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials],
        Field(
            alias="imageRegistryCredentials",
            description="ImageRegistryCredentials provides credentials that will be used for authentication with registry",
        ),
    ] = None
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description="JMESPath is an optional JSON Match Expression that can be used to\ntransform the ImageData struct returned as a result of processing\nthe image reference.",
        ),
    ] = None
    reference: Annotated[
        str,
        Field(
            description="Reference is image reference to a container image in the registry.\nExample: ghcr.io/kyverno/kyverno:latest"
        ),
    ]


class Variable(BaseModel):
    default: Annotated[
        Optional[Any],
        Field(
            description="Default is an optional arbitrary JSON object that the variable may take if the JMESPath\nexpression evaluates to nil"
        ),
    ] = None
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description="JMESPath is an optional JMESPath Expression that can be used to\ntransform the variable.",
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(description="Value is any arbitrary JSON object representable in YAML or JSON form."),
    ] = None


class Context(BaseModel):
    api_call: Annotated[
        Optional[ApiCall],
        Field(
            alias="apiCall",
            description="APICall is an HTTP request to the Kubernetes API server, or other JSON web service.\nThe data returned is stored in the context with the name for the context entry.",
        ),
    ] = None
    config_map: Annotated[
        Optional[ConfigMap],
        Field(alias="configMap", description="ConfigMap is the ConfigMap reference."),
    ] = None
    global_reference: Annotated[
        Optional[GlobalReference],
        Field(
            alias="globalReference",
            description="GlobalContextEntryReference is a reference to a cached global context entry.",
        ),
    ] = None
    image_registry: Annotated[
        Optional[ImageRegistry],
        Field(
            alias="imageRegistry",
            description="ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image\ndetails.",
        ),
    ] = None
    name: Annotated[Optional[str], Field(description="Name is the variable name.")] = None
    variable: Annotated[
        Optional[Variable],
        Field(
            description="Variable defines an arbitrary JMESPath context variable that can be defined inline."
        ),
    ] = None


class MatchExpression(BaseModel):
    key: Annotated[str, Field(description="key is the label key that the selector applies to.")]
    operator: Annotated[
        str,
        Field(
            description="operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
        ),
    ]
    values: Annotated[
        Optional[List[str]],
        Field(
            description="values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch."
        ),
    ] = None


class NamespaceSelector(BaseModel):
    match_expressions: Annotated[
        Optional[List[MatchExpression]],
        Field(
            alias="matchExpressions",
            description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
        ),
    ] = None
    match_labels: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="matchLabels",
            description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
        ),
    ] = None


class Selector(BaseModel):
    match_expressions: Annotated[
        Optional[List[MatchExpression]],
        Field(
            alias="matchExpressions",
            description="matchExpressions is a list of label selector requirements. The requirements are ANDed.",
        ),
    ] = None
    match_labels: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="matchLabels",
            description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.',
        ),
    ] = None


class Resources(BaseModel):
    annotations: Annotated[
        Optional[Dict[str, str]],
        Field(
            description='Annotations is a  map of annotations (key-value pairs of type string). Annotation keys\nand values support the wildcard characters "*" (matches zero or many characters) and\n"?" (matches at least one character).'
        ),
    ] = None
    kinds: Annotated[
        Optional[List[str]], Field(description="Kinds is a list of resource kinds.")
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description='Name is the name of the resource. The name supports wildcard characters\n"*" (matches zero or many characters) and "?" (at least one character).\nNOTE: "Name" is being deprecated in favor of "Names".'
        ),
    ] = None
    names: Annotated[
        Optional[List[str]],
        Field(
            description='Names are the names of the resources. Each name supports wildcard characters\n"*" (matches zero or many characters) and "?" (at least one character).'
        ),
    ] = None
    namespace_selector: Annotated[
        Optional[NamespaceSelector],
        Field(
            alias="namespaceSelector",
            description='NamespaceSelector is a label selector for the resource namespace. Label keys and values\nin `matchLabels` support the wildcard characters `*` (matches zero or many characters)\nand `?` (matches one character).Wildcards allows writing label selectors like\n["storage.k8s.io/*": "*"]. Note that using ["*" : "*"] matches any key and value but\ndoes not match an empty label set.',
        ),
    ] = None
    namespaces: Annotated[
        Optional[List[str]],
        Field(
            description='Namespaces is a list of namespaces names. Each name supports wildcard characters\n"*" (matches zero or many characters) and "?" (at least one character).'
        ),
    ] = None
    operations: Annotated[
        Optional[List[Literal["CREATE", "CONNECT", "UPDATE", "DELETE"]]],
        Field(
            description='Operations can contain values ["CREATE, "UPDATE", "CONNECT", "DELETE"], which are used to match a specific action.'
        ),
    ] = None
    selector: Annotated[
        Optional[Selector],
        Field(
            description='Selector is a label selector. Label keys and values in `matchLabels` support the wildcard\ncharacters `*` (matches zero or many characters) and `?` (matches one character).\nWildcards allows writing label selectors like ["storage.k8s.io/*": "*"]. Note that\nusing ["*" : "*"] matches any key and value but does not match an empty label set.'
        ),
    ] = None


class Subject(BaseModel):
    api_group: Annotated[
        Optional[str],
        Field(
            alias="apiGroup",
            description='APIGroup holds the API group of the referenced subject.\nDefaults to "" for ServiceAccount subjects.\nDefaults to "rbac.authorization.k8s.io" for User and Group subjects.',
        ),
    ] = None
    kind: Annotated[
        str,
        Field(
            description='Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".\nIf the Authorizer does not recognized the kind value, the Authorizer should report an error.'
        ),
    ]
    name: Annotated[str, Field(description="Name of the object being referenced.")]
    namespace: Annotated[
        Optional[str],
        Field(
            description='Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty\nthe Authorizer should report an error.'
        ),
    ] = None


class AllModel(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AnyModel1(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class Exclude(BaseModel):
    all: Annotated[
        Optional[List[AllModel]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel1]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None


class Match(BaseModel):
    all: Annotated[
        Optional[List[AllModel]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel1]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None


class CleanupPolicySpec(BaseModel):
    conditions: Annotated[
        Optional[Conditions],
        Field(
            description="Conditions defines the conditions used to select the resources which will be cleaned up."
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    exclude: Annotated[
        Optional[Exclude],
        Field(
            description="ExcludeResources defines when cleanuppolicy should not be applied. The exclude\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the name or role."
        ),
    ] = None
    match: Annotated[
        Optional[Match],
        Field(
            description="MatchResources defines when cleanuppolicy should be applied. The match\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the user name or role.\nAt least one kind is required."
        ),
    ] = None
    schedule: Annotated[str, Field(description="The schedule in Cron format")]


class Condition(BaseModel):
    last_transition_time: Annotated[
        datetime,
        Field(
            alias="lastTransitionTime",
            description="lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
        ),
    ]
    message: Annotated[
        str,
        Field(
            description="message is a human readable message indicating details about the transition.\nThis may be an empty string.",
            max_length=32768,
        ),
    ]
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
            ge=0,
        ),
    ] = None
    reason: Annotated[
        str,
        Field(
            description="reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    status: Annotated[
        Literal["True", "False", "Unknown"],
        Field(description="status of the condition, one of True, False, Unknown."),
    ]
    type: Annotated[
        str,
        Field(
            description="type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]


class CleanupPolicyStatus(BaseModel):
    conditions: Optional[List[Condition]] = None
    last_execution_time: Annotated[Optional[datetime], Field(alias="lastExecutionTime")] = None


class AllModel1(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel2(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AllModel2(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AnyModel3(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class ClusterCleanupPolicySpec(BaseModel):
    conditions: Annotated[
        Optional[Conditions],
        Field(
            description="Conditions defines the conditions used to select the resources which will be cleaned up."
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    exclude: Annotated[
        Optional[Exclude],
        Field(
            description="ExcludeResources defines when cleanuppolicy should not be applied. The exclude\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the name or role."
        ),
    ] = None
    match: Annotated[
        Optional[Match],
        Field(
            description="MatchResources defines when cleanuppolicy should be applied. The match\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the user name or role.\nAt least one kind is required."
        ),
    ] = None
    schedule: Annotated[str, Field(description="The schedule in Cron format")]


class ClusterCleanupPolicyStatus(BaseModel):
    conditions: Optional[List[Condition]] = None
    last_execution_time: Annotated[Optional[datetime], Field(alias="lastExecutionTime")] = None


class CelPrecondition(BaseModel):
    expression: Annotated[
        str,
        Field(
            description="Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.\nCEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n\n'object' - The object from the incoming request. The value is null for DELETE requests.\n'oldObject' - The existing object. The value is null for CREATE requests.\n'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).\n'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\n\nRequired."
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="Name is an identifier for this match condition, used for strategic merging of MatchConditions,\nas well as providing an identifier for logging purposes. A good name should be descriptive of\nthe associated expression.\nName must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and\nmust start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or\n'123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an\noptional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\n\nRequired."
        ),
    ]


class Clone(BaseModel):
    name: Annotated[Optional[str], Field(description="Name specifies name of the resource.")] = None
    namespace: Annotated[
        Optional[str],
        Field(description="Namespace specifies source resource namespace."),
    ] = None


class CloneList(BaseModel):
    kinds: Annotated[
        Optional[List[str]], Field(description="Kinds is a list of resource kinds.")
    ] = None
    namespace: Annotated[
        Optional[str],
        Field(description="Namespace specifies source resource namespace."),
    ] = None
    selector: Annotated[
        Optional[Selector],
        Field(
            description="Selector is a label selector. Label keys and values in `matchLabels`.\nwildcard characters are not supported."
        ),
    ] = None


class Generate(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="APIVersion specifies resource apiVersion."),
    ] = None
    clone: Annotated[
        Optional[Clone],
        Field(
            description="Clone specifies the source resource used to populate each generated resource.\nAt most one of Data or Clone can be specified. If neither are provided, the generated\nresource will be created with default data only."
        ),
    ] = None
    clone_list: Annotated[
        Optional[CloneList],
        Field(
            alias="cloneList",
            description="CloneList specifies the list of source resource used to populate each generated resource.",
        ),
    ] = None
    data: Annotated[
        Optional[Any],
        Field(
            description="Data provides the resource declaration used to populate each generated resource.\nAt most one of Data or Clone must be specified. If neither are provided, the generated\nresource will be created with default data only."
        ),
    ] = None
    kind: Annotated[Optional[str], Field(description="Kind specifies resource kind.")] = None
    name: Annotated[Optional[str], Field(description="Name specifies the resource name.")] = None
    namespace: Annotated[
        Optional[str], Field(description="Namespace specifies resource namespace.")
    ] = None
    orphan_downstream_on_policy_delete: Annotated[
        Optional[bool],
        Field(
            alias="orphanDownstreamOnPolicyDelete",
            description='OrphanDownstreamOnPolicyDelete controls whether generated resources should be deleted when the rule that generated\nthem is deleted with synchronization enabled. This option is only applicable to generate rules of the data type.\nSee https://kyverno.io/docs/writing-policies/generate/#data-examples.\nDefaults to "false" if not specified.',
        ),
    ] = None
    synchronize: Annotated[
        Optional[bool],
        Field(
            description='Synchronize controls if generated resources should be kept in-sync with their source resource.\nIf Synchronize is set to "true" changes to generated resources will be overwritten with resource\ndata from Data or the resource specified in the Clone declaration.\nOptional. Defaults to "false" if not specified.'
        ),
    ] = None
    uid: Annotated[Optional[str], Field(description="UID specifies the resource uid.")] = None


class ImageExtractor(BaseModel):
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description="JMESPath is an optional JMESPath expression to apply to the image value.\nThis is useful when the extracted image begins with a prefix like 'docker://'.\nThe 'trim_prefix' function may be used to trim the prefix: trim_prefix(@, 'docker://').\nNote - Image digest mutation may not be used when applying a JMESPAth to an image.",
        ),
    ] = None
    key: Annotated[
        Optional[str],
        Field(
            description="Key is an optional name of the field within 'path' that will be used to uniquely identify an image.\nNote - this field MUST be unique."
        ),
    ] = None
    name: Annotated[
        Optional[str],
        Field(
            description="Name is the entry the image will be available under 'images.<name>' in the context.\nIf this field is not defined, image entries will appear under 'images.custom'."
        ),
    ] = None
    path: Annotated[
        str,
        Field(
            description="Path is the path to the object containing the image field in a custom resource.\nIt should be slash-separated. Each slash-separated key must be a valid YAML key or a wildcard '*'.\nWildcard keys are expanded in case of arrays or objects."
        ),
    ]
    value: Annotated[
        Optional[str],
        Field(
            description="Value is an optional name of the field within 'path' that points to the image URI.\nThis is useful when a custom 'key' is also defined."
        ),
    ] = None


class AllModel3(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel4(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class Preconditions(BaseModel):
    all: Annotated[
        Optional[List[AllModel3]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass"
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel4]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass"
        ),
    ] = None


class Foreach(BaseModel):
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    order: Annotated[
        Optional[Literal["Ascending", "Descending"]],
        Field(
            description="Order defines the iteration order on the list.\nCan be Ascending to iterate from first to last element or Descending to iterate in from last to first element."
        ),
    ] = None
    patch_strategic_merge: Annotated[
        Optional[Any],
        Field(
            alias="patchStrategicMerge",
            description="PatchStrategicMerge is a strategic merge patch used to modify resources.\nSee https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/\nand https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.",
        ),
    ] = None
    patches_json6902: Annotated[
        Optional[str],
        Field(
            alias="patchesJson6902",
            description="PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.\nSee https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.",
        ),
    ] = None
    preconditions: Annotated[
        Optional[Preconditions],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class Target(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="APIVersion specifies resource apiVersion."),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    kind: Annotated[Optional[str], Field(description="Kind specifies resource kind.")] = None
    name: Annotated[Optional[str], Field(description="Name specifies the resource name.")] = None
    namespace: Annotated[
        Optional[str], Field(description="Namespace specifies resource namespace.")
    ] = None
    preconditions: Annotated[
        Optional[Any],
        Field(
            description="Preconditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements. A direct list\nof conditions (without `any` or `all` statements is supported for backwards compatibility but\nwill be deprecated in the next major release.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None
    uid: Annotated[Optional[str], Field(description="UID specifies the resource uid.")] = None


class Mutate(BaseModel):
    foreach: Annotated[
        Optional[List[Foreach]],
        Field(
            description="ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic."
        ),
    ] = None
    patch_strategic_merge: Annotated[
        Optional[Any],
        Field(
            alias="patchStrategicMerge",
            description="PatchStrategicMerge is a strategic merge patch used to modify resources.\nSee https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/\nand https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.",
        ),
    ] = None
    patches_json6902: Annotated[
        Optional[str],
        Field(
            alias="patchesJson6902",
            description="PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.\nSee https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.",
        ),
    ] = None
    targets: Annotated[
        Optional[List[Target]],
        Field(description="Targets defines the target resources to be mutated."),
    ] = None


class AllModel4(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel5(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class PreconditionsModel(BaseModel):
    all: Annotated[
        Optional[List[AllModel4]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass."
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel5]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass."
        ),
    ] = None


class AuditAnnotation(BaseModel):
    key: Annotated[
        str,
        Field(
            description='key specifies the audit annotation key. The audit annotation keys of\na ValidatingAdmissionPolicy must be unique. The key must be a qualified\nname ([A-Za-z0-9][-A-Za-z0-9_.]*) no more than 63 bytes in length.\n\n\nThe key is combined with the resource name of the\nValidatingAdmissionPolicy to construct an audit annotation key:\n"{ValidatingAdmissionPolicy name}/{key}".\n\n\nIf an admission webhook uses the same resource name as this ValidatingAdmissionPolicy\nand the same audit annotation key, the annotation key will be identical.\nIn this case, the first annotation written with the key will be included\nin the audit event and all subsequent annotations with the same key\nwill be discarded.\n\n\nRequired.'
        ),
    ]
    value_expression: Annotated[
        str,
        Field(
            alias="valueExpression",
            description="valueExpression represents the expression which is evaluated by CEL to\nproduce an audit annotation value. The expression must evaluate to either\na string or null value. If the expression evaluates to a string, the\naudit annotation is included with the string value. If the expression\nevaluates to null or empty string the audit annotation will be omitted.\nThe valueExpression may be no longer than 5kb in length.\nIf the result of the valueExpression is more than 10kb in length, it\nwill be truncated to 10kb.\n\n\nIf multiple ValidatingAdmissionPolicyBinding resources match an\nAPI request, then the valueExpression will be evaluated for\neach binding. All unique values produced by the valueExpressions\nwill be joined together in a comma-separated list.\n\n\nRequired.",
        ),
    ]


class Expression(BaseModel):
    expression: Annotated[
        str,
        Field(
            description='Expression represents the expression which will be evaluated by CEL.\nref: https://github.com/google/cel-spec\nCEL expressions have access to the contents of the API request/response, organized into CEL variables as well as some other useful variables:\n\n\n- \'object\' - The object from the incoming request. The value is null for DELETE requests.\n- \'oldObject\' - The existing object. The value is null for CREATE requests.\n- \'request\' - Attributes of the API request([ref](/pkg/apis/admission/types.go#AdmissionRequest)).\n- \'params\' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a ParamKind.\n- \'namespaceObject\' - The namespace object that the incoming object belongs to. The value is null for cluster-scoped resources.\n- \'variables\' - Map of composited variables, from its name to its lazily evaluated value.\n  For example, a variable named \'foo\' can be accessed as \'variables.foo\'.\n- \'authorizer\' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n- \'authorizer.requestResource\' - A CEL ResourceCheck constructed from the \'authorizer\' and configured with the\n  request resource.\n\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the\nobject. No other metadata properties are accessible.\n\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.\nAccessible property names are escaped according to the following rules when accessed in the expression:\n- \'__\' escapes to \'__underscores__\'\n- \'.\' escapes to \'__dot__\'\n- \'-\' escapes to \'__dash__\'\n- \'/\' escapes to \'__slash__\'\n- Property names that exactly match a CEL RESERVED keyword escape to \'__{keyword}__\'. The keywords are:\n\t  "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for", "function", "if",\n\t  "import", "let", "loop", "package", "namespace", "return".\nExamples:\n  - Expression accessing a property named "namespace": {"Expression": "object.__namespace__ > 0"}\n  - Expression accessing a property named "x-prop": {"Expression": "object.x__dash__prop > 0"}\n  - Expression accessing a property named "redact__d": {"Expression": "object.redact__underscores__d > 0"}\n\n\nEquality on arrays with list type of \'set\' or \'map\' ignores element order, i.e. [1, 2] == [2, 1].\nConcatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - \'set\': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - \'map\': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\nRequired.'
        ),
    ]
    message: Annotated[
        Optional[str],
        Field(
            description='Message represents the message displayed when validation fails. The message is required if the Expression contains\nline breaks. The message must not contain line breaks.\nIf unset, the message is "failed rule: {Rule}".\ne.g. "must be a URL with the host matching spec.host"\nIf the Expression contains line breaks. Message is required.\nThe message must not contain line breaks.\nIf unset, the message is "failed Expression: {Expression}".'
        ),
    ] = None
    message_expression: Annotated[
        Optional[str],
        Field(
            alias="messageExpression",
            description="messageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails.\nSince messageExpression is used as a failure message, it must evaluate to a string.\nIf both message and messageExpression are present on a validation, then messageExpression will be used if validation fails.\nIf messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced\nas if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string\nthat contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and\nthe fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged.\nmessageExpression has access to all the same variables as the `expression` except for 'authorizer' and 'authorizer.requestResource'.\nExample:\n\"object.x must be less than max (\"+string(params.max)+\")\"",
        ),
    ] = None
    reason: Annotated[
        Optional[str],
        Field(
            description='Reason represents a machine-readable description of why this validation failed.\nIf this is the first validation in the list to fail, this reason, as well as the\ncorresponding HTTP response code, are used in the\nHTTP response to the client.\nThe currently supported reasons are: "Unauthorized", "Forbidden", "Invalid", "RequestEntityTooLarge".\nIf not set, StatusReasonInvalid is used in the response to the client.'
        ),
    ] = None


class ParamKind(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(
            alias="apiVersion",
            description='APIVersion is the API group version the resources belong to.\nIn format of "group/version".\nRequired.',
        ),
    ] = None
    kind: Annotated[
        Optional[str],
        Field(description="Kind is the API kind the resources belong to.\nRequired."),
    ] = None


class ParamRef(BaseModel):
    name: Annotated[
        Optional[str],
        Field(
            description="`name` is the name of the resource being referenced.\n\n\n`name` and `selector` are mutually exclusive properties. If one is set,\nthe other must be unset."
        ),
    ] = None
    namespace: Annotated[
        Optional[str],
        Field(
            description="namespace is the namespace of the referenced resource. Allows limiting\nthe search for params to a specific namespace. Applies to both `name` and\n`selector` fields.\n\n\nA per-namespace parameter may be used by specifying a namespace-scoped\n`paramKind` in the policy and leaving this field empty.\n\n\n- If `paramKind` is cluster-scoped, this field MUST be unset. Setting this\nfield results in a configuration error.\n\n\n- If `paramKind` is namespace-scoped, the namespace of the object being\nevaluated for admission will be used when this field is left unset. Take\ncare that if this is left empty the binding must not match any cluster-scoped\nresources, which will result in an error."
        ),
    ] = None
    parameter_not_found_action: Annotated[
        Optional[str],
        Field(
            alias="parameterNotFoundAction",
            description="`parameterNotFoundAction` controls the behavior of the binding when the resource\nexists, and name or selector is valid, but there are no parameters\nmatched by the binding. If the value is set to `Allow`, then no\nmatched parameters will be treated as successful validation by the binding.\nIf set to `Deny`, then no matched parameters will be subject to the\n`failurePolicy` of the policy.\n\n\nAllowed values are `Allow` or `Deny`\nDefault to `Deny`",
        ),
    ] = None
    selector: Annotated[
        Optional[Selector],
        Field(
            description="selector can be used to match multiple param objects based on their labels.\nSupply selector: {} to match all resources of the ParamKind.\n\n\nIf multiple params are found, they are all evaluated with the policy expressions\nand the results are ANDed together.\n\n\nOne of `name` or `selector` must be set, but `name` and `selector` are\nmutually exclusive properties. If one is set, the other must be unset."
        ),
    ] = None


class VariableModel(BaseModel):
    expression: Annotated[
        str,
        Field(
            description="Expression is the expression that will be evaluated as the value of the variable.\nThe CEL expression has access to the same identifiers as the CEL expressions in Validation."
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.\nThe variable can be accessed in other expressions through `variables`\nFor example, if name is "foo", the variable will be available as `variables.foo`'
        ),
    ]


class Cel(BaseModel):
    audit_annotations: Annotated[
        Optional[List[AuditAnnotation]],
        Field(
            alias="auditAnnotations",
            description="AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.",
        ),
    ] = None
    expressions: Annotated[
        Optional[List[Expression]],
        Field(description="Expressions is a list of CELExpression types."),
    ] = None
    param_kind: Annotated[
        Optional[ParamKind],
        Field(
            alias="paramKind",
            description="ParamKind is a tuple of Group Kind and Version.",
        ),
    ] = None
    param_ref: Annotated[
        Optional[ParamRef],
        Field(alias="paramRef", description="ParamRef references a parameter resource."),
    ] = None
    variables: Annotated[
        Optional[List[VariableModel]],
        Field(
            description="Variables contain definitions of variables that can be used in composition of other expressions.\nEach variable is defined as a named CEL expression.\nThe variables defined here will be available under `variables` in other expressions of the policy."
        ),
    ] = None


class Deny(BaseModel):
    conditions: Annotated[
        Optional[Conditions],
        Field(
            description="Multiple conditions can be declared under an `any` or `all` statement.\nSee: https://kyverno.io/docs/writing-policies/validate/#deny-rules"
        ),
    ] = None


class VariableModel1(BaseModel):
    default: Annotated[
        Optional[Any],
        Field(
            description="Default is an optional arbitrary JSON object that the variable may take if the JMESPath\nexpression evaluates to nil"
        ),
    ] = None
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description="JMESPath is an optional JMESPath Expression that can be used to\ntransform the variable.",
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(description="Value is any arbitrary JSON object representable in YAML or JSON form."),
    ] = None


class DenyModel(BaseModel):
    conditions: Annotated[
        Optional[Any],
        Field(
            description="Multiple conditions can be declared under an `any` or `all` statement. A direct list\nof conditions (without `any` or `all` statements) is also supported for backwards compatibility\nbut will be deprecated in the next major release.\nSee: https://kyverno.io/docs/writing-policies/validate/#deny-rules"
        ),
    ] = None


class AllModel5(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel6(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class PreconditionsModel1(BaseModel):
    all: Annotated[
        Optional[List[AllModel5]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass"
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel6]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass"
        ),
    ] = None


class ForeachModel(BaseModel):
    any_pattern: Annotated[
        Optional[Any],
        Field(
            alias="anyPattern",
            description="AnyPattern specifies list of validation patterns. At least one of the patterns\nmust be satisfied for the validation rule to succeed.",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    deny: Annotated[
        Optional[DenyModel],
        Field(description="Deny defines conditions used to pass or fail a validation rule."),
    ] = None
    element_scope: Annotated[
        Optional[bool],
        Field(
            alias="elementScope",
            description='ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.\nWhen set to "false", "request.object" is used as the validation scope within the foreach\nblock to allow referencing other elements in the subtree.',
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    pattern: Annotated[
        Optional[Any],
        Field(description="Pattern specifies an overlay-style pattern used to check resources."),
    ] = None
    preconditions: Annotated[
        Optional[PreconditionsModel1],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class Ctlog(BaseModel):
    ignore_sct: Annotated[
        Optional[bool],
        Field(
            alias="ignoreSCT",
            description="IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate\ntimestamp. Default is false. Set to true if this was opted out during signing.",
        ),
    ] = None
    pubkey: Annotated[
        Optional[str],
        Field(description="PubKey, if set, is used to validate SCTs against a custom source."),
    ] = None


class Rekor(BaseModel):
    ignore_tlog: Annotated[
        Optional[bool],
        Field(
            alias="ignoreTlog",
            description="IgnoreTlog skips transparency log verification.",
        ),
    ] = None
    pubkey: Annotated[
        Optional[str],
        Field(
            description="RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.\nIf set, this will be used to validate transparency log signatures from a custom Rekor."
        ),
    ] = None
    url: Annotated[
        Optional[str],
        Field(
            description="URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev."
        ),
    ] = None


class Certificates(BaseModel):
    cert: Annotated[
        Optional[str],
        Field(description="Cert is an optional PEM-encoded public certificate."),
    ] = None
    cert_chain: Annotated[
        Optional[str],
        Field(
            alias="certChain",
            description="CertChain is an optional PEM encoded set of certificates used to verify.",
        ),
    ] = None
    ctlog: Annotated[
        Optional[Ctlog],
        Field(
            description="CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate\nTimestamps (SCTs). If the value is unset, the default behavior by Cosign is used."
        ),
    ] = None
    rekor: Annotated[
        Optional[Rekor],
        Field(
            description="Rekor provides configuration for the Rekor transparency log service. If an empty object\nis provided the public instance of Rekor (https://rekor.sigstore.dev) is used."
        ),
    ] = None


class Keyless(BaseModel):
    additional_extensions: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="additionalExtensions",
            description="AdditionalExtensions are certificate-extensions used for keyless signing.",
        ),
    ] = None
    ctlog: Annotated[
        Optional[Ctlog],
        Field(
            description="CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate\nTimestamps (SCTs). If the value is unset, the default behavior by Cosign is used."
        ),
    ] = None
    issuer: Annotated[
        Optional[str],
        Field(description="Issuer is the certificate issuer used for keyless signing."),
    ] = None
    rekor: Annotated[
        Optional[Rekor],
        Field(
            description="Rekor provides configuration for the Rekor transparency log service. If an empty object\nis provided the public instance of Rekor (https://rekor.sigstore.dev) is used."
        ),
    ] = None
    roots: Annotated[
        Optional[str],
        Field(
            description="Roots is an optional set of PEM encoded trusted root certificates.\nIf not provided, the system roots are used."
        ),
    ] = None
    subject: Annotated[
        Optional[str],
        Field(
            description="Subject is the verified identity used for keyless signing, for example the email address."
        ),
    ] = None


class Secret(BaseModel):
    name: Annotated[
        str,
        Field(
            description="Name of the secret. The provided secret must contain a key named cosign.pub."
        ),
    ]
    namespace: Annotated[str, Field(description="Namespace name where the Secret exists.")]


class Keys(BaseModel):
    ctlog: Annotated[
        Optional[Ctlog],
        Field(
            description="CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate\nTimestamps (SCTs). If the value is unset, the default behavior by Cosign is used."
        ),
    ] = None
    kms: Annotated[
        Optional[str],
        Field(
            description="KMS provides the URI to the public key stored in a Key Management System. See:\nhttps://github.com/sigstore/cosign/blob/main/KMS.md"
        ),
    ] = None
    public_keys: Annotated[
        Optional[str],
        Field(
            alias="publicKeys",
            description='Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly\nspecified or can be a variable reference to a key specified in a ConfigMap (see\nhttps://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret\nelsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".\nThe named Secret must specify a key `cosign.pub` containing the public key used for\nverification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).\nWhen multiple keys are specified each key is processed as a separate staticKey entry\n(.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.',
        ),
    ] = None
    rekor: Annotated[
        Optional[Rekor],
        Field(
            description="Rekor provides configuration for the Rekor transparency log service. If an empty object\nis provided the public instance of Rekor (https://rekor.sigstore.dev) is used."
        ),
    ] = None
    secret: Annotated[
        Optional[Secret],
        Field(description="Reference to a Secret resource that contains a public key"),
    ] = None
    signature_algorithm: Annotated[
        Optional[str],
        Field(
            alias="signatureAlgorithm",
            description="Specify signature algorithm for public keys. Supported values are sha224, sha256, sha384 and sha512.",
        ),
    ] = "sha256"


class Entry(BaseModel):
    annotations: Annotated[
        Optional[Dict[str, str]],
        Field(
            description="Annotations are used for image verification.\nEvery specified key-value pair must exist and match in the verified payload.\nThe payload may contain other key-value pairs."
        ),
    ] = None
    attestor: Annotated[
        Optional[Any],
        Field(
            description="Attestor is a nested set of Attestor used to specify a more complex set of match authorities."
        ),
    ] = None
    certificates: Annotated[
        Optional[Certificates],
        Field(description="Certificates specifies one or more certificates."),
    ] = None
    keyless: Annotated[
        Optional[Keyless],
        Field(
            description="Keyless is a set of attribute used to verify a Sigstore keyless attestor.\nSee https://github.com/sigstore/cosign/blob/main/KEYLESS.md."
        ),
    ] = None
    keys: Annotated[
        Optional[Keys], Field(description="Keys specifies one or more public keys.")
    ] = None
    repository: Annotated[
        Optional[str],
        Field(
            description="Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.\nIf specified Repository will override other OCI image repository locations for this Attestor."
        ),
    ] = None


class Attestor(BaseModel):
    count: Annotated[
        Optional[int],
        Field(
            description="Count specifies the required number of entries that must match. If the count is null, all entries must match\n(a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a\nvalue N, then N must be less than or equal to the size of entries, and at least N entries must match.",
            ge=1,
        ),
    ] = None
    entries: Annotated[
        Optional[List[Entry]],
        Field(
            description="Entries contains the available attestors. An attestor can be a static key,\nattributes for keyless verification, or a nested attestor declaration."
        ),
    ] = None


class DryRun(BaseModel):
    enable: Optional[bool] = None
    namespace: Optional[str] = None


class Object(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    version: Optional[str] = None


class IgnoreField(BaseModel):
    fields: Optional[List[str]] = None
    objects: Optional[List[Object]] = None


class Manifests(BaseModel):
    annotation_domain: Annotated[
        Optional[str],
        Field(
            alias="annotationDomain",
            description='AnnotationDomain is custom domain of annotation for message and signature. Default is "cosign.sigstore.dev".',
        ),
    ] = None
    attestors: Annotated[
        Optional[List[Attestor]],
        Field(description="Attestors specified the required attestors (i.e. authorities)"),
    ] = None
    dry_run: Annotated[
        Optional[DryRun], Field(alias="dryRun", description="DryRun configuration")
    ] = None
    ignore_fields: Annotated[
        Optional[List[IgnoreField]],
        Field(
            alias="ignoreFields",
            description="Fields which will be ignored while comparing manifests.",
        ),
    ] = None
    repository: Annotated[
        Optional[str],
        Field(
            description="Repository is an optional alternate OCI repository to use for resource bundle reference.\nThe repository can be overridden per Attestor or Attestation."
        ),
    ] = None


class ExcludeModel(BaseModel):
    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(
            alias="controlName",
            description="ControlName specifies the name of the Pod Security Standard control.\nSee: https://kubernetes.io/docs/concepts/security/pod-security-standards/",
        ),
    ]
    images: Annotated[
        Optional[List[str]],
        Field(
            description="Images selects matching containers and applies the container level PSS.\nEach image is the image name consisting of the registry address, repository, image, and tag.\nEmpty list matches no containers, PSS checks are applied at the pod level only.\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images."
        ),
    ] = None
    restricted_field: Annotated[
        Optional[str],
        Field(
            alias="restrictedField",
            description="RestrictedField selects the field for the given Pod Security Standard control.\nWhen not set, all restricted fields for the control are selected.",
        ),
    ] = None
    values: Annotated[
        Optional[List[str]],
        Field(description="Values defines the allowed values that can be excluded."),
    ] = None


class PodSecurity(BaseModel):
    exclude: Annotated[
        Optional[List[ExcludeModel]],
        Field(description="Exclude specifies the Pod Security Standard controls to be excluded."),
    ] = None
    level: Annotated[
        Optional[Literal["privileged", "baseline", "restricted"]],
        Field(
            description="Level defines the Pod Security Standard level to be applied to workloads.\nAllowed values are privileged, baseline, and restricted."
        ),
    ] = None
    version: Annotated[
        Optional[
            Literal[
                "v1.19",
                "v1.20",
                "v1.21",
                "v1.22",
                "v1.23",
                "v1.24",
                "v1.25",
                "v1.26",
                "v1.27",
                "v1.28",
                "v1.29",
                "latest",
            ]
        ],
        Field(
            description="Version defines the Pod Security Standard versions that Kubernetes supports.\nAllowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, v1.27, v1.28, v1.29, latest. Defaults to latest."
        ),
    ] = None


class Validate(BaseModel):
    any_pattern: Annotated[
        Optional[Any],
        Field(
            alias="anyPattern",
            description="AnyPattern specifies list of validation patterns. At least one of the patterns\nmust be satisfied for the validation rule to succeed.",
        ),
    ] = None
    cel: Annotated[
        Optional[Cel],
        Field(
            description="CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/)."
        ),
    ] = None
    deny: Annotated[
        Optional[Deny],
        Field(description="Deny defines conditions used to pass or fail a validation rule."),
    ] = None
    foreach: Annotated[
        Optional[List[ForeachModel]],
        Field(
            description="ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic."
        ),
    ] = None
    manifests: Annotated[
        Optional[Manifests],
        Field(description="Manifest specifies conditions for manifest verification"),
    ] = None
    message: Annotated[
        Optional[str],
        Field(description="Message specifies a custom message to be displayed on failure."),
    ] = None
    pattern: Annotated[
        Optional[Any],
        Field(description="Pattern specifies an overlay-style pattern used to check resources."),
    ] = None
    pod_security: Annotated[
        Optional[PodSecurity],
        Field(
            alias="podSecurity",
            description="PodSecurity applies exemptions for Kubernetes Pod Security admission\nby specifying exclusions for Pod Security Standards controls.",
        ),
    ] = None


class ConditionModel(BaseModel):
    all: Annotated[
        Optional[List[AllModel5]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass"
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel6]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass"
        ),
    ] = None


class Attestation(BaseModel):
    attestors: Annotated[
        Optional[List[Attestor]],
        Field(description="Attestors specify the required attestors (i.e. authorities)."),
    ] = None
    conditions: Annotated[
        Optional[List[ConditionModel]],
        Field(
            description="Conditions are used to verify attributes within a Predicate. If no Conditions are specified\nthe attestation check is satisfied as long there are predicates that match the predicate type."
        ),
    ] = None
    predicate_type: Annotated[
        Optional[str],
        Field(
            alias="predicateType",
            description="Deprecated in favour of 'Type', to be removed soon",
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Type defines the type of attestation contained within the Statement."),
    ] = None


class VerifyImage(BaseModel):
    attestations: Annotated[
        Optional[List[Attestation]],
        Field(
            description="Attestations are optional checks for signed in-toto Statements used to verify the image.\nSee https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the\nOCI registry and decodes them into a list of Statement declarations."
        ),
    ] = None
    attestors: Annotated[
        Optional[List[Attestor]],
        Field(description="Attestors specified the required attestors (i.e. authorities)"),
    ] = None
    image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="imageReferences",
            description="ImageReferences is a list of matching image reference patterns. At least one pattern in the\nlist must match the image for the rule to apply. Each image reference consists of a registry\naddress (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials],
        Field(
            alias="imageRegistryCredentials",
            description="ImageRegistryCredentials provides credentials that will be used for authentication with registry",
        ),
    ] = None
    mutate_digest: Annotated[
        Optional[bool],
        Field(
            alias="mutateDigest",
            description="MutateDigest enables replacement of image tags with digests.\nDefaults to true.",
        ),
    ] = True
    repository: Annotated[
        Optional[str],
        Field(
            description="Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.\nIf specified Repository will override the default OCI image repository configured for the installation.\nThe repository can also be overridden per Attestor or Attestation."
        ),
    ] = None
    required: Annotated[
        Optional[bool],
        Field(
            description="Required validates that images are verified i.e. have matched passed a signature or attestation check."
        ),
    ] = True
    skip_image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="skipImageReferences",
            description="SkipImageReferences is a list of matching image reference patterns that should be skipped.\nAt least one pattern in the list must match the image for the rule to be skipped. Each image reference\nconsists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    type: Annotated[
        Optional[Literal["Cosign", "Notary"]],
        Field(
            description="Type specifies the method of signature validation. The allowed options\nare Cosign and Notary. By default Cosign is used if a type is not specified."
        ),
    ] = None
    use_cache: Annotated[
        Optional[bool],
        Field(
            alias="useCache",
            description="UseCache enables caching of image verify responses for this rule",
        ),
    ] = True
    verify_digest: Annotated[
        Optional[bool],
        Field(
            alias="verifyDigest",
            description="VerifyDigest validates that images have a digest.",
        ),
    ] = True


class Rule(BaseModel):
    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]],
        Field(
            alias="celPreconditions",
            description="CELPreconditions are used to determine if a policy rule should be applied by evaluating a\nset of CEL conditions. It can only be used with the validate.cel subrule",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    exclude: Annotated[
        Optional[Exclude],
        Field(
            description="ExcludeResources defines when this policy rule should not be applied. The exclude\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the name or role."
        ),
    ] = None
    generate: Annotated[
        Optional[Generate],
        Field(description="Generation is used to create new resources."),
    ] = None
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]],
        Field(
            alias="imageExtractors",
            description="ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.\nThis config is only valid for verifyImages rules.",
        ),
    ] = None
    match: Annotated[
        Optional[Match],
        Field(
            description="MatchResources defines when this policy rule should be applied. The match\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the user name or role.\nAt least one kind is required."
        ),
    ] = None
    mutate: Annotated[
        Optional[Mutate],
        Field(description="Mutation is used to modify matching resources."),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name is a label to identify the rule, It must be unique within the policy.",
            max_length=63,
        ),
    ]
    preconditions: Annotated[
        Optional[PreconditionsModel],
        Field(
            description="Preconditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None
    skip_background_requests: Annotated[
        Optional[bool],
        Field(
            alias="skipBackgroundRequests",
            description='SkipBackgroundRequests bypasses admission requests that are sent by the background controller.\nThe default value is set to "true", it must be set to "false" to apply\ngenerate and mutateExisting rules to those requests.',
        ),
    ] = True
    validate_: Annotated[
        Optional[Validate],
        Field(
            alias="validate",
            description="Validation is used to validate matching resources.",
        ),
    ] = None
    verify_images: Annotated[
        Optional[List[VerifyImage]],
        Field(
            alias="verifyImages",
            description="VerifyImages is used to verify image signatures and mutate them to add a digest",
        ),
    ] = None


class ValidationFailureActionOverride(BaseModel):
    action: Annotated[
        Optional[Literal["audit", "enforce", "Audit", "Enforce"]],
        Field(description="ValidationFailureAction defines the policy validation failure action"),
    ] = None
    namespace_selector: Annotated[
        Optional[NamespaceSelector],
        Field(
            alias="namespaceSelector",
            description="A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.",
        ),
    ] = None
    namespaces: Optional[List[str]] = None


class MatchCondition(BaseModel):
    expression: Annotated[
        str,
        Field(
            description="Expression represents the expression which will be evaluated by CEL. Must evaluate to bool.\nCEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n\n'object' - The object from the incoming request. The value is null for DELETE requests.\n'oldObject' - The existing object. The value is null for CREATE requests.\n'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest).\n'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\n\nRequired."
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="Name is an identifier for this match condition, used for strategic merging of MatchConditions,\nas well as providing an identifier for logging purposes. A good name should be descriptive of\nthe associated expression.\nName must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and\nmust start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or\n'123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an\noptional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\n\nRequired."
        ),
    ]


class WebhookConfiguration(BaseModel):
    match_conditions: Annotated[
        Optional[List[MatchCondition]],
        Field(
            alias="matchConditions",
            description="MatchCondition configures admission webhook matchConditions.",
        ),
    ] = None


class ClusterPolicySpec(BaseModel):
    admission: Annotated[
        Optional[bool],
        Field(
            description='Admission controls if rules are applied during admission.\nOptional. Default value is "true".'
        ),
    ] = True
    apply_rules: Annotated[
        Optional[Literal["All", "One"]],
        Field(
            alias="applyRules",
            description="ApplyRules controls how rules in a policy are applied. Rule are processed in\nthe order of declaration. When set to `One` processing stops after a rule has\nbeen applied i.e. the rule matches and results in a pass, fail, or error. When\nset to `All` all rules in the policy are processed. The default is `All`.",
        ),
    ] = None
    background: Annotated[
        Optional[bool],
        Field(
            description='Background controls if rules are applied to existing resources during a background scan.\nOptional. Default value is "true". The value must be set to "false" if the policy rule\nuses variables that are only available in the admission review request (e.g. user name).'
        ),
    ] = True
    failure_policy: Annotated[
        Optional[Literal["Ignore", "Fail"]],
        Field(
            alias="failurePolicy",
            description="FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled.\nRules within the same policy share the same failure behavior.\nAllowed values are Ignore or Fail. Defaults to Fail.",
        ),
    ] = None
    generate_existing: Annotated[
        Optional[bool],
        Field(
            alias="generateExisting",
            description='GenerateExisting controls whether to trigger generate rule in existing resources\nIf is set to "true" generate rule will be triggered and applied to existing matched resources.\nDefaults to "false" if not specified.',
        ),
    ] = None
    generate_existing_on_policy_update: Annotated[
        Optional[bool],
        Field(
            alias="generateExistingOnPolicyUpdate",
            description="Deprecated, use generateExisting instead",
        ),
    ] = None
    mutate_existing_on_policy_update: Annotated[
        Optional[bool],
        Field(
            alias="mutateExistingOnPolicyUpdate",
            description='MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events.\nDefault value is "false".',
        ),
    ] = None
    rules: Annotated[
        Optional[List[Rule]],
        Field(
            description="Rules is a list of Rule instances. A Policy contains multiple rules and\neach rule can validate, mutate, or generate resources."
        ),
    ] = None
    schema_validation: Annotated[
        Optional[bool], Field(alias="schemaValidation", description="Deprecated.")
    ] = None
    use_server_side_apply: Annotated[
        Optional[bool],
        Field(
            alias="useServerSideApply",
            description='UseServerSideApply controls whether to use server-side apply for generate rules\nIf is set to "true" create & update for generate rules will use apply instead of create/update.\nDefaults to "false" if not specified.',
        ),
    ] = None
    validation_failure_action: Annotated[
        Optional[Literal["audit", "enforce", "Audit", "Enforce"]],
        Field(
            alias="validationFailureAction",
            description='ValidationFailureAction defines if a validation policy rule violation should block\nthe admission review request (enforce), or allow (audit) the admission review request\nand report an error in a policy report. Optional.\nAllowed values are audit or enforce. The default value is "Audit".',
        ),
    ] = "Audit"
    validation_failure_action_overrides: Annotated[
        Optional[List[ValidationFailureActionOverride]],
        Field(
            alias="validationFailureActionOverrides",
            description="ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction\nnamespace-wise. It overrides ValidationFailureAction for the specified namespaces.",
        ),
    ] = None
    webhook_configuration: Annotated[
        Optional[WebhookConfiguration],
        Field(
            alias="webhookConfiguration",
            description="WebhookConfiguration specifies the custom configuration for Kubernetes admission webhookconfiguration.\nRequires Kubernetes 1.27 or later.",
        ),
    ] = None
    webhook_timeout_seconds: Annotated[
        Optional[int],
        Field(
            alias="webhookTimeoutSeconds",
            description="WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.\nAfter the configured time expires, the admission request may fail, or may simply ignore the policy results,\nbased on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.",
        ),
    ] = None


class AllModel6(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AnyModel7(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class ExcludeModel1(BaseModel):
    all: Annotated[
        Optional[List[AllModel6]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel7]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description='ResourceDescription contains information about the resource being created or modified.\nRequires at least one tag to be specified when under MatchResources.\nSpecifying ResourceDescription directly under match is being deprecated.\nPlease specify under "any" or "all" instead.'
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class MatchModel(BaseModel):
    all: Annotated[
        Optional[List[AllModel6]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel7]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description='ResourceDescription contains information about the resource being created or modified.\nRequires at least one tag to be specified when under MatchResources.\nSpecifying ResourceDescription directly under match is being deprecated.\nPlease specify under "any" or "all" instead.'
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AllModel7(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel8(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class ForeachModel1(BaseModel):
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    order: Annotated[
        Optional[Literal["Ascending", "Descending"]],
        Field(
            description="Order defines the iteration order on the list.\nCan be Ascending to iterate from first to last element or Descending to iterate in from last to first element."
        ),
    ] = None
    patch_strategic_merge: Annotated[
        Optional[Any],
        Field(
            alias="patchStrategicMerge",
            description="PatchStrategicMerge is a strategic merge patch used to modify resources.\nSee https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/\nand https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.",
        ),
    ] = None
    patches_json6902: Annotated[
        Optional[str],
        Field(
            alias="patchesJson6902",
            description="PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.\nSee https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.",
        ),
    ] = None
    preconditions: Annotated[
        Optional[PreconditionsModel1],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class VariableModel2(BaseModel):
    expression: Annotated[
        str,
        Field(
            description="Expression is the expression that will be evaluated as the value of the variable.\nThe CEL expression has access to the same identifiers as the CEL expressions in Validation."
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.\nThe variable can be accessed in other expressions through `variables`\nFor example, if name is "foo", the variable will be available as `variables.foo`'
        ),
    ]


class VariableModel3(BaseModel):
    default: Annotated[
        Optional[Any],
        Field(
            description="Default is an optional arbitrary JSON object that the variable may take if the JMESPath\nexpression evaluates to nil"
        ),
    ] = None
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description="JMESPath is an optional JMESPath Expression that can be used to\ntransform the variable.",
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(description="Value is any arbitrary JSON object representable in YAML or JSON form."),
    ] = None


class ForeachModel2(BaseModel):
    any_pattern: Annotated[
        Optional[Any],
        Field(
            alias="anyPattern",
            description="AnyPattern specifies list of validation patterns. At least one of the patterns\nmust be satisfied for the validation rule to succeed.",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    deny: Annotated[
        Optional[DenyModel],
        Field(description="Deny defines conditions used to pass or fail a validation rule."),
    ] = None
    element_scope: Annotated[
        Optional[bool],
        Field(
            alias="elementScope",
            description='ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.\nWhen set to "false", "request.object" is used as the validation scope within the foreach\nblock to allow referencing other elements in the subtree.',
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    pattern: Annotated[
        Optional[Any],
        Field(description="Pattern specifies an overlay-style pattern used to check resources."),
    ] = None
    preconditions: Annotated[
        Optional[PreconditionsModel1],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class ExcludeModel2(BaseModel):
    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(
            alias="controlName",
            description="ControlName specifies the name of the Pod Security Standard control.\nSee: https://kubernetes.io/docs/concepts/security/pod-security-standards/",
        ),
    ]
    images: Annotated[
        Optional[List[str]],
        Field(
            description="Images selects matching containers and applies the container level PSS.\nEach image is the image name consisting of the registry address, repository, image, and tag.\nEmpty list matches no containers, PSS checks are applied at the pod level only.\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images."
        ),
    ] = None
    restricted_field: Annotated[
        Optional[str],
        Field(
            alias="restrictedField",
            description="RestrictedField selects the field for the given Pod Security Standard control.\nWhen not set, all restricted fields for the control are selected.",
        ),
    ] = None
    values: Annotated[
        Optional[List[str]],
        Field(description="Values defines the allowed values that can be excluded."),
    ] = None


class VerifyImageModel(BaseModel):
    additional_extensions: Annotated[
        Optional[Dict[str, str]],
        Field(alias="additionalExtensions", description="Deprecated."),
    ] = None
    annotations: Annotated[
        Optional[Dict[str, str]],
        Field(description="Deprecated. Use annotations per Attestor instead."),
    ] = None
    attestations: Annotated[
        Optional[List[Attestation]],
        Field(
            description="Attestations are optional checks for signed in-toto Statements used to verify the image.\nSee https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the\nOCI registry and decodes them into a list of Statement declarations."
        ),
    ] = None
    attestors: Annotated[
        Optional[List[Attestor]],
        Field(description="Attestors specified the required attestors (i.e. authorities)"),
    ] = None
    image: Annotated[
        Optional[str], Field(description="Deprecated. Use ImageReferences instead.")
    ] = None
    image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="imageReferences",
            description="ImageReferences is a list of matching image reference patterns. At least one pattern in the\nlist must match the image for the rule to apply. Each image reference consists of a registry\naddress (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials],
        Field(
            alias="imageRegistryCredentials",
            description="ImageRegistryCredentials provides credentials that will be used for authentication with registry.",
        ),
    ] = None
    issuer: Annotated[
        Optional[str], Field(description="Deprecated. Use KeylessAttestor instead.")
    ] = None
    key: Annotated[
        Optional[str], Field(description="Deprecated. Use StaticKeyAttestor instead.")
    ] = None
    mutate_digest: Annotated[
        Optional[bool],
        Field(
            alias="mutateDigest",
            description="MutateDigest enables replacement of image tags with digests.\nDefaults to true.",
        ),
    ] = True
    repository: Annotated[
        Optional[str],
        Field(
            description="Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.\nIf specified Repository will override the default OCI image repository configured for the installation.\nThe repository can also be overridden per Attestor or Attestation."
        ),
    ] = None
    required: Annotated[
        Optional[bool],
        Field(
            description="Required validates that images are verified i.e. have matched passed a signature or attestation check."
        ),
    ] = True
    roots: Annotated[
        Optional[str], Field(description="Deprecated. Use KeylessAttestor instead.")
    ] = None
    skip_image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="skipImageReferences",
            description="SkipImageReferences is a list of matching image reference patterns that should be skipped.\nAt least one pattern in the list must match the image for the rule to be skipped. Each image reference\nconsists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    subject: Annotated[
        Optional[str], Field(description="Deprecated. Use KeylessAttestor instead.")
    ] = None
    type: Annotated[
        Optional[Literal["Cosign", "Notary"]],
        Field(
            description="Type specifies the method of signature validation. The allowed options\nare Cosign and Notary. By default Cosign is used if a type is not specified."
        ),
    ] = None
    use_cache: Annotated[
        Optional[bool],
        Field(
            alias="useCache",
            description="UseCache enables caching of image verify responses for this rule.",
        ),
    ] = True
    verify_digest: Annotated[
        Optional[bool],
        Field(
            alias="verifyDigest",
            description="VerifyDigest validates that images have a digest.",
        ),
    ] = True


class RuleModel(BaseModel):
    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]],
        Field(
            alias="celPreconditions",
            description="CELPreconditions are used to determine if a policy rule should be applied by evaluating a\nset of CEL conditions. It can only be used with the validate.cel subrule",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    exclude: Annotated[
        Optional[ExcludeModel1],
        Field(
            description="ExcludeResources defines when this policy rule should not be applied. The exclude\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the name or role."
        ),
    ] = None
    generate: Annotated[
        Optional[Generate],
        Field(description="Generation is used to create new resources."),
    ] = None
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]],
        Field(
            alias="imageExtractors",
            description="ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.\nThis config is only valid for verifyImages rules.",
        ),
    ] = None
    match: Annotated[
        Optional[MatchModel],
        Field(
            description="MatchResources defines when this policy rule should be applied. The match\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the user name or role.\nAt least one kind is required."
        ),
    ] = None
    mutate: Annotated[
        Optional[Mutate],
        Field(description="Mutation is used to modify matching resources."),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name is a label to identify the rule, It must be unique within the policy.",
            max_length=63,
        ),
    ]
    preconditions: Annotated[
        Optional[Any],
        Field(
            description="Preconditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements. A direct list\nof conditions (without `any` or `all` statements is supported for backwards compatibility but\nwill be deprecated in the next major release.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None
    skip_background_requests: Annotated[
        Optional[bool],
        Field(
            alias="skipBackgroundRequests",
            description='SkipBackgroundRequests bypasses admission requests that are sent by the background controller.\nThe default value is set to "true", it must be set to "false" to apply\ngenerate and mutateExisting rules to those requests.',
        ),
    ] = True
    validate_: Annotated[
        Optional[Validate],
        Field(
            alias="validate",
            description="Validation is used to validate matching resources.",
        ),
    ] = None
    verify_images: Annotated[
        Optional[List[VerifyImageModel]],
        Field(
            alias="verifyImages",
            description="VerifyImages is used to verify image signatures and mutate them to add a digest",
        ),
    ] = None


class Autogen(BaseModel):
    rules: Annotated[
        Optional[List[RuleModel]],
        Field(
            description="Rules is a list of Rule instances. It contains auto generated rules added for pod controllers"
        ),
    ] = None


class ConditionModel1(BaseModel):
    last_transition_time: Annotated[
        datetime,
        Field(
            alias="lastTransitionTime",
            description="lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
        ),
    ]
    message: Annotated[
        str,
        Field(
            description="message is a human readable message indicating details about the transition.\nThis may be an empty string.",
            max_length=32768,
        ),
    ]
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
            ge=0,
        ),
    ] = None
    reason: Annotated[
        str,
        Field(
            description="reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    status: Annotated[
        Literal["True", "False", "Unknown"],
        Field(description="status of the condition, one of True, False, Unknown."),
    ]
    type: Annotated[
        str,
        Field(
            description="type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]


class Rulecount(BaseModel):
    generate: Annotated[int, Field(description="Count for generate rules in policy")]
    mutate: Annotated[int, Field(description="Count for mutate rules in policy")]
    validate_: Annotated[
        int, Field(alias="validate", description="Count for validate rules in policy")
    ]
    verifyimages: Annotated[int, Field(description="Count for verify image rules in policy")]


class Validatingadmissionpolicy(BaseModel):
    generated: Annotated[
        bool,
        Field(
            description="Generated indicates whether a validating admission policy is generated from the policy or not"
        ),
    ]
    message: Annotated[
        str,
        Field(
            description="Message is a human readable message indicating details about the generation of validating admission policy\nIt is an empty string when validating admission policy is successfully generated."
        ),
    ]


class ClusterPolicyStatus(BaseModel):
    autogen: Annotated[
        Optional[Autogen],
        Field(description="AutogenStatus contains autogen status information."),
    ] = None
    conditions: Optional[List[ConditionModel1]] = None
    ready: Annotated[bool, Field(description="Deprecated in favor of Conditions")]
    rulecount: Annotated[
        Optional[Rulecount],
        Field(
            description="RuleCountStatus contains four variables which describes counts for\nvalidate, generate, mutate and verify images rules"
        ),
    ] = None
    validatingadmissionpolicy: Annotated[
        Optional[Validatingadmissionpolicy],
        Field(description="ValidatingAdmissionPolicy contains status information"),
    ] = None


class AllModel8(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AnyModel9(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class ExcludeModel3(BaseModel):
    all: Annotated[
        Optional[List[AllModel8]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel9]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None


class MatchModel1(BaseModel):
    all: Annotated[
        Optional[List[AllModel8]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel9]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None


class AllModel9(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel10(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class ForeachModel3(BaseModel):
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    order: Annotated[
        Optional[Literal["Ascending", "Descending"]],
        Field(
            description="Order defines the iteration order on the list.\nCan be Ascending to iterate from first to last element or Descending to iterate in from last to first element."
        ),
    ] = None
    patch_strategic_merge: Annotated[
        Optional[Any],
        Field(
            alias="patchStrategicMerge",
            description="PatchStrategicMerge is a strategic merge patch used to modify resources.\nSee https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/\nand https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.",
        ),
    ] = None
    patches_json6902: Annotated[
        Optional[str],
        Field(
            alias="patchesJson6902",
            description="PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.\nSee https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.",
        ),
    ] = None
    preconditions: Annotated[
        Optional[PreconditionsModel1],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class AllModel10(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel11(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class PreconditionsModel2(BaseModel):
    all: Annotated[
        Optional[List[AllModel10]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass."
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel11]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass."
        ),
    ] = None


class VariableModel4(BaseModel):
    expression: Annotated[
        str,
        Field(
            description="Expression is the expression that will be evaluated as the value of the variable.\nThe CEL expression has access to the same identifiers as the CEL expressions in Validation."
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.\nThe variable can be accessed in other expressions through `variables`\nFor example, if name is "foo", the variable will be available as `variables.foo`'
        ),
    ]


class DenyModel1(BaseModel):
    conditions: Annotated[
        Optional[Conditions],
        Field(
            description="Multiple conditions can be declared under an `any` or `all` statement.\nSee: https://kyverno.io/docs/writing-policies/validate/#deny-rules"
        ),
    ] = None


class VariableModel5(BaseModel):
    default: Annotated[
        Optional[Any],
        Field(
            description="Default is an optional arbitrary JSON object that the variable may take if the JMESPath\nexpression evaluates to nil"
        ),
    ] = None
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description="JMESPath is an optional JMESPath Expression that can be used to\ntransform the variable.",
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(description="Value is any arbitrary JSON object representable in YAML or JSON form."),
    ] = None


class DenyModel2(BaseModel):
    conditions: Annotated[
        Optional[Any],
        Field(
            description="Multiple conditions can be declared under an `any` or `all` statement. A direct list\nof conditions (without `any` or `all` statements) is also supported for backwards compatibility\nbut will be deprecated in the next major release.\nSee: https://kyverno.io/docs/writing-policies/validate/#deny-rules"
        ),
    ] = None


class AllModel11(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel12(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class PreconditionsModel3(BaseModel):
    all: Annotated[
        Optional[List[AllModel11]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass"
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel12]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass"
        ),
    ] = None


class ForeachModel4(BaseModel):
    any_pattern: Annotated[
        Optional[Any],
        Field(
            alias="anyPattern",
            description="AnyPattern specifies list of validation patterns. At least one of the patterns\nmust be satisfied for the validation rule to succeed.",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    deny: Annotated[
        Optional[DenyModel2],
        Field(description="Deny defines conditions used to pass or fail a validation rule."),
    ] = None
    element_scope: Annotated[
        Optional[bool],
        Field(
            alias="elementScope",
            description='ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.\nWhen set to "false", "request.object" is used as the validation scope within the foreach\nblock to allow referencing other elements in the subtree.',
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    pattern: Annotated[
        Optional[Any],
        Field(description="Pattern specifies an overlay-style pattern used to check resources."),
    ] = None
    preconditions: Annotated[
        Optional[PreconditionsModel3],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class ExcludeModel4(BaseModel):
    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(
            alias="controlName",
            description="ControlName specifies the name of the Pod Security Standard control.\nSee: https://kubernetes.io/docs/concepts/security/pod-security-standards/",
        ),
    ]
    images: Annotated[
        Optional[List[str]],
        Field(
            description="Images selects matching containers and applies the container level PSS.\nEach image is the image name consisting of the registry address, repository, image, and tag.\nEmpty list matches no containers, PSS checks are applied at the pod level only.\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images."
        ),
    ] = None
    restricted_field: Annotated[
        Optional[str],
        Field(
            alias="restrictedField",
            description="RestrictedField selects the field for the given Pod Security Standard control.\nWhen not set, all restricted fields for the control are selected.",
        ),
    ] = None
    values: Annotated[
        Optional[List[str]],
        Field(description="Values defines the allowed values that can be excluded."),
    ] = None


class ConditionModel2(BaseModel):
    all: Annotated[
        Optional[List[AllModel11]],
        Field(
            description="AllConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, all of the conditions need to pass"
        ),
    ] = None
    any: Annotated[
        Optional[List[AnyModel12]],
        Field(
            description="AnyConditions enable variable-based conditional rule execution. This is useful for\nfiner control of when an rule is applied. A condition can reference object data\nusing JMESPath notation.\nHere, at least one of the conditions need to pass"
        ),
    ] = None


class VerifyImageModel1(BaseModel):
    attestations: Annotated[
        Optional[List[Attestation]],
        Field(
            description="Attestations are optional checks for signed in-toto Statements used to verify the image.\nSee https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the\nOCI registry and decodes them into a list of Statement declarations."
        ),
    ] = None
    attestors: Annotated[
        Optional[List[Attestor]],
        Field(description="Attestors specified the required attestors (i.e. authorities)"),
    ] = None
    image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="imageReferences",
            description="ImageReferences is a list of matching image reference patterns. At least one pattern in the\nlist must match the image for the rule to apply. Each image reference consists of a registry\naddress (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials],
        Field(
            alias="imageRegistryCredentials",
            description="ImageRegistryCredentials provides credentials that will be used for authentication with registry",
        ),
    ] = None
    mutate_digest: Annotated[
        Optional[bool],
        Field(
            alias="mutateDigest",
            description="MutateDigest enables replacement of image tags with digests.\nDefaults to true.",
        ),
    ] = True
    repository: Annotated[
        Optional[str],
        Field(
            description="Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.\nIf specified Repository will override the default OCI image repository configured for the installation.\nThe repository can also be overridden per Attestor or Attestation."
        ),
    ] = None
    required: Annotated[
        Optional[bool],
        Field(
            description="Required validates that images are verified i.e. have matched passed a signature or attestation check."
        ),
    ] = True
    skip_image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="skipImageReferences",
            description="SkipImageReferences is a list of matching image reference patterns that should be skipped.\nAt least one pattern in the list must match the image for the rule to be skipped. Each image reference\nconsists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    type: Annotated[
        Optional[Literal["Cosign", "Notary"]],
        Field(
            description="Type specifies the method of signature validation. The allowed options\nare Cosign and Notary. By default Cosign is used if a type is not specified."
        ),
    ] = None
    use_cache: Annotated[
        Optional[bool],
        Field(
            alias="useCache",
            description="UseCache enables caching of image verify responses for this rule",
        ),
    ] = True
    verify_digest: Annotated[
        Optional[bool],
        Field(
            alias="verifyDigest",
            description="VerifyDigest validates that images have a digest.",
        ),
    ] = True


class RuleModel1(BaseModel):
    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]],
        Field(
            alias="celPreconditions",
            description="CELPreconditions are used to determine if a policy rule should be applied by evaluating a\nset of CEL conditions. It can only be used with the validate.cel subrule",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    exclude: Annotated[
        Optional[ExcludeModel3],
        Field(
            description="ExcludeResources defines when this policy rule should not be applied. The exclude\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the name or role."
        ),
    ] = None
    generate: Annotated[
        Optional[Generate],
        Field(description="Generation is used to create new resources."),
    ] = None
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]],
        Field(
            alias="imageExtractors",
            description="ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.\nThis config is only valid for verifyImages rules.",
        ),
    ] = None
    match: Annotated[
        Optional[MatchModel1],
        Field(
            description="MatchResources defines when this policy rule should be applied. The match\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the user name or role.\nAt least one kind is required."
        ),
    ] = None
    mutate: Annotated[
        Optional[Mutate],
        Field(description="Mutation is used to modify matching resources."),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name is a label to identify the rule, It must be unique within the policy.",
            max_length=63,
        ),
    ]
    preconditions: Annotated[
        Optional[PreconditionsModel2],
        Field(
            description="Preconditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None
    skip_background_requests: Annotated[
        Optional[bool],
        Field(
            alias="skipBackgroundRequests",
            description='SkipBackgroundRequests bypasses admission requests that are sent by the background controller.\nThe default value is set to "true", it must be set to "false" to apply\ngenerate and mutateExisting rules to those requests.',
        ),
    ] = True
    validate_: Annotated[
        Optional[Validate],
        Field(
            alias="validate",
            description="Validation is used to validate matching resources.",
        ),
    ] = None
    verify_images: Annotated[
        Optional[List[VerifyImageModel1]],
        Field(
            alias="verifyImages",
            description="VerifyImages is used to verify image signatures and mutate them to add a digest",
        ),
    ] = None


class PolicySpec(BaseModel):
    admission: Annotated[
        Optional[bool],
        Field(
            description='Admission controls if rules are applied during admission.\nOptional. Default value is "true".'
        ),
    ] = True
    apply_rules: Annotated[
        Optional[Literal["All", "One"]],
        Field(
            alias="applyRules",
            description="ApplyRules controls how rules in a policy are applied. Rule are processed in\nthe order of declaration. When set to `One` processing stops after a rule has\nbeen applied i.e. the rule matches and results in a pass, fail, or error. When\nset to `All` all rules in the policy are processed. The default is `All`.",
        ),
    ] = None
    background: Annotated[
        Optional[bool],
        Field(
            description='Background controls if rules are applied to existing resources during a background scan.\nOptional. Default value is "true". The value must be set to "false" if the policy rule\nuses variables that are only available in the admission review request (e.g. user name).'
        ),
    ] = True
    failure_policy: Annotated[
        Optional[Literal["Ignore", "Fail"]],
        Field(
            alias="failurePolicy",
            description="FailurePolicy defines how unexpected policy errors and webhook response timeout errors are handled.\nRules within the same policy share the same failure behavior.\nAllowed values are Ignore or Fail. Defaults to Fail.",
        ),
    ] = None
    generate_existing: Annotated[
        Optional[bool],
        Field(
            alias="generateExisting",
            description='GenerateExisting controls whether to trigger generate rule in existing resources\nIf is set to "true" generate rule will be triggered and applied to existing matched resources.\nDefaults to "false" if not specified.',
        ),
    ] = None
    generate_existing_on_policy_update: Annotated[
        Optional[bool],
        Field(
            alias="generateExistingOnPolicyUpdate",
            description="Deprecated, use generateExisting instead",
        ),
    ] = None
    mutate_existing_on_policy_update: Annotated[
        Optional[bool],
        Field(
            alias="mutateExistingOnPolicyUpdate",
            description='MutateExistingOnPolicyUpdate controls if a mutateExisting policy is applied on policy events.\nDefault value is "false".',
        ),
    ] = None
    rules: Annotated[
        Optional[List[RuleModel1]],
        Field(
            description="Rules is a list of Rule instances. A Policy contains multiple rules and\neach rule can validate, mutate, or generate resources."
        ),
    ] = None
    schema_validation: Annotated[
        Optional[bool], Field(alias="schemaValidation", description="Deprecated.")
    ] = None
    use_server_side_apply: Annotated[
        Optional[bool],
        Field(
            alias="useServerSideApply",
            description='UseServerSideApply controls whether to use server-side apply for generate rules\nIf is set to "true" create & update for generate rules will use apply instead of create/update.\nDefaults to "false" if not specified.',
        ),
    ] = None
    validation_failure_action: Annotated[
        Optional[Literal["audit", "enforce", "Audit", "Enforce"]],
        Field(
            alias="validationFailureAction",
            description='ValidationFailureAction defines if a validation policy rule violation should block\nthe admission review request (enforce), or allow (audit) the admission review request\nand report an error in a policy report. Optional.\nAllowed values are audit or enforce. The default value is "Audit".',
        ),
    ] = "Audit"
    validation_failure_action_overrides: Annotated[
        Optional[List[ValidationFailureActionOverride]],
        Field(
            alias="validationFailureActionOverrides",
            description="ValidationFailureActionOverrides is a Cluster Policy attribute that specifies ValidationFailureAction\nnamespace-wise. It overrides ValidationFailureAction for the specified namespaces.",
        ),
    ] = None
    webhook_configuration: Annotated[
        Optional[WebhookConfiguration],
        Field(
            alias="webhookConfiguration",
            description="WebhookConfiguration specifies the custom configuration for Kubernetes admission webhookconfiguration.\nRequires Kubernetes 1.27 or later.",
        ),
    ] = None
    webhook_timeout_seconds: Annotated[
        Optional[int],
        Field(
            alias="webhookTimeoutSeconds",
            description="WebhookTimeoutSeconds specifies the maximum time in seconds allowed to apply this policy.\nAfter the configured time expires, the admission request may fail, or may simply ignore the policy results,\nbased on the failure policy. The default timeout is 10s, the value must be between 1 and 30 seconds.",
        ),
    ] = None


class AllModel12(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AnyModel13(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class ExcludeModel5(BaseModel):
    all: Annotated[
        Optional[List[AllModel12]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel13]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description='ResourceDescription contains information about the resource being created or modified.\nRequires at least one tag to be specified when under MatchResources.\nSpecifying ResourceDescription directly under match is being deprecated.\nPlease specify under "any" or "all" instead.'
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class MatchModel2(BaseModel):
    all: Annotated[
        Optional[List[AllModel12]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel13]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description='ResourceDescription contains information about the resource being created or modified.\nRequires at least one tag to be specified when under MatchResources.\nSpecifying ResourceDescription directly under match is being deprecated.\nPlease specify under "any" or "all" instead.'
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AllModel13(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel14(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "In",
                "AnyIn",
                "AllIn",
                "NotIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class ForeachModel5(BaseModel):
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    order: Annotated[
        Optional[Literal["Ascending", "Descending"]],
        Field(
            description="Order defines the iteration order on the list.\nCan be Ascending to iterate from first to last element or Descending to iterate in from last to first element."
        ),
    ] = None
    patch_strategic_merge: Annotated[
        Optional[Any],
        Field(
            alias="patchStrategicMerge",
            description="PatchStrategicMerge is a strategic merge patch used to modify resources.\nSee https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/\nand https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.",
        ),
    ] = None
    patches_json6902: Annotated[
        Optional[str],
        Field(
            alias="patchesJson6902",
            description="PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.\nSee https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.",
        ),
    ] = None
    preconditions: Annotated[
        Optional[PreconditionsModel3],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class VariableModel6(BaseModel):
    expression: Annotated[
        str,
        Field(
            description="Expression is the expression that will be evaluated as the value of the variable.\nThe CEL expression has access to the same identifiers as the CEL expressions in Validation."
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='Name is the name of the variable. The name must be a valid CEL identifier and unique among all variables.\nThe variable can be accessed in other expressions through `variables`\nFor example, if name is "foo", the variable will be available as `variables.foo`'
        ),
    ]


class VariableModel7(BaseModel):
    default: Annotated[
        Optional[Any],
        Field(
            description="Default is an optional arbitrary JSON object that the variable may take if the JMESPath\nexpression evaluates to nil"
        ),
    ] = None
    jmes_path: Annotated[
        Optional[str],
        Field(
            alias="jmesPath",
            description="JMESPath is an optional JMESPath Expression that can be used to\ntransform the variable.",
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(description="Value is any arbitrary JSON object representable in YAML or JSON form."),
    ] = None


class ForeachModel6(BaseModel):
    any_pattern: Annotated[
        Optional[Any],
        Field(
            alias="anyPattern",
            description="AnyPattern specifies list of validation patterns. At least one of the patterns\nmust be satisfied for the validation rule to succeed.",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    deny: Annotated[
        Optional[DenyModel2],
        Field(description="Deny defines conditions used to pass or fail a validation rule."),
    ] = None
    element_scope: Annotated[
        Optional[bool],
        Field(
            alias="elementScope",
            description='ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.\nWhen set to "false", "request.object" is used as the validation scope within the foreach\nblock to allow referencing other elements in the subtree.',
        ),
    ] = None
    foreach: Annotated[
        Optional[Any], Field(description="Foreach declares a nested foreach iterator")
    ] = None
    list: Annotated[
        Optional[str],
        Field(
            description="List specifies a JMESPath expression that results in one or more elements\nto which the validation logic is applied."
        ),
    ] = None
    pattern: Annotated[
        Optional[Any],
        Field(description="Pattern specifies an overlay-style pattern used to check resources."),
    ] = None
    preconditions: Annotated[
        Optional[PreconditionsModel3],
        Field(
            description="AnyAllConditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None


class ExcludeModel6(BaseModel):
    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(
            alias="controlName",
            description="ControlName specifies the name of the Pod Security Standard control.\nSee: https://kubernetes.io/docs/concepts/security/pod-security-standards/",
        ),
    ]
    images: Annotated[
        Optional[List[str]],
        Field(
            description="Images selects matching containers and applies the container level PSS.\nEach image is the image name consisting of the registry address, repository, image, and tag.\nEmpty list matches no containers, PSS checks are applied at the pod level only.\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images."
        ),
    ] = None
    restricted_field: Annotated[
        Optional[str],
        Field(
            alias="restrictedField",
            description="RestrictedField selects the field for the given Pod Security Standard control.\nWhen not set, all restricted fields for the control are selected.",
        ),
    ] = None
    values: Annotated[
        Optional[List[str]],
        Field(description="Values defines the allowed values that can be excluded."),
    ] = None


class VerifyImageModel2(BaseModel):
    additional_extensions: Annotated[
        Optional[Dict[str, str]],
        Field(alias="additionalExtensions", description="Deprecated."),
    ] = None
    annotations: Annotated[
        Optional[Dict[str, str]],
        Field(description="Deprecated. Use annotations per Attestor instead."),
    ] = None
    attestations: Annotated[
        Optional[List[Attestation]],
        Field(
            description="Attestations are optional checks for signed in-toto Statements used to verify the image.\nSee https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the\nOCI registry and decodes them into a list of Statement declarations."
        ),
    ] = None
    attestors: Annotated[
        Optional[List[Attestor]],
        Field(description="Attestors specified the required attestors (i.e. authorities)"),
    ] = None
    image: Annotated[
        Optional[str], Field(description="Deprecated. Use ImageReferences instead.")
    ] = None
    image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="imageReferences",
            description="ImageReferences is a list of matching image reference patterns. At least one pattern in the\nlist must match the image for the rule to apply. Each image reference consists of a registry\naddress (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    image_registry_credentials: Annotated[
        Optional[ImageRegistryCredentials],
        Field(
            alias="imageRegistryCredentials",
            description="ImageRegistryCredentials provides credentials that will be used for authentication with registry.",
        ),
    ] = None
    issuer: Annotated[
        Optional[str], Field(description="Deprecated. Use KeylessAttestor instead.")
    ] = None
    key: Annotated[
        Optional[str], Field(description="Deprecated. Use StaticKeyAttestor instead.")
    ] = None
    mutate_digest: Annotated[
        Optional[bool],
        Field(
            alias="mutateDigest",
            description="MutateDigest enables replacement of image tags with digests.\nDefaults to true.",
        ),
    ] = True
    repository: Annotated[
        Optional[str],
        Field(
            description="Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.\nIf specified Repository will override the default OCI image repository configured for the installation.\nThe repository can also be overridden per Attestor or Attestation."
        ),
    ] = None
    required: Annotated[
        Optional[bool],
        Field(
            description="Required validates that images are verified i.e. have matched passed a signature or attestation check."
        ),
    ] = True
    roots: Annotated[
        Optional[str], Field(description="Deprecated. Use KeylessAttestor instead.")
    ] = None
    skip_image_references: Annotated[
        Optional[List[str]],
        Field(
            alias="skipImageReferences",
            description="SkipImageReferences is a list of matching image reference patterns that should be skipped.\nAt least one pattern in the list must match the image for the rule to be skipped. Each image reference\nconsists of a registry address (defaults to docker.io), repository, image, and tag (defaults to latest).\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.",
        ),
    ] = None
    subject: Annotated[
        Optional[str], Field(description="Deprecated. Use KeylessAttestor instead.")
    ] = None
    type: Annotated[
        Optional[Literal["Cosign", "Notary"]],
        Field(
            description="Type specifies the method of signature validation. The allowed options\nare Cosign and Notary. By default Cosign is used if a type is not specified."
        ),
    ] = None
    use_cache: Annotated[
        Optional[bool],
        Field(
            alias="useCache",
            description="UseCache enables caching of image verify responses for this rule.",
        ),
    ] = True
    verify_digest: Annotated[
        Optional[bool],
        Field(
            alias="verifyDigest",
            description="VerifyDigest validates that images have a digest.",
        ),
    ] = True


class RuleModel2(BaseModel):
    cel_preconditions: Annotated[
        Optional[List[CelPrecondition]],
        Field(
            alias="celPreconditions",
            description="CELPreconditions are used to determine if a policy rule should be applied by evaluating a\nset of CEL conditions. It can only be used with the validate.cel subrule",
        ),
    ] = None
    context: Annotated[
        Optional[List[Context]],
        Field(
            description="Context defines variables and data sources that can be used during rule execution."
        ),
    ] = None
    exclude: Annotated[
        Optional[ExcludeModel5],
        Field(
            description="ExcludeResources defines when this policy rule should not be applied. The exclude\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the name or role."
        ),
    ] = None
    generate: Annotated[
        Optional[Generate],
        Field(description="Generation is used to create new resources."),
    ] = None
    image_extractors: Annotated[
        Optional[Dict[str, List[ImageExtractor]]],
        Field(
            alias="imageExtractors",
            description="ImageExtractors defines a mapping from kinds to ImageExtractorConfigs.\nThis config is only valid for verifyImages rules.",
        ),
    ] = None
    match: Annotated[
        Optional[MatchModel2],
        Field(
            description="MatchResources defines when this policy rule should be applied. The match\ncriteria can include resource information (e.g. kind, name, namespace, labels)\nand admission review request information like the user name or role.\nAt least one kind is required."
        ),
    ] = None
    mutate: Annotated[
        Optional[Mutate],
        Field(description="Mutation is used to modify matching resources."),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name is a label to identify the rule, It must be unique within the policy.",
            max_length=63,
        ),
    ]
    preconditions: Annotated[
        Optional[Any],
        Field(
            description="Preconditions are used to determine if a policy rule should be applied by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements. A direct list\nof conditions (without `any` or `all` statements is supported for backwards compatibility but\nwill be deprecated in the next major release.\nSee: https://kyverno.io/docs/writing-policies/preconditions/"
        ),
    ] = None
    skip_background_requests: Annotated[
        Optional[bool],
        Field(
            alias="skipBackgroundRequests",
            description='SkipBackgroundRequests bypasses admission requests that are sent by the background controller.\nThe default value is set to "true", it must be set to "false" to apply\ngenerate and mutateExisting rules to those requests.',
        ),
    ] = True
    validate_: Annotated[
        Optional[Validate],
        Field(
            alias="validate",
            description="Validation is used to validate matching resources.",
        ),
    ] = None
    verify_images: Annotated[
        Optional[List[VerifyImageModel2]],
        Field(
            alias="verifyImages",
            description="VerifyImages is used to verify image signatures and mutate them to add a digest",
        ),
    ] = None


class ConditionModel3(BaseModel):
    last_transition_time: Annotated[
        datetime,
        Field(
            alias="lastTransitionTime",
            description="lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
        ),
    ]
    message: Annotated[
        str,
        Field(
            description="message is a human readable message indicating details about the transition.\nThis may be an empty string.",
            max_length=32768,
        ),
    ]
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
            ge=0,
        ),
    ] = None
    reason: Annotated[
        str,
        Field(
            description="reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    status: Annotated[
        Literal["True", "False", "Unknown"],
        Field(description="status of the condition, one of True, False, Unknown."),
    ]
    type: Annotated[
        str,
        Field(
            description="type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]


class PolicyStatus(BaseModel):
    autogen: Annotated[
        Optional[Autogen],
        Field(description="AutogenStatus contains autogen status information."),
    ] = None
    conditions: Optional[List[ConditionModel3]] = None
    ready: Annotated[bool, Field(description="Deprecated in favor of Conditions")]
    rulecount: Annotated[
        Optional[Rulecount],
        Field(
            description="RuleCountStatus contains four variables which describes counts for\nvalidate, generate, mutate and verify images rules"
        ),
    ] = None
    validatingadmissionpolicy: Annotated[
        Optional[Validatingadmissionpolicy],
        Field(description="ValidatingAdmissionPolicy contains status information"),
    ] = None


class AllModel14(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class AnyModel15(BaseModel):
    key: Annotated[
        Optional[Any],
        Field(
            description="Key is the context entry (using JMESPath) for conditional rule evaluation."
        ),
    ] = None
    message: Annotated[
        Optional[str], Field(description="Message is an optional display message")
    ] = None
    operator: Annotated[
        Optional[
            Literal[
                "Equals",
                "NotEquals",
                "AnyIn",
                "AllIn",
                "AnyNotIn",
                "AllNotIn",
                "GreaterThanOrEquals",
                "GreaterThan",
                "LessThanOrEquals",
                "LessThan",
                "DurationGreaterThanOrEquals",
                "DurationGreaterThan",
                "DurationLessThanOrEquals",
                "DurationLessThan",
            ]
        ],
        Field(
            description="Operator is the conditional operation to perform. Valid operators are:\nEquals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,\nGreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,\nDurationLessThanOrEquals, DurationLessThan"
        ),
    ] = None
    value: Annotated[
        Optional[Any],
        Field(
            description="Value is the conditional value, or set of values. The values can be fixed set\nor can be variables declared using JMESPath."
        ),
    ] = None


class Exception(BaseModel):
    policy_name: Annotated[
        str,
        Field(
            alias="policyName",
            description="PolicyName identifies the policy to which the exception is applied.\nThe policy name uses the format <namespace>/<name> unless it\nreferences a ClusterPolicy.",
        ),
    ]
    rule_names: Annotated[
        List[str],
        Field(
            alias="ruleNames",
            description="RuleNames identifies the rules to which the exception is applied.",
        ),
    ]


class AllModel15(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class AnyModel16(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is the list of cluster-wide role names for the user.",
        ),
    ] = None
    resources: Annotated[
        Optional[Resources],
        Field(
            description="ResourceDescription contains information about the resource being created or modified."
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is the list of namespaced role names for the user."),
    ] = None
    subjects: Annotated[
        Optional[List[Subject]],
        Field(
            description="Subjects is the list of subject names like users, user groups, and service accounts."
        ),
    ] = None


class MatchModel3(BaseModel):
    all: Annotated[
        Optional[List[AllModel15]],
        Field(description="All allows specifying resources which will be ANDed"),
    ] = None
    any: Annotated[
        Optional[List[AnyModel16]],
        Field(description="Any allows specifying resources which will be ORed"),
    ] = None


class PodSecurityModel(BaseModel):
    control_name: Annotated[
        Literal[
            "HostProcess",
            "Host Namespaces",
            "Privileged Containers",
            "Capabilities",
            "HostPath Volumes",
            "Host Ports",
            "AppArmor",
            "SELinux",
            "/proc Mount Type",
            "Seccomp",
            "Sysctls",
            "Volume Types",
            "Privilege Escalation",
            "Running as Non-root",
            "Running as Non-root user",
        ],
        Field(
            alias="controlName",
            description="ControlName specifies the name of the Pod Security Standard control.\nSee: https://kubernetes.io/docs/concepts/security/pod-security-standards/",
        ),
    ]
    images: Annotated[
        Optional[List[str]],
        Field(
            description="Images selects matching containers and applies the container level PSS.\nEach image is the image name consisting of the registry address, repository, image, and tag.\nEmpty list matches no containers, PSS checks are applied at the pod level only.\nWildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images."
        ),
    ] = None
    restricted_field: Annotated[
        Optional[str],
        Field(
            alias="restrictedField",
            description="RestrictedField selects the field for the given Pod Security Standard control.\nWhen not set, all restricted fields for the control are selected.",
        ),
    ] = None
    values: Annotated[
        Optional[List[str]],
        Field(description="Values defines the allowed values that can be excluded."),
    ] = None


class PolicyExceptionSpec(BaseModel):
    background: Annotated[
        Optional[bool],
        Field(
            description='Background controls if exceptions are applied to existing policies during a background scan.\nOptional. Default value is "true". The value must be set to "false" if the policy rule\nuses variables that are only available in the admission review request (e.g. user name).'
        ),
    ] = None
    conditions: Annotated[
        Optional[Conditions],
        Field(
            description="Conditions are used to determine if a resource applies to the exception by evaluating a\nset of conditions. The declaration can contain nested `any` or `all` statements."
        ),
    ] = None
    exceptions: Annotated[
        List[Exception],
        Field(description="Exceptions is a list policy/rules to be excluded"),
    ]
    match: Annotated[
        MatchModel3,
        Field(
            description="Match defines match clause used to check if a resource applies to the exception"
        ),
    ]
    pod_security: Annotated[
        Optional[List[PodSecurityModel]],
        Field(
            alias="podSecurity",
            description="PodSecurity specifies the Pod Security Standard controls to be excluded.\nApplicable only to policies that have validate.podSecurity subrule.",
        ),
    ] = None


class CleanupPolicy(Resource):
    api_version: Annotated[
        Optional[Literal["kyverno.io/v2beta1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "kyverno.io/v2beta1"
    kind: Annotated[
        Optional[Literal["CleanupPolicy"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "CleanupPolicy"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: CleanupPolicySpec
    status: Optional[CleanupPolicyStatus] = None


class ClusterCleanupPolicy(Resource):
    api_version: Annotated[
        Optional[Literal["kyverno.io/v2beta1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "kyverno.io/v2beta1"
    kind: Annotated[
        Optional[Literal["ClusterCleanupPolicy"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ClusterCleanupPolicy"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: ClusterCleanupPolicySpec
    status: Optional[ClusterCleanupPolicyStatus] = None


class ClusterPolicy(Resource):
    api_version: Annotated[
        Optional[Literal["kyverno.io/v2beta1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "kyverno.io/v2beta1"
    kind: Annotated[
        Optional[Literal["ClusterPolicy"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "ClusterPolicy"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: ClusterPolicySpec
    status: Optional[ClusterPolicyStatus] = None


class Policy(Resource):
    api_version: Annotated[
        Optional[Literal["kyverno.io/v2beta1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "kyverno.io/v2beta1"
    kind: Annotated[
        Optional[Literal["Policy"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Policy"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: PolicySpec
    status: Optional[PolicyStatus] = None


class PolicyException(Resource):
    api_version: Annotated[
        Optional[Literal["kyverno.io/v2beta1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "kyverno.io/v2beta1"
    kind: Annotated[
        Optional[Literal["PolicyException"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "PolicyException"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: PolicyExceptionSpec

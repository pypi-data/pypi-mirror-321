# Generated by cloudcoil-model-codegen v0.0.33
# DO NOT EDIT

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseModel
from cloudcoil.resources import Resource


class Kind(BaseModel):
    group: str
    kind: str
    version: str


class RequestKind(BaseModel):
    group: str
    kind: str
    version: str


class RequestResource(BaseModel):
    group: str
    resource: str
    version: str


class ResourceModel(BaseModel):
    group: str
    resource: str
    version: str


class UserInfo(BaseModel):
    extra: Annotated[
        Optional[Dict[str, List[str]]],
        Field(description="Any additional information provided by the authenticator."),
    ] = None
    groups: Annotated[
        Optional[List[str]],
        Field(description="The names of groups this user is a part of."),
    ] = None
    uid: Annotated[
        Optional[str],
        Field(
            description="A unique value that identifies this user across time. If this user is\ndeleted and another user by the same name is added, they will have\ndifferent UIDs."
        ),
    ] = None
    username: Annotated[
        Optional[str],
        Field(description="The name that uniquely identifies this user among all active users."),
    ] = None


class AdmissionRequest(BaseModel):
    dry_run: Annotated[
        Optional[bool],
        Field(
            alias="dryRun",
            description="DryRun indicates that modifications will definitely not be persisted for this request.\nDefaults to false.",
        ),
    ] = None
    kind: Annotated[
        Kind,
        Field(
            description="Kind is the fully-qualified type of object being submitted (for example, v1.Pod or autoscaling.v1.Scale)"
        ),
    ]
    name: Annotated[
        Optional[str],
        Field(
            description="Name is the name of the object as presented in the request.  On a CREATE operation, the client may omit name and\nrely on the server to generate the name.  If that is the case, this field will contain an empty string."
        ),
    ] = None
    namespace: Annotated[
        Optional[str],
        Field(description="Namespace is the namespace associated with the request (if any)."),
    ] = None
    object: Annotated[
        Optional[Dict[str, Any]],
        Field(description="Object is the object from the incoming request."),
    ] = None
    old_object: Annotated[
        Optional[Dict[str, Any]],
        Field(
            alias="oldObject",
            description="OldObject is the existing object. Only populated for DELETE and UPDATE requests.",
        ),
    ] = None
    operation: Annotated[
        str,
        Field(
            description="Operation is the operation being performed. This may be different than the operation\nrequested. e.g. a patch can result in either a CREATE or UPDATE Operation."
        ),
    ]
    options: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="Options is the operation option structure of the operation being performed.\ne.g. `meta.k8s.io/v1.DeleteOptions` or `meta.k8s.io/v1.CreateOptions`. This may be\ndifferent than the options the caller provided. e.g. for a patch request the performed\nOperation might be a CREATE, in which case the Options will a\n`meta.k8s.io/v1.CreateOptions` even though the caller provided `meta.k8s.io/v1.PatchOptions`."
        ),
    ] = None
    request_kind: Annotated[
        Optional[RequestKind],
        Field(
            alias="requestKind",
            description='RequestKind is the fully-qualified type of the original API request (for example, v1.Pod or autoscaling.v1.Scale).\nIf this is specified and differs from the value in "kind", an equivalent match and conversion was performed.\n\n\nFor example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of\n`apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,\nan API request to apps/v1beta1 deployments would be converted and sent to the webhook\nwith `kind: {group:"apps", version:"v1", kind:"Deployment"}` (matching the rule the webhook registered for),\nand `requestKind: {group:"apps", version:"v1beta1", kind:"Deployment"}` (indicating the kind of the original API request).\n\n\nSee documentation for the "matchPolicy" field in the webhook configuration type for more details.',
        ),
    ] = None
    request_resource: Annotated[
        Optional[RequestResource],
        Field(
            alias="requestResource",
            description='RequestResource is the fully-qualified resource of the original API request (for example, v1.pods).\nIf this is specified and differs from the value in "resource", an equivalent match and conversion was performed.\n\n\nFor example, if deployments can be modified via apps/v1 and apps/v1beta1, and a webhook registered a rule of\n`apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]` and `matchPolicy: Equivalent`,\nan API request to apps/v1beta1 deployments would be converted and sent to the webhook\nwith `resource: {group:"apps", version:"v1", resource:"deployments"}` (matching the resource the webhook registered for),\nand `requestResource: {group:"apps", version:"v1beta1", resource:"deployments"}` (indicating the resource of the original API request).\n\n\nSee documentation for the "matchPolicy" field in the webhook configuration type.',
        ),
    ] = None
    request_sub_resource: Annotated[
        Optional[str],
        Field(
            alias="requestSubResource",
            description='RequestSubResource is the name of the subresource of the original API request, if any (for example, "status" or "scale")\nIf this is specified and differs from the value in "subResource", an equivalent match and conversion was performed.\nSee documentation for the "matchPolicy" field in the webhook configuration type.',
        ),
    ] = None
    resource: Annotated[
        ResourceModel,
        Field(
            description="Resource is the fully-qualified resource being requested (for example, v1.pods)"
        ),
    ]
    sub_resource: Annotated[
        Optional[str],
        Field(
            alias="subResource",
            description='SubResource is the subresource being requested, if any (for example, "status" or "scale")',
        ),
    ] = None
    uid: Annotated[
        str,
        Field(
            description="UID is an identifier for the individual request/response. It allows us to distinguish instances of requests which are\notherwise identical (parallel requests, requests when earlier requests did not modify etc)\nThe UID is meant to track the round trip (request/response) between the KAS and the WebHook, not the user request.\nIt is suitable for correlating log entries between the webhook and apiserver, for either auditing or debugging."
        ),
    ]
    user_info: Annotated[
        UserInfo,
        Field(
            alias="userInfo",
            description="UserInfo is information about the requesting user",
        ),
    ]


class AdmissionRequestInfo(BaseModel):
    admission_request: Annotated[
        Optional[AdmissionRequest],
        Field(
            alias="admissionRequest",
            description="AdmissionRequest describes the admission.Attributes for the admission request.",
        ),
    ] = None
    operation: Annotated[
        Optional[str],
        Field(
            description="Operation is the type of resource operation being checked for admission control"
        ),
    ] = None


class UserInfoModel(BaseModel):
    cluster_roles: Annotated[
        Optional[List[str]],
        Field(
            alias="clusterRoles",
            description="ClusterRoles is a list of possible clusterRoles send the request.",
        ),
    ] = None
    roles: Annotated[
        Optional[List[str]],
        Field(description="Roles is a list of possible role send the request."),
    ] = None
    user_info: Annotated[
        Optional[UserInfo],
        Field(
            alias="userInfo",
            description="UserInfo is the userInfo carried in the admission request.",
        ),
    ] = None


class Context(BaseModel):
    admission_request_info: Annotated[
        Optional[AdmissionRequestInfo],
        Field(
            alias="admissionRequestInfo",
            description="AdmissionRequestInfoObject stores the admission request and operation details",
        ),
    ] = None
    user_info: Annotated[
        Optional[UserInfoModel],
        Field(
            alias="userInfo",
            description="RequestInfo contains permission info carried in an admission request.",
        ),
    ] = None


class ResourceModel1(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="APIVersion specifies resource apiVersion."),
    ] = None
    kind: Annotated[Optional[str], Field(description="Kind specifies resource kind.")] = None
    name: Annotated[Optional[str], Field(description="Name specifies the resource name.")] = None
    namespace: Annotated[
        Optional[str], Field(description="Namespace specifies resource namespace.")
    ] = None
    uid: Annotated[Optional[str], Field(description="UID specifies the resource uid.")] = None


class UpdateRequestSpec(BaseModel):
    context: Annotated[Context, Field(description="Context ...")]
    delete_downstream: Annotated[
        bool,
        Field(
            alias="deleteDownstream",
            description="DeleteDownstream represents whether the downstream needs to be deleted.",
        ),
    ]
    policy: Annotated[str, Field(description="Specifies the name of the policy.")]
    request_type: Annotated[
        Optional[Literal["mutate", "generate"]],
        Field(
            alias="requestType",
            description="Type represents request type for background processing",
        ),
    ] = None
    resource: Annotated[
        ResourceModel1,
        Field(description="ResourceSpec is the information to identify the trigger resource."),
    ]
    rule: Annotated[str, Field(description="Rule is the associate rule name of the current UR.")]
    synchronize: Annotated[
        Optional[bool],
        Field(
            description='Synchronize represents the sync behavior of the corresponding rule\nOptional. Defaults to "false" if not specified.'
        ),
    ] = None


class GeneratedResource(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="APIVersion specifies resource apiVersion."),
    ] = None
    kind: Annotated[Optional[str], Field(description="Kind specifies resource kind.")] = None
    name: Annotated[Optional[str], Field(description="Name specifies the resource name.")] = None
    namespace: Annotated[
        Optional[str], Field(description="Namespace specifies resource namespace.")
    ] = None
    uid: Annotated[Optional[str], Field(description="UID specifies the resource uid.")] = None


class UpdateRequestStatus(BaseModel):
    generated_resources: Annotated[
        Optional[List[GeneratedResource]],
        Field(
            alias="generatedResources",
            description="This will track the resources that are updated by the generate Policy.\nWill be used during clean up resources.",
        ),
    ] = None
    handler: Annotated[Optional[str], Field(description="Deprecated")] = None
    message: Annotated[Optional[str], Field(description="Specifies request status message.")] = None
    retry_count: Annotated[Optional[int], Field(alias="retryCount")] = None
    state: Annotated[str, Field(description="State represents state of the update request.")]


class UpdateRequest(Resource):
    api_version: Annotated[
        Optional[Literal["kyverno.io/v1beta1"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "kyverno.io/v1beta1"
    kind: Annotated[
        Optional[Literal["UpdateRequest"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "UpdateRequest"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[UpdateRequestSpec] = None
    status: Optional[UpdateRequestStatus] = None

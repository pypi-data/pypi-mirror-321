# Generated by cloudcoil-model-codegen v0.0.32
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseModel
from cloudcoil.resources import Resource


class Metadata(BaseModel):
    annotations: Annotated[
        Optional[Dict[str, str]],
        Field(
            description="Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/"
        ),
    ] = None
    labels: Annotated[
        Optional[Dict[str, str]],
        Field(
            description="Map of string keys and values that can be used to organize and categorize\n(scope and select) objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"
        ),
    ] = None


class SourceRef(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="APIVersion of the referent."),
    ] = None
    kind: Annotated[
        Literal["HelmRepository", "GitRepository", "Bucket"],
        Field(description="Kind of the referent."),
    ]
    name: Annotated[str, Field(description="Name of the referent.", max_length=253, min_length=1)]
    namespace: Annotated[
        Optional[str],
        Field(description="Namespace of the referent.", max_length=63, min_length=1),
    ] = None


class SecretRef(BaseModel):
    name: Annotated[str, Field(description="Name of the referent.")]


class Verify(BaseModel):
    provider: Annotated[
        Optional[Literal["cosign", "notation"]],
        Field(description="Provider specifies the technology used to sign the OCI Helm chart."),
    ] = "cosign"
    secret_ref: Annotated[
        Optional[SecretRef],
        Field(
            alias="secretRef",
            description="SecretRef specifies the Kubernetes Secret containing the\ntrusted public keys.",
        ),
    ] = None


class Spec(BaseModel):
    chart: Annotated[
        str,
        Field(
            description="The name or path the Helm chart is available at in the SourceRef.",
            max_length=2048,
            min_length=1,
        ),
    ]
    ignore_missing_values_files: Annotated[
        Optional[bool],
        Field(
            alias="ignoreMissingValuesFiles",
            description="IgnoreMissingValuesFiles controls whether to silently ignore missing values files rather than failing.",
        ),
    ] = None
    interval: Annotated[
        Optional[str],
        Field(
            description="Interval at which to check the v1.Source for updates. Defaults to\n'HelmReleaseSpec.Interval'.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None
    reconcile_strategy: Annotated[
        Optional[Literal["ChartVersion", "Revision"]],
        Field(
            alias="reconcileStrategy",
            description="Determines what enables the creation of a new artifact. Valid values are\n('ChartVersion', 'Revision').\nSee the documentation of the values for an explanation on their behavior.\nDefaults to ChartVersion when omitted.",
        ),
    ] = "ChartVersion"
    source_ref: Annotated[
        SourceRef,
        Field(
            alias="sourceRef",
            description="The name and namespace of the v1.Source the chart is available at.",
        ),
    ]
    values_files: Annotated[
        Optional[List[str]],
        Field(
            alias="valuesFiles",
            description="Alternative list of values files to use as the chart values (values.yaml\nis not included by default), expected to be a relative path in the SourceRef.\nValues files are merged in the order of this list with the last file overriding\nthe first. Ignored when omitted.",
        ),
    ] = None
    verify: Annotated[
        Optional[Verify],
        Field(
            description="Verify contains the secret name containing the trusted public keys\nused to verify the signature and specifies which provider to use to check\nwhether OCI image is authentic.\nThis field is only supported for OCI sources.\nChart dependencies, which are not bundled in the umbrella chart artifact,\nare not verified."
        ),
    ] = None
    version: Annotated[
        Optional[str],
        Field(
            description="Version semver expression, ignored for charts from v1.GitRepository and\nv1beta2.Bucket sources. Defaults to latest when omitted."
        ),
    ] = "*"


class Chart(BaseModel):
    metadata: Annotated[
        Optional[Metadata],
        Field(
            description="ObjectMeta holds the template for metadata like labels and annotations."
        ),
    ] = None
    spec: Annotated[
        Spec,
        Field(description="Spec holds the template for the v1.HelmChartSpec for this HelmRelease."),
    ]


class ChartRef(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="APIVersion of the referent."),
    ] = None
    kind: Annotated[
        Literal["OCIRepository", "HelmChart"],
        Field(description="Kind of the referent."),
    ]
    name: Annotated[str, Field(description="Name of the referent.", max_length=253, min_length=1)]
    namespace: Annotated[
        Optional[str],
        Field(
            description="Namespace of the referent, defaults to the namespace of the Kubernetes\nresource object that contains the reference.",
            max_length=63,
            min_length=1,
        ),
    ] = None


class DependsOn(BaseModel):
    name: Annotated[str, Field(description="Name of the referent.")]
    namespace: Annotated[
        Optional[str],
        Field(
            description="Namespace of the referent, when not specified it acts as LocalObjectReference."
        ),
    ] = None


class Target(BaseModel):
    annotation_selector: Annotated[
        Optional[str],
        Field(
            alias="annotationSelector",
            description="AnnotationSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource annotations.",
        ),
    ] = None
    group: Annotated[
        Optional[str],
        Field(
            description="Group is the API group to select resources from.\nTogether with Version and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md"
        ),
    ] = None
    kind: Annotated[
        Optional[str],
        Field(
            description="Kind of the API Group to select resources from.\nTogether with Group and Version it is capable of unambiguously\nidentifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md"
        ),
    ] = None
    label_selector: Annotated[
        Optional[str],
        Field(
            alias="labelSelector",
            description="LabelSelector is a string that follows the label selection expression\nhttps://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\nIt matches with the resource labels.",
        ),
    ] = None
    name: Annotated[Optional[str], Field(description="Name to match resources with.")] = None
    namespace: Annotated[
        Optional[str], Field(description="Namespace to select resources from.")
    ] = None
    version: Annotated[
        Optional[str],
        Field(
            description="Version of the API Group to select resources from.\nTogether with Group and Kind it is capable of unambiguously identifying and/or selecting resources.\nhttps://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md"
        ),
    ] = None


class Ignore(BaseModel):
    paths: Annotated[
        List[str],
        Field(
            description="Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from\nconsideration in a Kubernetes object."
        ),
    ]
    target: Annotated[
        Optional[Target],
        Field(
            description="Target is a selector for specifying Kubernetes objects to which this\nrule applies.\nIf Target is not set, the Paths will be ignored for all Kubernetes\nobjects within the manifest of the Helm release."
        ),
    ] = None


class DriftDetection(BaseModel):
    ignore: Annotated[
        Optional[List[Ignore]],
        Field(
            description="Ignore contains a list of rules for specifying which changes to ignore\nduring diffing."
        ),
    ] = None
    mode: Annotated[
        Optional[Literal["enabled", "warn", "disabled"]],
        Field(
            description="Mode defines how differences should be handled between the Helm manifest\nand the manifest currently applied to the cluster.\nIf not explicitly set, it defaults to DiffModeDisabled."
        ),
    ] = None


class Remediation(BaseModel):
    ignore_test_failures: Annotated[
        Optional[bool],
        Field(
            alias="ignoreTestFailures",
            description="IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an install action but fail. Defaults to\n'Test.IgnoreFailures'.",
        ),
    ] = None
    remediate_last_failure: Annotated[
        Optional[bool],
        Field(
            alias="remediateLastFailure",
            description="RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false'.",
        ),
    ] = None
    retries: Annotated[
        Optional[int],
        Field(
            description="Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using an uninstall, is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries."
        ),
    ] = None


class Install(BaseModel):
    crds: Annotated[
        Optional[Literal["Skip", "Create", "CreateReplace"]],
        Field(
            description="CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Create` and if omitted\nCRDs are installed but not updated.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are applied (installed) during Helm install action.\nWith this option users can opt in to CRD replace existing CRDs on Helm\ninstall actions, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions."
        ),
    ] = None
    create_namespace: Annotated[
        Optional[bool],
        Field(
            alias="createNamespace",
            description="CreateNamespace tells the Helm install action to create the\nHelmReleaseSpec.TargetNamespace if it does not exist yet.\nOn uninstall, the namespace will not be garbage collected.",
        ),
    ] = None
    disable_hooks: Annotated[
        Optional[bool],
        Field(
            alias="disableHooks",
            description="DisableHooks prevents hooks from running during the Helm install action.",
        ),
    ] = None
    disable_open_api_validation: Annotated[
        Optional[bool],
        Field(
            alias="disableOpenAPIValidation",
            description="DisableOpenAPIValidation prevents the Helm install action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
        ),
    ] = None
    disable_schema_validation: Annotated[
        Optional[bool],
        Field(
            alias="disableSchemaValidation",
            description="DisableSchemaValidation prevents the Helm install action from validating\nthe values against the JSON Schema.",
        ),
    ] = None
    disable_wait: Annotated[
        Optional[bool],
        Field(
            alias="disableWait",
            description="DisableWait disables the waiting for resources to be ready after a Helm\ninstall has been performed.",
        ),
    ] = None
    disable_wait_for_jobs: Annotated[
        Optional[bool],
        Field(
            alias="disableWaitForJobs",
            description="DisableWaitForJobs disables waiting for jobs to complete after a Helm\ninstall has been performed.",
        ),
    ] = None
    remediation: Annotated[
        Optional[Remediation],
        Field(
            description="Remediation holds the remediation configuration for when the Helm install\naction for the HelmRelease fails. The default is to not perform any action."
        ),
    ] = None
    replace: Annotated[
        Optional[bool],
        Field(
            description="Replace tells the Helm install action to re-use the 'ReleaseName', but only\nif that name is a deleted release which remains in the history."
        ),
    ] = None
    skip_cr_ds: Annotated[
        Optional[bool],
        Field(
            alias="skipCRDs",
            description="SkipCRDs tells the Helm install action to not install any CRDs. By default,\nCRDs are installed if not already present.\n\nDeprecated use CRD policy (`crds`) attribute with value `Skip` instead.",
        ),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm install action. Defaults to\n'HelmReleaseSpec.Timeout'.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None


class SecretRefModel(BaseModel):
    key: Annotated[
        Optional[str],
        Field(
            description="Key in the Secret, when not specified an implementation-specific default key is used."
        ),
    ] = None
    name: Annotated[str, Field(description="Name of the Secret.")]


class KubeConfig(BaseModel):
    secret_ref: Annotated[
        SecretRefModel,
        Field(
            alias="secretRef",
            description="SecretRef holds the name of a secret that contains a key with\nthe kubeconfig file as the value. If no key is set, the key will default\nto 'value'.\nIt is recommended that the kubeconfig is self-contained, and the secret\nis regularly updated if credentials such as a cloud-access-token expire.\nCloud specific `cmd-path` auth helpers will not function without adding\nbinaries and credentials to the Pod that is responsible for reconciling\nKubernetes resources.",
        ),
    ]


class Image(BaseModel):
    digest: Annotated[
        Optional[str],
        Field(
            description="Digest is the value used to replace the original image tag.\nIf digest is present NewTag value is ignored."
        ),
    ] = None
    name: Annotated[str, Field(description="Name is a tag-less image name.")]
    new_name: Annotated[
        Optional[str],
        Field(
            alias="newName",
            description="NewName is the value used to replace the original name.",
        ),
    ] = None
    new_tag: Annotated[
        Optional[str],
        Field(
            alias="newTag",
            description="NewTag is the value used to replace the original tag.",
        ),
    ] = None


class Patch(BaseModel):
    patch: Annotated[
        str,
        Field(
            description="Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with\nan array of operation objects."
        ),
    ]
    target: Annotated[
        Optional[Target],
        Field(
            description="Target points to the resources that the patch document should be applied to."
        ),
    ] = None


class Kustomize(BaseModel):
    images: Annotated[
        Optional[List[Image]],
        Field(
            description="Images is a list of (image name, new name, new tag or digest)\nfor changing image names, tags or digests. This can also be achieved with a\npatch, but this operator is simpler to specify."
        ),
    ] = None
    patches: Annotated[
        Optional[List[Patch]],
        Field(
            description="Strategic merge and JSON patches, defined as inline YAML objects,\ncapable of targeting objects based on kind, label and annotation selectors."
        ),
    ] = None


class PostRenderer(BaseModel):
    kustomize: Annotated[
        Optional[Kustomize],
        Field(description="Kustomization to apply as PostRenderer."),
    ] = None


class Rollback(BaseModel):
    cleanup_on_fail: Annotated[
        Optional[bool],
        Field(
            alias="cleanupOnFail",
            description="CleanupOnFail allows deletion of new resources created during the Helm\nrollback action when it fails.",
        ),
    ] = None
    disable_hooks: Annotated[
        Optional[bool],
        Field(
            alias="disableHooks",
            description="DisableHooks prevents hooks from running during the Helm rollback action.",
        ),
    ] = None
    disable_wait: Annotated[
        Optional[bool],
        Field(
            alias="disableWait",
            description="DisableWait disables the waiting for resources to be ready after a Helm\nrollback has been performed.",
        ),
    ] = None
    disable_wait_for_jobs: Annotated[
        Optional[bool],
        Field(
            alias="disableWaitForJobs",
            description="DisableWaitForJobs disables waiting for jobs to complete after a Helm\nrollback has been performed.",
        ),
    ] = None
    force: Annotated[
        Optional[bool],
        Field(description="Force forces resource updates through a replacement strategy."),
    ] = None
    recreate: Annotated[
        Optional[bool],
        Field(description="Recreate performs pod restarts for the resource if applicable."),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm rollback action. Defaults to\n'HelmReleaseSpec.Timeout'.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None


class Filter(BaseModel):
    exclude: Annotated[
        Optional[bool],
        Field(description="Exclude specifies whether the named test should be excluded."),
    ] = None
    name: Annotated[
        str,
        Field(description="Name is the name of the test.", max_length=253, min_length=1),
    ]


class Test(BaseModel):
    enable: Annotated[
        Optional[bool],
        Field(
            description="Enable enables Helm test actions for this HelmRelease after an Helm install\nor upgrade action has been performed."
        ),
    ] = None
    filters: Annotated[
        Optional[List[Filter]],
        Field(description="Filters is a list of tests to run or exclude from running."),
    ] = None
    ignore_failures: Annotated[
        Optional[bool],
        Field(
            alias="ignoreFailures",
            description="IgnoreFailures tells the controller to skip remediation when the Helm tests\nare run but fail. Can be overwritten for tests run after install or upgrade\nactions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.",
        ),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout is the time to wait for any individual Kubernetes operation during\nthe performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None


class Uninstall(BaseModel):
    deletion_propagation: Annotated[
        Optional[Literal["background", "foreground", "orphan"]],
        Field(
            alias="deletionPropagation",
            description="DeletionPropagation specifies the deletion propagation policy when\na Helm uninstall is performed.",
        ),
    ] = "background"
    disable_hooks: Annotated[
        Optional[bool],
        Field(
            alias="disableHooks",
            description="DisableHooks prevents hooks from running during the Helm rollback action.",
        ),
    ] = None
    disable_wait: Annotated[
        Optional[bool],
        Field(
            alias="disableWait",
            description="DisableWait disables waiting for all the resources to be deleted after\na Helm uninstall is performed.",
        ),
    ] = None
    keep_history: Annotated[
        Optional[bool],
        Field(
            alias="keepHistory",
            description="KeepHistory tells Helm to remove all associated resources and mark the\nrelease as deleted, but retain the release history.",
        ),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm uninstall action. Defaults\nto 'HelmReleaseSpec.Timeout'.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None


class RemediationModel(BaseModel):
    ignore_test_failures: Annotated[
        Optional[bool],
        Field(
            alias="ignoreTestFailures",
            description="IgnoreTestFailures tells the controller to skip remediation when the Helm\ntests are run after an upgrade action but fail.\nDefaults to 'Test.IgnoreFailures'.",
        ),
    ] = None
    remediate_last_failure: Annotated[
        Optional[bool],
        Field(
            alias="remediateLastFailure",
            description="RemediateLastFailure tells the controller to remediate the last failure, when\nno retries remain. Defaults to 'false' unless 'Retries' is greater than 0.",
        ),
    ] = None
    retries: Annotated[
        Optional[int],
        Field(
            description="Retries is the number of retries that should be attempted on failures before\nbailing. Remediation, using 'Strategy', is performed between each attempt.\nDefaults to '0', a negative integer equals to unlimited retries."
        ),
    ] = None
    strategy: Annotated[
        Optional[Literal["rollback", "uninstall"]],
        Field(description="Strategy to use for failure remediation. Defaults to 'rollback'."),
    ] = None


class Upgrade(BaseModel):
    cleanup_on_fail: Annotated[
        Optional[bool],
        Field(
            alias="cleanupOnFail",
            description="CleanupOnFail allows deletion of new resources created during the Helm\nupgrade action when it fails.",
        ),
    ] = None
    crds: Annotated[
        Optional[Literal["Skip", "Create", "CreateReplace"]],
        Field(
            description="CRDs upgrade CRDs from the Helm Chart's crds directory according\nto the CRD upgrade policy provided here. Valid values are `Skip`,\n`Create` or `CreateReplace`. Default is `Skip` and if omitted\nCRDs are neither installed nor upgraded.\n\nSkip: do neither install nor replace (update) any CRDs.\n\nCreate: new CRDs are created, existing CRDs are neither updated nor deleted.\n\nCreateReplace: new CRDs are created, existing CRDs are updated (replaced)\nbut not deleted.\n\nBy default, CRDs are not applied during Helm upgrade action. With this\noption users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.\nhttps://helm.sh/docs/chart_best_practices/custom_resource_definitions."
        ),
    ] = None
    disable_hooks: Annotated[
        Optional[bool],
        Field(
            alias="disableHooks",
            description="DisableHooks prevents hooks from running during the Helm upgrade action.",
        ),
    ] = None
    disable_open_api_validation: Annotated[
        Optional[bool],
        Field(
            alias="disableOpenAPIValidation",
            description="DisableOpenAPIValidation prevents the Helm upgrade action from validating\nrendered templates against the Kubernetes OpenAPI Schema.",
        ),
    ] = None
    disable_schema_validation: Annotated[
        Optional[bool],
        Field(
            alias="disableSchemaValidation",
            description="DisableSchemaValidation prevents the Helm upgrade action from validating\nthe values against the JSON Schema.",
        ),
    ] = None
    disable_wait: Annotated[
        Optional[bool],
        Field(
            alias="disableWait",
            description="DisableWait disables the waiting for resources to be ready after a Helm\nupgrade has been performed.",
        ),
    ] = None
    disable_wait_for_jobs: Annotated[
        Optional[bool],
        Field(
            alias="disableWaitForJobs",
            description="DisableWaitForJobs disables waiting for jobs to complete after a Helm\nupgrade has been performed.",
        ),
    ] = None
    force: Annotated[
        Optional[bool],
        Field(description="Force forces resource updates through a replacement strategy."),
    ] = None
    preserve_values: Annotated[
        Optional[bool],
        Field(
            alias="preserveValues",
            description="PreserveValues will make Helm reuse the last release's values and merge in\noverrides from 'Values'. Setting this flag makes the HelmRelease\nnon-declarative.",
        ),
    ] = None
    remediation: Annotated[
        Optional[RemediationModel],
        Field(
            description="Remediation holds the remediation configuration for when the Helm upgrade\naction for the HelmRelease fails. The default is to not perform any action."
        ),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout is the time to wait for any individual Kubernetes operation (like\nJobs for hooks) during the performance of a Helm upgrade action. Defaults to\n'HelmReleaseSpec.Timeout'.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None


class ValuesFrom(BaseModel):
    kind: Annotated[
        Literal["Secret", "ConfigMap"],
        Field(description="Kind of the values referent, valid values are ('Secret', 'ConfigMap')."),
    ]
    name: Annotated[
        str,
        Field(
            description="Name of the values referent. Should reside in the same namespace as the\nreferring resource.",
            max_length=253,
            min_length=1,
        ),
    ]
    optional: Annotated[
        Optional[bool],
        Field(
            description="Optional marks this ValuesReference as optional. When set, a not found error\nfor the values reference is ignored, but any ValuesKey, TargetPath or\ntransient error will still result in a reconciliation failure."
        ),
    ] = None
    target_path: Annotated[
        Optional[str],
        Field(
            alias="targetPath",
            description="TargetPath is the YAML dot notation path the value should be merged at. When\nset, the ValuesKey is expected to be a single flat value. Defaults to 'None',\nwhich results in the values getting merged at the root.",
            max_length=250,
            pattern="^([a-zA-Z0-9_\\-.\\\\\\/]|\\[[0-9]{1,5}\\])+$",
        ),
    ] = None
    values_key: Annotated[
        Optional[str],
        Field(
            alias="valuesKey",
            description="ValuesKey is the data key where the values.yaml or a specific value can be\nfound at. Defaults to 'values.yaml'.",
            max_length=253,
            pattern="^[\\-._a-zA-Z0-9]+$",
        ),
    ] = None


class HelmReleaseSpec(BaseModel):
    chart: Annotated[
        Optional[Chart],
        Field(
            description="Chart defines the template of the v1.HelmChart that should be created\nfor this HelmRelease."
        ),
    ] = None
    chart_ref: Annotated[
        Optional[ChartRef],
        Field(
            alias="chartRef",
            description="ChartRef holds a reference to a source controller resource containing the\nHelm chart artifact.",
        ),
    ] = None
    depends_on: Annotated[
        Optional[List[DependsOn]],
        Field(
            alias="dependsOn",
            description="DependsOn may contain a meta.NamespacedObjectReference slice with\nreferences to HelmRelease resources that must be ready before this HelmRelease\ncan be reconciled.",
        ),
    ] = None
    drift_detection: Annotated[
        Optional[DriftDetection],
        Field(
            alias="driftDetection",
            description="DriftDetection holds the configuration for detecting and handling\ndifferences between the manifest in the Helm storage and the resources\ncurrently existing in the cluster.",
        ),
    ] = None
    install: Annotated[
        Optional[Install],
        Field(
            description="Install holds the configuration for Helm install actions for this HelmRelease."
        ),
    ] = None
    interval: Annotated[
        str,
        Field(
            description="Interval at which to reconcile the Helm release.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ]
    kube_config: Annotated[
        Optional[KubeConfig],
        Field(
            alias="kubeConfig",
            description="KubeConfig for reconciling the HelmRelease on a remote cluster.\nWhen used in combination with HelmReleaseSpec.ServiceAccountName,\nforces the controller to act on behalf of that Service Account at the\ntarget cluster.\nIf the --default-service-account flag is set, its value will be used as\na controller level fallback for when HelmReleaseSpec.ServiceAccountName\nis empty.",
        ),
    ] = None
    max_history: Annotated[
        Optional[int],
        Field(
            alias="maxHistory",
            description="MaxHistory is the number of revisions saved by Helm for this HelmRelease.\nUse '0' for an unlimited number of revisions; defaults to '5'.",
        ),
    ] = None
    persistent_client: Annotated[
        Optional[bool],
        Field(
            alias="persistentClient",
            description="PersistentClient tells the controller to use a persistent Kubernetes\nclient for this release. When enabled, the client will be reused for the\nduration of the reconciliation, instead of being created and destroyed\nfor each (step of a) Helm action.\n\nThis can improve performance, but may cause issues with some Helm charts\nthat for example do create Custom Resource Definitions during installation\noutside Helm's CRD lifecycle hooks, which are then not observed to be\navailable by e.g. post-install hooks.\n\nIf not set, it defaults to true.",
        ),
    ] = None
    post_renderers: Annotated[
        Optional[List[PostRenderer]],
        Field(
            alias="postRenderers",
            description="PostRenderers holds an array of Helm PostRenderers, which will be applied in order\nof their definition.",
        ),
    ] = None
    release_name: Annotated[
        Optional[str],
        Field(
            alias="releaseName",
            description="ReleaseName used for the Helm release. Defaults to a composition of\n'[TargetNamespace-]Name'.",
            max_length=53,
            min_length=1,
        ),
    ] = None
    rollback: Annotated[
        Optional[Rollback],
        Field(
            description="Rollback holds the configuration for Helm rollback actions for this HelmRelease."
        ),
    ] = None
    service_account_name: Annotated[
        Optional[str],
        Field(
            alias="serviceAccountName",
            description="The name of the Kubernetes service account to impersonate\nwhen reconciling this HelmRelease.",
            max_length=253,
            min_length=1,
        ),
    ] = None
    storage_namespace: Annotated[
        Optional[str],
        Field(
            alias="storageNamespace",
            description="StorageNamespace used for the Helm storage.\nDefaults to the namespace of the HelmRelease.",
            max_length=63,
            min_length=1,
        ),
    ] = None
    suspend: Annotated[
        Optional[bool],
        Field(
            description="Suspend tells the controller to suspend reconciliation for this HelmRelease,\nit does not apply to already started reconciliations. Defaults to false."
        ),
    ] = None
    target_namespace: Annotated[
        Optional[str],
        Field(
            alias="targetNamespace",
            description="TargetNamespace to target when performing operations for the HelmRelease.\nDefaults to the namespace of the HelmRelease.",
            max_length=63,
            min_length=1,
        ),
    ] = None
    test: Annotated[
        Optional[Test],
        Field(
            description="Test holds the configuration for Helm test actions for this HelmRelease."
        ),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout is the time to wait for any individual Kubernetes operation (like Jobs\nfor hooks) during the performance of a Helm action. Defaults to '5m0s'.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None
    uninstall: Annotated[
        Optional[Uninstall],
        Field(
            description="Uninstall holds the configuration for Helm uninstall actions for this HelmRelease."
        ),
    ] = None
    upgrade: Annotated[
        Optional[Upgrade],
        Field(
            description="Upgrade holds the configuration for Helm upgrade actions for this HelmRelease."
        ),
    ] = None
    values: Annotated[
        Optional[Any],
        Field(description="Values holds the values for this Helm release."),
    ] = None
    values_from: Annotated[
        Optional[List[ValuesFrom]],
        Field(
            alias="valuesFrom",
            description="ValuesFrom holds references to resources containing Helm values for this HelmRelease,\nand information about how they should be merged.",
        ),
    ] = None


class Condition(BaseModel):
    last_transition_time: Annotated[
        datetime,
        Field(
            alias="lastTransitionTime",
            description="lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
        ),
    ]
    message: Annotated[
        str,
        Field(
            description="message is a human readable message indicating details about the transition.\nThis may be an empty string.",
            max_length=32768,
        ),
    ]
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
            ge=0,
        ),
    ] = None
    reason: Annotated[
        str,
        Field(
            description="reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    status: Annotated[
        Literal["True", "False", "Unknown"],
        Field(description="status of the condition, one of True, False, Unknown."),
    ]
    type: Annotated[
        str,
        Field(
            description="type of condition in CamelCase or in foo.example.com/CamelCase.",
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]


class TestHooks(BaseModel):
    last_completed: Annotated[
        Optional[datetime],
        Field(
            alias="lastCompleted",
            description="LastCompleted is the time the test hook last completed.",
        ),
    ] = None
    last_started: Annotated[
        Optional[datetime],
        Field(
            alias="lastStarted",
            description="LastStarted is the time the test hook was last started.",
        ),
    ] = None
    phase: Annotated[
        Optional[str], Field(description="Phase the test hook was observed to be in.")
    ] = None


class History(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(
            alias="apiVersion",
            description="APIVersion is the API version of the Snapshot.\nProvisional: when the calculation method of the Digest field is changed,\nthis field will be used to distinguish between the old and new methods.",
        ),
    ] = None
    app_version: Annotated[
        Optional[str],
        Field(
            alias="appVersion",
            description="AppVersion is the chart app version of the release object in storage.",
        ),
    ] = None
    chart_name: Annotated[
        str,
        Field(
            alias="chartName",
            description="ChartName is the chart name of the release object in storage.",
        ),
    ]
    chart_version: Annotated[
        str,
        Field(
            alias="chartVersion",
            description="ChartVersion is the chart version of the release object in\nstorage.",
        ),
    ]
    config_digest: Annotated[
        str,
        Field(
            alias="configDigest",
            description='ConfigDigest is the checksum of the config (better known as\n"values") of the release object in storage.\nIt has the format of `<algo>:<checksum>`.',
        ),
    ]
    deleted: Annotated[
        Optional[datetime],
        Field(description="Deleted is when the release was deleted."),
    ] = None
    digest: Annotated[
        str,
        Field(
            description="Digest is the checksum of the release object in storage.\nIt has the format of `<algo>:<checksum>`."
        ),
    ]
    first_deployed: Annotated[
        datetime,
        Field(
            alias="firstDeployed",
            description="FirstDeployed is when the release was first deployed.",
        ),
    ]
    last_deployed: Annotated[
        datetime,
        Field(
            alias="lastDeployed",
            description="LastDeployed is when the release was last deployed.",
        ),
    ]
    name: Annotated[str, Field(description="Name is the name of the release.")]
    namespace: Annotated[
        str, Field(description="Namespace is the namespace the release is deployed to.")
    ]
    oci_digest: Annotated[
        Optional[str],
        Field(
            alias="ociDigest",
            description="OCIDigest is the digest of the OCI artifact associated with the release.",
        ),
    ] = None
    status: Annotated[str, Field(description="Status is the current state of the release.")]
    test_hooks: Annotated[
        Optional[Dict[str, TestHooks]],
        Field(
            alias="testHooks",
            description="TestHooks is the list of test hooks for the release as observed to be\nrun by the controller.",
        ),
    ] = None
    version: Annotated[
        int,
        Field(description="Version is the version of the release object in storage."),
    ]


class HelmReleaseStatus(BaseModel):
    conditions: Annotated[
        Optional[List[Condition]],
        Field(description="Conditions holds the conditions for the HelmRelease."),
    ] = None
    failures: Annotated[
        Optional[int],
        Field(
            description="Failures is the reconciliation failure count against the latest desired\nstate. It is reset after a successful reconciliation."
        ),
    ] = None
    helm_chart: Annotated[
        Optional[str],
        Field(
            alias="helmChart",
            description="HelmChart is the namespaced name of the HelmChart resource created by\nthe controller for the HelmRelease.",
        ),
    ] = None
    history: Annotated[
        Optional[List[History]],
        Field(
            description="History holds the history of Helm releases performed for this HelmRelease\nup to the last successfully completed release."
        ),
    ] = None
    install_failures: Annotated[
        Optional[int],
        Field(
            alias="installFailures",
            description="InstallFailures is the install failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
        ),
    ] = None
    last_attempted_config_digest: Annotated[
        Optional[str],
        Field(
            alias="lastAttemptedConfigDigest",
            description='LastAttemptedConfigDigest is the digest for the config (better known as\n"values") of the last reconciliation attempt.',
        ),
    ] = None
    last_attempted_generation: Annotated[
        Optional[int],
        Field(
            alias="lastAttemptedGeneration",
            description="LastAttemptedGeneration is the last generation the controller attempted\nto reconcile.",
        ),
    ] = None
    last_attempted_release_action: Annotated[
        Optional[Literal["install", "upgrade"]],
        Field(
            alias="lastAttemptedReleaseAction",
            description="LastAttemptedReleaseAction is the last release action performed for this\nHelmRelease. It is used to determine the active remediation strategy.",
        ),
    ] = None
    last_attempted_revision: Annotated[
        Optional[str],
        Field(
            alias="lastAttemptedRevision",
            description='LastAttemptedRevision is the Source revision of the last reconciliation\nattempt. For OCIRepository  sources, the 12 first characters of the digest are\nappended to the chart version e.g. "1.2.3+1234567890ab".',
        ),
    ] = None
    last_attempted_revision_digest: Annotated[
        Optional[str],
        Field(
            alias="lastAttemptedRevisionDigest",
            description="LastAttemptedRevisionDigest is the digest of the last reconciliation attempt.\nThis is only set for OCIRepository sources.",
        ),
    ] = None
    last_attempted_values_checksum: Annotated[
        Optional[str],
        Field(
            alias="lastAttemptedValuesChecksum",
            description="LastAttemptedValuesChecksum is the SHA1 checksum for the values of the last\nreconciliation attempt.\nDeprecated: Use LastAttemptedConfigDigest instead.",
        ),
    ] = None
    last_handled_force_at: Annotated[
        Optional[str],
        Field(
            alias="lastHandledForceAt",
            description="LastHandledForceAt holds the value of the most recent force request\nvalue, so a change of the annotation value can be detected.",
        ),
    ] = None
    last_handled_reconcile_at: Annotated[
        Optional[str],
        Field(
            alias="lastHandledReconcileAt",
            description="LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
        ),
    ] = None
    last_handled_reset_at: Annotated[
        Optional[str],
        Field(
            alias="lastHandledResetAt",
            description="LastHandledResetAt holds the value of the most recent reset request\nvalue, so a change of the annotation value can be detected.",
        ),
    ] = None
    last_release_revision: Annotated[
        Optional[int],
        Field(
            alias="lastReleaseRevision",
            description="LastReleaseRevision is the revision of the last successful Helm release.\nDeprecated: Use History instead.",
        ),
    ] = None
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="ObservedGeneration is the last observed generation.",
        ),
    ] = None
    observed_post_renderers_digest: Annotated[
        Optional[str],
        Field(
            alias="observedPostRenderersDigest",
            description="ObservedPostRenderersDigest is the digest for the post-renderers of\nthe last successful reconciliation attempt.",
        ),
    ] = None
    storage_namespace: Annotated[
        Optional[str],
        Field(
            alias="storageNamespace",
            description="StorageNamespace is the namespace of the Helm release storage for the\ncurrent release.",
            max_length=63,
            min_length=1,
        ),
    ] = None
    upgrade_failures: Annotated[
        Optional[int],
        Field(
            alias="upgradeFailures",
            description="UpgradeFailures is the upgrade failure count against the latest desired\nstate. It is reset after a successful reconciliation.",
        ),
    ] = None


class HelmRelease(Resource):
    api_version: Annotated[
        Optional[Literal["helm.toolkit.fluxcd.io/v2"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "helm.toolkit.fluxcd.io/v2"
    kind: Annotated[
        Optional[Literal["HelmRelease"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "HelmRelease"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[HelmReleaseSpec] = None
    status: Optional[HelmReleaseStatus] = None

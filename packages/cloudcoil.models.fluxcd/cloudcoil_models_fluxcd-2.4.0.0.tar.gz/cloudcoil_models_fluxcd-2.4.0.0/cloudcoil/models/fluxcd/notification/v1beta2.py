# Generated by cloudcoil-model-codegen v0.0.32
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Dict, List, Literal, Optional

from pydantic import Field

from cloudcoil import apimachinery
from cloudcoil.pydantic import BaseModel
from cloudcoil.resources import Resource


class EventSource(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="API version of the referent"),
    ] = None
    kind: Annotated[
        Literal[
            "Bucket",
            "GitRepository",
            "Kustomization",
            "HelmRelease",
            "HelmChart",
            "HelmRepository",
            "ImageRepository",
            "ImagePolicy",
            "ImageUpdateAutomation",
            "OCIRepository",
        ],
        Field(description="Kind of the referent"),
    ]
    match_labels: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="matchLabels",
            description='MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.\nMatchLabels requires the name to be set to `*`.',
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name of the referent\nIf multiple resources are targeted `*` may be set.",
            max_length=53,
            min_length=1,
        ),
    ]
    namespace: Annotated[
        Optional[str],
        Field(description="Namespace of the referent", max_length=53, min_length=1),
    ] = None


class ProviderRef(BaseModel):
    name: Annotated[str, Field(description="Name of the referent.")]


class AlertSpec(BaseModel):
    event_metadata: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="eventMetadata",
            description="EventMetadata is an optional field for adding metadata to events dispatched by the\ncontroller. This can be used for enhancing the context of the event. If a field\nwould override one already present on the original event as generated by the emitter,\nthen the override doesn't happen, i.e. the original value is preserved, and an info\nlog is printed.",
        ),
    ] = None
    event_severity: Annotated[
        Optional[Literal["info", "error"]],
        Field(
            alias="eventSeverity",
            description="EventSeverity specifies how to filter events based on severity.\nIf set to 'info' no events will be filtered.",
        ),
    ] = "info"
    event_sources: Annotated[
        List[EventSource],
        Field(
            alias="eventSources",
            description="EventSources specifies how to filter events based\non the involved object kind, name and namespace.",
        ),
    ]
    exclusion_list: Annotated[
        Optional[List[str]],
        Field(
            alias="exclusionList",
            description="ExclusionList specifies a list of Golang regular expressions\nto be used for excluding messages.",
        ),
    ] = None
    inclusion_list: Annotated[
        Optional[List[str]],
        Field(
            alias="inclusionList",
            description="InclusionList specifies a list of Golang regular expressions\nto be used for including messages.",
        ),
    ] = None
    provider_ref: Annotated[
        ProviderRef,
        Field(
            alias="providerRef",
            description="ProviderRef specifies which Provider this Alert should use.",
        ),
    ]
    summary: Annotated[
        Optional[str],
        Field(
            description="Summary holds a short description of the impact and affected cluster.",
            max_length=255,
        ),
    ] = None
    suspend: Annotated[
        Optional[bool],
        Field(
            description="Suspend tells the controller to suspend subsequent\nevents handling for this Alert."
        ),
    ] = None


class Condition(BaseModel):
    last_transition_time: Annotated[
        datetime,
        Field(
            alias="lastTransitionTime",
            description="lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
        ),
    ]
    message: Annotated[
        str,
        Field(
            description="message is a human readable message indicating details about the transition.\nThis may be an empty string.",
            max_length=32768,
        ),
    ]
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
            ge=0,
        ),
    ] = None
    reason: Annotated[
        str,
        Field(
            description="reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
            max_length=1024,
            min_length=1,
            pattern="^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
        ),
    ]
    status: Annotated[
        Literal["True", "False", "Unknown"],
        Field(description="status of the condition, one of True, False, Unknown."),
    ]
    type: Annotated[
        str,
        Field(
            description="type of condition in CamelCase or in foo.example.com/CamelCase.",
            max_length=316,
            pattern="^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
        ),
    ]


class AlertStatus(BaseModel):
    conditions: Annotated[
        Optional[List[Condition]],
        Field(description="Conditions holds the conditions for the Alert."),
    ] = None
    last_handled_reconcile_at: Annotated[
        Optional[str],
        Field(
            alias="lastHandledReconcileAt",
            description="LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
        ),
    ] = None
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="ObservedGeneration is the last observed generation.",
        ),
    ] = None


class CertSecretRef(BaseModel):
    name: Annotated[str, Field(description="Name of the referent.")]


class SecretRef(BaseModel):
    name: Annotated[str, Field(description="Name of the referent.")]


class ProviderSpec(BaseModel):
    address: Annotated[
        Optional[str],
        Field(
            description="Address specifies the endpoint, in a generic sense, to where alerts are sent.\nWhat kind of endpoint depends on the specific Provider type being used.\nFor the generic Provider, for example, this is an HTTP/S address.\nFor other Provider types this could be a project ID or a namespace.",
            max_length=2048,
        ),
    ] = None
    cert_secret_ref: Annotated[
        Optional[CertSecretRef],
        Field(
            alias="certSecretRef",
            description="CertSecretRef specifies the Secret containing\na PEM-encoded CA certificate (in the `ca.crt` key).\n\nNote: Support for the `caFile` key has\nbeen deprecated.",
        ),
    ] = None
    channel: Annotated[
        Optional[str],
        Field(
            description="Channel specifies the destination channel where events should be posted.",
            max_length=2048,
        ),
    ] = None
    interval: Annotated[
        Optional[str],
        Field(
            description="Interval at which to reconcile the Provider with its Secret references.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None
    proxy: Annotated[
        Optional[str],
        Field(
            description="Proxy the HTTP/S address of the proxy server.",
            max_length=2048,
            pattern="^(http|https)://.*$",
        ),
    ] = None
    secret_ref: Annotated[
        Optional[SecretRef],
        Field(
            alias="secretRef",
            description="SecretRef specifies the Secret containing the authentication\ncredentials for this Provider.",
        ),
    ] = None
    suspend: Annotated[
        Optional[bool],
        Field(
            description="Suspend tells the controller to suspend subsequent\nevents handling for this Provider."
        ),
    ] = None
    timeout: Annotated[
        Optional[str],
        Field(
            description="Timeout for sending alerts to the Provider.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m))+$",
        ),
    ] = None
    type: Annotated[
        Literal[
            "slack",
            "discord",
            "msteams",
            "rocket",
            "generic",
            "generic-hmac",
            "github",
            "gitlab",
            "gitea",
            "bitbucketserver",
            "bitbucket",
            "azuredevops",
            "googlechat",
            "googlepubsub",
            "webex",
            "sentry",
            "azureeventhub",
            "telegram",
            "lark",
            "matrix",
            "opsgenie",
            "alertmanager",
            "grafana",
            "githubdispatch",
            "pagerduty",
            "datadog",
        ],
        Field(description="Type specifies which Provider implementation to use."),
    ]
    username: Annotated[
        Optional[str],
        Field(
            description="Username specifies the name under which events are posted.",
            max_length=2048,
        ),
    ] = None


class ProviderStatus(BaseModel):
    conditions: Annotated[
        Optional[List[Condition]],
        Field(description="Conditions holds the conditions for the Provider."),
    ] = None
    last_handled_reconcile_at: Annotated[
        Optional[str],
        Field(
            alias="lastHandledReconcileAt",
            description="LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
        ),
    ] = None
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="ObservedGeneration is the last reconciled generation.",
        ),
    ] = None


class ResourceModel(BaseModel):
    api_version: Annotated[
        Optional[str],
        Field(alias="apiVersion", description="API version of the referent"),
    ] = None
    kind: Annotated[
        Literal[
            "Bucket",
            "GitRepository",
            "Kustomization",
            "HelmRelease",
            "HelmChart",
            "HelmRepository",
            "ImageRepository",
            "ImagePolicy",
            "ImageUpdateAutomation",
            "OCIRepository",
        ],
        Field(description="Kind of the referent"),
    ]
    match_labels: Annotated[
        Optional[Dict[str, str]],
        Field(
            alias="matchLabels",
            description='MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is "key", the\noperator is "In", and the values array contains only "value". The requirements are ANDed.\nMatchLabels requires the name to be set to `*`.',
        ),
    ] = None
    name: Annotated[
        str,
        Field(
            description="Name of the referent\nIf multiple resources are targeted `*` may be set.",
            max_length=53,
            min_length=1,
        ),
    ]
    namespace: Annotated[
        Optional[str],
        Field(description="Namespace of the referent", max_length=53, min_length=1),
    ] = None


class ReceiverSpec(BaseModel):
    events: Annotated[
        Optional[List[str]],
        Field(
            description="Events specifies the list of event types to handle,\ne.g. 'push' for GitHub or 'Push Hook' for GitLab."
        ),
    ] = None
    interval: Annotated[
        Optional[str],
        Field(
            description="Interval at which to reconcile the Receiver with its Secret references.",
            pattern="^([0-9]+(\\.[0-9]+)?(ms|s|m|h))+$",
        ),
    ] = None
    resources: Annotated[
        List[ResourceModel],
        Field(description="A list of resources to be notified about changes."),
    ]
    secret_ref: Annotated[
        SecretRef,
        Field(
            alias="secretRef",
            description="SecretRef specifies the Secret containing the token used\nto validate the payload authenticity.",
        ),
    ]
    suspend: Annotated[
        Optional[bool],
        Field(
            description="Suspend tells the controller to suspend subsequent\nevents handling for this receiver."
        ),
    ] = None
    type: Annotated[
        Literal[
            "generic",
            "generic-hmac",
            "github",
            "gitlab",
            "bitbucket",
            "harbor",
            "dockerhub",
            "quay",
            "gcr",
            "nexus",
            "acr",
        ],
        Field(
            description="Type of webhook sender, used to determine\nthe validation procedure and payload deserialization."
        ),
    ]


class ReceiverStatus(BaseModel):
    conditions: Annotated[
        Optional[List[Condition]],
        Field(description="Conditions holds the conditions for the Receiver."),
    ] = None
    last_handled_reconcile_at: Annotated[
        Optional[str],
        Field(
            alias="lastHandledReconcileAt",
            description="LastHandledReconcileAt holds the value of the most recent\nreconcile request value, so a change of the annotation value\ncan be detected.",
        ),
    ] = None
    observed_generation: Annotated[
        Optional[int],
        Field(
            alias="observedGeneration",
            description="ObservedGeneration is the last observed generation of the Receiver object.",
        ),
    ] = None
    url: Annotated[
        Optional[str],
        Field(
            description="URL is the generated incoming webhook address in the format\nof '/hook/sha256sum(token+name+namespace)'.\nDeprecated: Replaced by WebhookPath."
        ),
    ] = None
    webhook_path: Annotated[
        Optional[str],
        Field(
            alias="webhookPath",
            description="WebhookPath is the generated incoming webhook address in the format\nof '/hook/sha256sum(token+name+namespace)'.",
        ),
    ] = None


class Alert(Resource):
    api_version: Annotated[
        Optional[Literal["notification.toolkit.fluxcd.io/v1beta2"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "notification.toolkit.fluxcd.io/v1beta2"
    kind: Annotated[
        Optional[Literal["Alert"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Alert"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[AlertSpec] = None
    status: Optional[AlertStatus] = None


class Provider(Resource):
    api_version: Annotated[
        Optional[Literal["notification.toolkit.fluxcd.io/v1beta2"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "notification.toolkit.fluxcd.io/v1beta2"
    kind: Annotated[
        Optional[Literal["Provider"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Provider"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[ProviderSpec] = None
    status: Optional[ProviderStatus] = None


class Receiver(Resource):
    api_version: Annotated[
        Optional[Literal["notification.toolkit.fluxcd.io/v1beta2"]],
        Field(
            alias="apiVersion",
            description="APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
        ),
    ] = "notification.toolkit.fluxcd.io/v1beta2"
    kind: Annotated[
        Optional[Literal["Receiver"]],
        Field(
            description="Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        ),
    ] = "Receiver"
    metadata: Optional[apimachinery.ObjectMeta] = None
    spec: Optional[ReceiverSpec] = None
    status: Optional[ReceiverStatus] = None

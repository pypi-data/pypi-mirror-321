# coding: utf-8

"""
    ColiVara

    Colivara is a suite of services that allows you to store, search, and retrieve documents based on their visual embeddings.      It is a web-first implementation of the ColPali paper using ColQwen2 as backend model. It works exacly like RAG from the end-user standpoint - but using vision models instead of chunking and text-processing for documents.

    The version of the OpenAPI document: 1.0.0
    Contact: founders@colivara.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentInPatch(BaseModel):
    """
    DocumentInPatch
    """ # noqa: E501
    name: Optional[StrictStr] = None
    metadata: Optional[Dict[str, Any]] = None
    collection_name: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    var_base64: Optional[StrictStr] = Field(default=None, alias="base64")
    use_proxy: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["name", "metadata", "collection_name", "url", "base64", "use_proxy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentInPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if collection_name (nullable) is None
        # and model_fields_set contains the field
        if self.collection_name is None and "collection_name" in self.model_fields_set:
            _dict['collection_name'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if var_base64 (nullable) is None
        # and model_fields_set contains the field
        if self.var_base64 is None and "var_base64" in self.model_fields_set:
            _dict['base64'] = None

        # set to None if use_proxy (nullable) is None
        # and model_fields_set contains the field
        if self.use_proxy is None and "use_proxy" in self.model_fields_set:
            _dict['use_proxy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentInPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "metadata": obj.get("metadata"),
            "collection_name": obj.get("collection_name"),
            "url": obj.get("url"),
            "base64": obj.get("base64"),
            "use_proxy": obj.get("use_proxy")
        })
        return _obj



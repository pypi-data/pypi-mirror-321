# coding: utf-8

"""
    ColiVara

    Colivara is a suite of services that allows you to store, search, and retrieve documents based on their visual embeddings.      It is a web-first implementation of the ColPali paper using ColQwen2 as backend model. It works exacly like RAG from the end-user standpoint - but using vision models instead of chunking and text-processing for documents.

    The version of the OpenAPI document: 1.0.0
    Contact: founders@colivara.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PageOutQuery(BaseModel):
    """
    PageOutQuery
    """ # noqa: E501
    collection_name: StrictStr
    collection_id: StrictInt
    collection_metadata: Optional[Dict[str, Any]] = None
    document_name: StrictStr
    document_id: StrictInt
    document_metadata: Optional[Dict[str, Any]] = None
    page_number: StrictInt
    raw_score: Union[StrictFloat, StrictInt]
    normalized_score: Union[StrictFloat, StrictInt]
    img_base64: StrictStr
    __properties: ClassVar[List[str]] = ["collection_name", "collection_id", "collection_metadata", "document_name", "document_id", "document_metadata", "page_number", "raw_score", "normalized_score", "img_base64"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PageOutQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if collection_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.collection_metadata is None and "collection_metadata" in self.model_fields_set:
            _dict['collection_metadata'] = None

        # set to None if document_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.document_metadata is None and "document_metadata" in self.model_fields_set:
            _dict['document_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PageOutQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collection_name": obj.get("collection_name"),
            "collection_id": obj.get("collection_id"),
            "collection_metadata": obj.get("collection_metadata"),
            "document_name": obj.get("document_name"),
            "document_id": obj.get("document_id"),
            "document_metadata": obj.get("document_metadata"),
            "page_number": obj.get("page_number"),
            "raw_score": obj.get("raw_score"),
            "normalized_score": obj.get("normalized_score"),
            "img_base64": obj.get("img_base64")
        })
        return _obj



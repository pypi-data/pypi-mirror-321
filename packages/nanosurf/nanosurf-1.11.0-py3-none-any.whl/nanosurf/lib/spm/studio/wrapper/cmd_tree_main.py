# studio_wrapper.py

import enum
from typing import Any
import nanosurf.lib.spm.studio.wrapper as wrap

g_cmd_tree_hash = '62025c507676fc0321b6e801ffbe9f60'
g_compiler_version = '2.4'

class RootVersion(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.version'

    def git_branch(self, *args, **kwargs) -> Any:
        return self._context.call('root.version.git_branch', *args, **kwargs)

    def name(self, *args, **kwargs) -> Any:
        return self._context.call('root.version.name', *args, **kwargs)

    def major(self, *args, **kwargs) -> Any:
        return self._context.call('root.version.major', *args, **kwargs)

    def minor(self, *args, **kwargs) -> Any:
        return self._context.call('root.version.minor', *args, **kwargs)

    def git_commit_hash_short(self, *args, **kwargs) -> Any:
        return self._context.call('root.version.git_commit_hash_short', *args, **kwargs)

    def compile_date_time(self, *args, **kwargs) -> Any:
        return self._context.call('root.version.compile_date_time', *args, **kwargs)

    def full(self, *args, **kwargs) -> Any:
        return self._context.call('root.version.full', *args, **kwargs)


class RootLuLithoInstanceTriggerFirst_cmd_item(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.first_cmd_item'


class RootLuLithoInstanceTriggerMake_pause(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.make_pause'


class RootLuLithoInstanceTriggerMove_to_abs_xy_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.move_to_abs_xy_pos'


class RootLuLithoInstanceTriggerStart_sequence(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.start_sequence'


class RootLuLithoInstanceTriggerNext_cmd_item(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.next_cmd_item'


class RootLuLithoInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.user_abort'


class RootLuLithoInstanceTriggerEnd_sequence(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.end_sequence'


class RootLuLithoInstanceTriggerMove_to_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.move_to_z'


class RootLuLithoInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger'
        self.move_to_z = RootLuLithoInstanceTriggerMove_to_z(self._context)
        self.end_sequence = RootLuLithoInstanceTriggerEnd_sequence(self._context)
        self.user_abort = RootLuLithoInstanceTriggerUser_abort(self._context)
        self.next_cmd_item = RootLuLithoInstanceTriggerNext_cmd_item(self._context)
        self.start_sequence = RootLuLithoInstanceTriggerStart_sequence(self._context)
        self.move_to_abs_xy_pos = RootLuLithoInstanceTriggerMove_to_abs_xy_pos(self._context)
        self.make_pause = RootLuLithoInstanceTriggerMake_pause(self._context)
        self.first_cmd_item = RootLuLithoInstanceTriggerFirst_cmd_item(self._context)


class RootLuLithoInstanceAttributeMod_rel_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.mod_rel_value'


class RootLuLithoInstanceAttributePause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.pause_time'


class RootLuLithoInstanceAttributeAbsolute_y_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.absolute_y_pos'


class RootLuLithoInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.xy_move_speed'


class RootLuLithoInstanceAttributeAbsolute_x_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.absolute_x_pos'


class RootLuLithoInstanceAttributeMove_z_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.move_z_pos'


class RootLuLithoInstanceAttributeZ_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.z_move_speed'


class RootLuLithoInstanceAttributeOp_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.op_mode.enum'

    @property
    def user(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.user'))

    @user.setter
    def user(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.user', int(new_val))

    @property
    def z_modulation(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.z_modulation'))

    @z_modulation.setter
    def z_modulation(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.z_modulation', int(new_val))

    @property
    def static_afm(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.static_afm'))

    @static_afm.setter
    def static_afm(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.static_afm', int(new_val))

    @property
    def dynamic_afm(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.dynamic_afm'))

    @dynamic_afm.setter
    def dynamic_afm(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.dynamic_afm', int(new_val))

    @property
    def stm(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.stm'))

    @stm.setter
    def stm(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.stm', int(new_val))


class RootLuLithoInstanceAttributeOp_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.op_mode'
        self.enum = RootLuLithoInstanceAttributeOp_modeEnum(self._context)


class RootLuLithoInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute'
        self.op_mode = RootLuLithoInstanceAttributeOp_mode(self._context)
        self.z_move_speed = RootLuLithoInstanceAttributeZ_move_speed(self._context)
        self.move_z_pos = RootLuLithoInstanceAttributeMove_z_pos(self._context)
        self.absolute_x_pos = RootLuLithoInstanceAttributeAbsolute_x_pos(self._context)
        self.xy_move_speed = RootLuLithoInstanceAttributeXy_move_speed(self._context)
        self.absolute_y_pos = RootLuLithoInstanceAttributeAbsolute_y_pos(self._context)
        self.pause_time = RootLuLithoInstanceAttributePause_time(self._context)
        self.mod_rel_value = RootLuLithoInstanceAttributeMod_rel_value(self._context)


class RootLuLithoInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance'
        self.attribute = RootLuLithoInstanceAttribute(self._context)
        self.trigger = RootLuLithoInstanceTrigger(self._context)


class RootLuLitho(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho'
        self.instance = RootLuLithoInstance(self._context)


class RootLuEvent_managerInstanceTriggerSoft_event2_rising_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event2_rising_edge'


class RootLuEvent_managerInstanceTriggerSoft_event1_falling_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event1_falling_edge'


class RootLuEvent_managerInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.stop'


class RootLuEvent_managerInstanceTriggerSoft_event1_rising_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event1_rising_edge'


class RootLuEvent_managerInstanceTriggerSoft_event0_rising_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event0_rising_edge'


class RootLuEvent_managerInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.abort'


class RootLuEvent_managerInstanceTriggerSoft_event0_falling_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event0_falling_edge'


class RootLuEvent_managerInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.start'


class RootLuEvent_managerInstanceTriggerSoft_event2_falling_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event2_falling_edge'


class RootLuEvent_managerInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.user_abort'


class RootLuEvent_managerInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger'
        self.user_abort = RootLuEvent_managerInstanceTriggerUser_abort(self._context)
        self.soft_event2_falling_edge = RootLuEvent_managerInstanceTriggerSoft_event2_falling_edge(self._context)
        self.start = RootLuEvent_managerInstanceTriggerStart(self._context)
        self.soft_event0_falling_edge = RootLuEvent_managerInstanceTriggerSoft_event0_falling_edge(self._context)
        self.abort = RootLuEvent_managerInstanceTriggerAbort(self._context)
        self.soft_event0_rising_edge = RootLuEvent_managerInstanceTriggerSoft_event0_rising_edge(self._context)
        self.soft_event1_rising_edge = RootLuEvent_managerInstanceTriggerSoft_event1_rising_edge(self._context)
        self.stop = RootLuEvent_managerInstanceTriggerStop(self._context)
        self.soft_event1_falling_edge = RootLuEvent_managerInstanceTriggerSoft_event1_falling_edge(self._context)
        self.soft_event2_rising_edge = RootLuEvent_managerInstanceTriggerSoft_event2_rising_edge(self._context)


class RootLuEvent_managerInstanceAttributeStart_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.start_mask.enum'

    @property
    def data_sampling(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.data_sampling'))

    @data_sampling.setter
    def data_sampling(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.data_sampling', int(new_val))

    @property
    def data_capture(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.data_capture'))

    @data_capture.setter
    def data_capture(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.data_capture', int(new_val))

    @property
    def ramp_gen_planez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_planez'))

    @ramp_gen_planez.setter
    def ramp_gen_planez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_planez', int(new_val))

    @property
    def ramp_gen_ctrlz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_ctrlz'))

    @ramp_gen_ctrlz.setter
    def ramp_gen_ctrlz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_ctrlz', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_approach', int(new_val))

    @property
    def ramp_gen_positionx(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positionx'))

    @ramp_gen_positionx.setter
    def ramp_gen_positionx(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positionx', int(new_val))

    @property
    def timer_dbg1(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.timer_dbg1'))

    @timer_dbg1.setter
    def timer_dbg1(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.timer_dbg1', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.all', int(new_val))

    @property
    def ramp_gen_positiony(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positiony'))

    @ramp_gen_positiony.setter
    def ramp_gen_positiony(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positiony', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_user4', int(new_val))

    @property
    def ramp_gen_positionw(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positionw'))

    @ramp_gen_positionw.setter
    def ramp_gen_positionw(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positionw', int(new_val))

    @property
    def timer_proc0(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.timer_proc0'))

    @timer_proc0.setter
    def timer_proc0(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.timer_proc0', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.none', int(new_val))

    @property
    def unused(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.unused'))

    @unused.setter
    def unused(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.unused', int(new_val))

    @property
    def ramp_gen_tipvoltage(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_tipvoltage'))

    @ramp_gen_tipvoltage.setter
    def ramp_gen_tipvoltage(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_tipvoltage', int(new_val))

    @property
    def mem_sig_gen(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.mem_sig_gen'))

    @mem_sig_gen.setter
    def mem_sig_gen(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.mem_sig_gen', int(new_val))

    @property
    def ramp_gen_maxz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_maxz'))

    @ramp_gen_maxz.setter
    def ramp_gen_maxz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_maxz', int(new_val))

    @property
    def ramp_gen_alternatez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_alternatez'))

    @ramp_gen_alternatez.setter
    def ramp_gen_alternatez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_alternatez', int(new_val))


class RootLuEvent_managerInstanceAttributeStart_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.start_mask'
        self.enum = RootLuEvent_managerInstanceAttributeStart_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeStop_event_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_event_mask.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_user4_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.user_abort_event_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.unused_done', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_capture_done', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.all', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator3_true', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_planez_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event0_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.none', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.mem_sig_gen_done', int(new_val))


class RootLuEvent_managerInstanceAttributeStop_event_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_event_mask'
        self.enum = RootLuEvent_managerInstanceAttributeStop_event_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeStop_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_mask.enum'

    @property
    def data_sampling(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.data_sampling'))

    @data_sampling.setter
    def data_sampling(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.data_sampling', int(new_val))

    @property
    def data_capture(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.data_capture'))

    @data_capture.setter
    def data_capture(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.data_capture', int(new_val))

    @property
    def ramp_gen_planez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_planez'))

    @ramp_gen_planez.setter
    def ramp_gen_planez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_planez', int(new_val))

    @property
    def ramp_gen_ctrlz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_ctrlz'))

    @ramp_gen_ctrlz.setter
    def ramp_gen_ctrlz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_ctrlz', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_approach', int(new_val))

    @property
    def ramp_gen_positionx(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positionx'))

    @ramp_gen_positionx.setter
    def ramp_gen_positionx(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positionx', int(new_val))

    @property
    def timer_dbg1(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_dbg1'))

    @timer_dbg1.setter
    def timer_dbg1(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_dbg1', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.all', int(new_val))

    @property
    def ramp_gen_positiony(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positiony'))

    @ramp_gen_positiony.setter
    def ramp_gen_positiony(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positiony', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_user4', int(new_val))

    @property
    def ramp_gen_positionw(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positionw'))

    @ramp_gen_positionw.setter
    def ramp_gen_positionw(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positionw', int(new_val))

    @property
    def timer_proc0(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_proc0'))

    @timer_proc0.setter
    def timer_proc0(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_proc0', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.none', int(new_val))

    @property
    def unused(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.unused'))

    @unused.setter
    def unused(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.unused', int(new_val))

    @property
    def ramp_gen_tipvoltage(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_tipvoltage'))

    @ramp_gen_tipvoltage.setter
    def ramp_gen_tipvoltage(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_tipvoltage', int(new_val))

    @property
    def mem_sig_gen(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.mem_sig_gen'))

    @mem_sig_gen.setter
    def mem_sig_gen(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.mem_sig_gen', int(new_val))

    @property
    def ramp_gen_maxz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_maxz'))

    @ramp_gen_maxz.setter
    def ramp_gen_maxz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_maxz', int(new_val))

    @property
    def ramp_gen_alternatez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_alternatez'))

    @ramp_gen_alternatez.setter
    def ramp_gen_alternatez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_alternatez', int(new_val))


class RootLuEvent_managerInstanceAttributeStop_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_mask'
        self.enum = RootLuEvent_managerInstanceAttributeStop_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeObject_idle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.object_idle'


class RootLuEvent_managerInstanceAttributeAbort_event_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.abort_event_mask.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_user4_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.user_abort_event_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.unused_done', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_capture_done', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.all', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator3_true', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_planez_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event0_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.none', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.mem_sig_gen_done', int(new_val))


class RootLuEvent_managerInstanceAttributeAbort_event_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.abort_event_mask'
        self.enum = RootLuEvent_managerInstanceAttributeAbort_event_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeObject_queue_size(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.object_queue_size'


class RootLuEvent_managerInstanceAttributeEvent_vector_snapshotEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector_snapshot.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_user4_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.user_abort_event_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.unused_done', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_capture_done', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.all', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator3_true', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_planez_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event0_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.none', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.mem_sig_gen_done', int(new_val))


class RootLuEvent_managerInstanceAttributeEvent_vector_snapshot(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector_snapshot'
        self.enum = RootLuEvent_managerInstanceAttributeEvent_vector_snapshotEnum(self._context)


class RootLuEvent_managerInstanceAttributeAnd_mask0Enum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.and_mask0.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_user4_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.user_abort_event_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.unused_done', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.data_capture_done', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.all', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator3_true', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_planez_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event0_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.none', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.mem_sig_gen_done', int(new_val))


class RootLuEvent_managerInstanceAttributeAnd_mask0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.and_mask0'
        self.enum = RootLuEvent_managerInstanceAttributeAnd_mask0Enum(self._context)


class RootLuEvent_managerInstanceAttributeEvent_vectorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_user4_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.user_abort_event_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.unused_done', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.data_capture_done', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.all', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.comparator3_true', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_planez_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event0_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.none', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.mem_sig_gen_done', int(new_val))


class RootLuEvent_managerInstanceAttributeEvent_vector(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector'
        self.enum = RootLuEvent_managerInstanceAttributeEvent_vectorEnum(self._context)


class RootLuEvent_managerInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute'
        self.event_vector = RootLuEvent_managerInstanceAttributeEvent_vector(self._context)
        self.and_mask0 = RootLuEvent_managerInstanceAttributeAnd_mask0(self._context)
        self.event_vector_snapshot = RootLuEvent_managerInstanceAttributeEvent_vector_snapshot(self._context)
        self.object_queue_size = RootLuEvent_managerInstanceAttributeObject_queue_size(self._context)
        self.abort_event_mask = RootLuEvent_managerInstanceAttributeAbort_event_mask(self._context)
        self.object_idle = RootLuEvent_managerInstanceAttributeObject_idle(self._context)
        self.stop_mask = RootLuEvent_managerInstanceAttributeStop_mask(self._context)
        self.stop_event_mask = RootLuEvent_managerInstanceAttributeStop_event_mask(self._context)
        self.start_mask = RootLuEvent_managerInstanceAttributeStart_mask(self._context)


class RootLuEvent_managerInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.busy.is_busy'


class RootLuEvent_managerInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.busy'
        self.is_busy = RootLuEvent_managerInstanceBusyIs_busy(self._context)


class RootLuEvent_managerInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance'
        self.busy = RootLuEvent_managerInstanceBusy(self._context)
        self.attribute = RootLuEvent_managerInstanceAttribute(self._context)
        self.trigger = RootLuEvent_managerInstanceTrigger(self._context)


class RootLuEvent_manager(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager'
        self.instance = RootLuEvent_managerInstance(self._context)


class RootLuOrtInstanceTriggerApply_samples_values(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.apply_samples_values'


class RootLuOrtInstanceTriggerTransfer_free_wave_data(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.transfer_free_wave_data'


class RootLuOrtInstanceTriggerApply_period_duration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.apply_period_duration'


class RootLuOrtInstanceTriggerUpdate_free_wave(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.update_free_wave'


class RootLuOrtInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger'
        self.update_free_wave = RootLuOrtInstanceTriggerUpdate_free_wave(self._context)
        self.apply_period_duration = RootLuOrtInstanceTriggerApply_period_duration(self._context)
        self.transfer_free_wave_data = RootLuOrtInstanceTriggerTransfer_free_wave_data(self._context)
        self.apply_samples_values = RootLuOrtInstanceTriggerApply_samples_values(self._context)


class RootLuOrtInstanceAttributeAverage_periods(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.average_periods'


class RootLuOrtInstanceAttributeBaseline_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_frequency'


class RootLuOrtInstanceAttributeBaseline_window_begin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_window_begin'


class RootLuOrtInstanceAttributeBaseline_controller_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_controller_state.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.baseline_controller_state.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.baseline_controller_state.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.baseline_controller_state.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.baseline_controller_state.enum.disabled', int(new_val))


class RootLuOrtInstanceAttributeBaseline_controller_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_controller_state'
        self.enum = RootLuOrtInstanceAttributeBaseline_controller_stateEnum(self._context)


class RootLuOrtInstanceAttributeFeedback_amplitude_average_width(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.feedback_amplitude_average_width'


class RootLuOrtInstanceAttributeInput_selectEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.input_select.enum'

    @property
    def fast_in_deflection_hr_rate(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.fast_in_deflection_hr_rate'))

    @fast_in_deflection_hr_rate.setter
    def fast_in_deflection_hr_rate(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.fast_in_deflection_hr_rate', int(new_val))

    @property
    def hi_res_in_deflection(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_deflection'))

    @hi_res_in_deflection.setter
    def hi_res_in_deflection(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_deflection', int(new_val))

    @property
    def hi_res_in_user1(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_user1'))

    @hi_res_in_user1.setter
    def hi_res_in_user1(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_user1', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.fast_in_deflection', int(new_val))

    @property
    def fast_in_user_hr_rate(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.fast_in_user_hr_rate'))

    @fast_in_user_hr_rate.setter
    def fast_in_user_hr_rate(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.fast_in_user_hr_rate', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.fast_in_user', int(new_val))


class RootLuOrtInstanceAttributeInput_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.input_select'
        self.enum = RootLuOrtInstanceAttributeInput_selectEnum(self._context)


class RootLuOrtInstanceAttributeFeedback_amplitude_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.feedback_amplitude_position'


class RootLuOrtInstanceAttributeExcitation_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.excitation_amplitude'


class RootLuOrtInstanceAttributeAmplitude_reduction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.amplitude_reduction'


class RootLuOrtInstanceAttributeFree_wave_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.free_wave_delay'


class RootLuOrtInstanceAttributePeriod_duration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.period_duration'


class RootLuOrtInstanceAttributeDown_sample_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.down_sample_factor'


class RootLuOrtInstanceAttributeBaseline_window_end(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_window_end'


class RootLuOrtInstanceAttributeBaseline(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline'


class RootLuOrtInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute'
        self.baseline = RootLuOrtInstanceAttributeBaseline(self._context)
        self.baseline_window_end = RootLuOrtInstanceAttributeBaseline_window_end(self._context)
        self.down_sample_factor = RootLuOrtInstanceAttributeDown_sample_factor(self._context)
        self.period_duration = RootLuOrtInstanceAttributePeriod_duration(self._context)
        self.free_wave_delay = RootLuOrtInstanceAttributeFree_wave_delay(self._context)
        self.amplitude_reduction = RootLuOrtInstanceAttributeAmplitude_reduction(self._context)
        self.excitation_amplitude = RootLuOrtInstanceAttributeExcitation_amplitude(self._context)
        self.feedback_amplitude_position = RootLuOrtInstanceAttributeFeedback_amplitude_position(self._context)
        self.input_select = RootLuOrtInstanceAttributeInput_select(self._context)
        self.feedback_amplitude_average_width = RootLuOrtInstanceAttributeFeedback_amplitude_average_width(self._context)
        self.baseline_controller_state = RootLuOrtInstanceAttributeBaseline_controller_state(self._context)
        self.baseline_window_begin = RootLuOrtInstanceAttributeBaseline_window_begin(self._context)
        self.baseline_frequency = RootLuOrtInstanceAttributeBaseline_frequency(self._context)
        self.average_periods = RootLuOrtInstanceAttributeAverage_periods(self._context)


class RootLuOrtInstanceBusyIs_averaging(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.busy.is_averaging'


class RootLuOrtInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.busy'
        self.is_averaging = RootLuOrtInstanceBusyIs_averaging(self._context)


class RootLuOrtInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance'
        self.busy = RootLuOrtInstanceBusy(self._context)
        self.attribute = RootLuOrtInstanceAttribute(self._context)
        self.trigger = RootLuOrtInstanceTrigger(self._context)


class RootLuOrt(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort'
        self.instance = RootLuOrtInstance(self._context)


class RootLuPid_controllerPid_yTriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.trigger.clear_pid_accu'


class RootLuPid_controllerPid_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.trigger'
        self.clear_pid_accu = RootLuPid_controllerPid_yTriggerClear_pid_accu(self._context)


class RootLuPid_controllerPid_yAttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.i_gain'


class RootLuPid_controllerPid_yAttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.max_value'


class RootLuPid_controllerPid_yAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.current_output_value'


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_yAttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.reached_max'


class RootLuPid_controllerPid_yAttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.p_gain'


class RootLuPid_controllerPid_yAttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.reached_err_lim'


class RootLuPid_controllerPid_yAttributeStatic_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.static_set_point'


class RootLuPid_controllerPid_yAttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.reached_min'


class RootLuPid_controllerPid_yAttributeFeedback_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.feedback_mode.enum'

    @property
    def freeze(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.feedback_mode.enum.freeze'))

    @freeze.setter
    def freeze(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.feedback_mode.enum.freeze', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.feedback_mode.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.feedback_mode.enum.running', int(new_val))


class RootLuPid_controllerPid_yAttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.feedback_mode'
        self.enum = RootLuPid_controllerPid_yAttributeFeedback_modeEnum(self._context)


class RootLuPid_controllerPid_yAttributeSelect_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.select_output.enum'

    @property
    def pid_controller_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.select_output.enum.pid_controller_out'))

    @pid_controller_out.setter
    def pid_controller_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.select_output.enum.pid_controller_out', int(new_val))

    @property
    def set_point_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.select_output.enum.set_point_in'))

    @set_point_in.setter
    def set_point_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.select_output.enum.set_point_in', int(new_val))


class RootLuPid_controllerPid_yAttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.select_output'
        self.enum = RootLuPid_controllerPid_yAttributeSelect_outputEnum(self._context)


class RootLuPid_controllerPid_yAttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.min_value'


class RootLuPid_controllerPid_yAttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.polarity.enum'

    @property
    def inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.polarity.enum.inverted'))

    @inverted.setter
    def inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.polarity.enum.inverted', int(new_val))

    @property
    def not_inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.polarity.enum.not_inverted'))

    @not_inverted.setter
    def not_inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.polarity.enum.not_inverted', int(new_val))


class RootLuPid_controllerPid_yAttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.polarity'
        self.enum = RootLuPid_controllerPid_yAttributePolarityEnum(self._context)


class RootLuPid_controllerPid_yAttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.set_point_gain'


class RootLuPid_controllerPid_yAttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.error_limit'


class RootLuPid_controllerPid_yAttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.slope'


class RootLuPid_controllerPid_yAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_yAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_yAttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_yAttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_actual.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_yAttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_yAttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_yAttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.d_gain'


class RootLuPid_controllerPid_yAttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_yAttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_yAttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_yAttributeCompare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuPid_controllerPid_yAttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.compare_mode'
        self.enum = RootLuPid_controllerPid_yAttributeCompare_modeEnum(self._context)


class RootLuPid_controllerPid_yAttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_set_point.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_yAttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_yAttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute'
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enable(self._context)
        self.input_set_point = RootLuPid_controllerPid_yAttributeInput_set_point(self._context)
        self.compare_mode = RootLuPid_controllerPid_yAttributeCompare_mode(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_yAttributeMedian_filter_enable(self._context)
        self.d_gain = RootLuPid_controllerPid_yAttributeD_gain(self._context)
        self.input_actual = RootLuPid_controllerPid_yAttributeInput_actual(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_yAttributeSet_point_modulation_enable(self._context)
        self.slope = RootLuPid_controllerPid_yAttributeSlope(self._context)
        self.error_limit = RootLuPid_controllerPid_yAttributeError_limit(self._context)
        self.set_point_gain = RootLuPid_controllerPid_yAttributeSet_point_gain(self._context)
        self.polarity = RootLuPid_controllerPid_yAttributePolarity(self._context)
        self.min_value = RootLuPid_controllerPid_yAttributeMin_value(self._context)
        self.select_output = RootLuPid_controllerPid_yAttributeSelect_output(self._context)
        self.feedback_mode = RootLuPid_controllerPid_yAttributeFeedback_mode(self._context)
        self.reached_min = RootLuPid_controllerPid_yAttributeReached_min(self._context)
        self.static_set_point = RootLuPid_controllerPid_yAttributeStatic_set_point(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_yAttributeReached_err_lim(self._context)
        self.p_gain = RootLuPid_controllerPid_yAttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_yAttributeReached_max(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enable(self._context)
        self.current_output_value = RootLuPid_controllerPid_yAttributeCurrent_output_value(self._context)
        self.max_value = RootLuPid_controllerPid_yAttributeMax_value(self._context)
        self.i_gain = RootLuPid_controllerPid_yAttributeI_gain(self._context)


class RootLuPid_controllerPid_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y'
        self.attribute = RootLuPid_controllerPid_yAttribute(self._context)
        self.trigger = RootLuPid_controllerPid_yTrigger(self._context)


class RootLuPid_controllerPid_user1TriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.trigger.clear_pid_accu'


class RootLuPid_controllerPid_user1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.trigger'
        self.clear_pid_accu = RootLuPid_controllerPid_user1TriggerClear_pid_accu(self._context)


class RootLuPid_controllerPid_user1AttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.i_gain'


class RootLuPid_controllerPid_user1AttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.max_value'


class RootLuPid_controllerPid_user1AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.current_output_value'


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_user1AttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.reached_max'


class RootLuPid_controllerPid_user1AttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.p_gain'


class RootLuPid_controllerPid_user1AttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.reached_err_lim'


class RootLuPid_controllerPid_user1AttributeStatic_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.static_set_point'


class RootLuPid_controllerPid_user1AttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.reached_min'


class RootLuPid_controllerPid_user1AttributeFeedback_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.feedback_mode.enum'

    @property
    def freeze(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.feedback_mode.enum.freeze'))

    @freeze.setter
    def freeze(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.feedback_mode.enum.freeze', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.feedback_mode.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.feedback_mode.enum.running', int(new_val))


class RootLuPid_controllerPid_user1AttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.feedback_mode'
        self.enum = RootLuPid_controllerPid_user1AttributeFeedback_modeEnum(self._context)


class RootLuPid_controllerPid_user1AttributeSelect_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.select_output.enum'

    @property
    def pid_controller_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.select_output.enum.pid_controller_out'))

    @pid_controller_out.setter
    def pid_controller_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.select_output.enum.pid_controller_out', int(new_val))

    @property
    def set_point_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.select_output.enum.set_point_in'))

    @set_point_in.setter
    def set_point_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.select_output.enum.set_point_in', int(new_val))


class RootLuPid_controllerPid_user1AttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.select_output'
        self.enum = RootLuPid_controllerPid_user1AttributeSelect_outputEnum(self._context)


class RootLuPid_controllerPid_user1AttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.min_value'


class RootLuPid_controllerPid_user1AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.polarity.enum'

    @property
    def inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.polarity.enum.inverted'))

    @inverted.setter
    def inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.polarity.enum.inverted', int(new_val))

    @property
    def not_inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.polarity.enum.not_inverted'))

    @not_inverted.setter
    def not_inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.polarity.enum.not_inverted', int(new_val))


class RootLuPid_controllerPid_user1AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.polarity'
        self.enum = RootLuPid_controllerPid_user1AttributePolarityEnum(self._context)


class RootLuPid_controllerPid_user1AttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.set_point_gain'


class RootLuPid_controllerPid_user1AttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.error_limit'


class RootLuPid_controllerPid_user1AttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.slope'


class RootLuPid_controllerPid_user1AttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_user1AttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_actual.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user1AttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_user1AttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_user1AttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.d_gain'


class RootLuPid_controllerPid_user1AttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_user1AttributeCompare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuPid_controllerPid_user1AttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.compare_mode'
        self.enum = RootLuPid_controllerPid_user1AttributeCompare_modeEnum(self._context)


class RootLuPid_controllerPid_user1AttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_set_point.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user1AttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_user1AttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_user1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute'
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enable(self._context)
        self.input_set_point = RootLuPid_controllerPid_user1AttributeInput_set_point(self._context)
        self.compare_mode = RootLuPid_controllerPid_user1AttributeCompare_mode(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_user1AttributeMedian_filter_enable(self._context)
        self.d_gain = RootLuPid_controllerPid_user1AttributeD_gain(self._context)
        self.input_actual = RootLuPid_controllerPid_user1AttributeInput_actual(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_user1AttributeSet_point_modulation_enable(self._context)
        self.slope = RootLuPid_controllerPid_user1AttributeSlope(self._context)
        self.error_limit = RootLuPid_controllerPid_user1AttributeError_limit(self._context)
        self.set_point_gain = RootLuPid_controllerPid_user1AttributeSet_point_gain(self._context)
        self.polarity = RootLuPid_controllerPid_user1AttributePolarity(self._context)
        self.min_value = RootLuPid_controllerPid_user1AttributeMin_value(self._context)
        self.select_output = RootLuPid_controllerPid_user1AttributeSelect_output(self._context)
        self.feedback_mode = RootLuPid_controllerPid_user1AttributeFeedback_mode(self._context)
        self.reached_min = RootLuPid_controllerPid_user1AttributeReached_min(self._context)
        self.static_set_point = RootLuPid_controllerPid_user1AttributeStatic_set_point(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_user1AttributeReached_err_lim(self._context)
        self.p_gain = RootLuPid_controllerPid_user1AttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_user1AttributeReached_max(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enable(self._context)
        self.current_output_value = RootLuPid_controllerPid_user1AttributeCurrent_output_value(self._context)
        self.max_value = RootLuPid_controllerPid_user1AttributeMax_value(self._context)
        self.i_gain = RootLuPid_controllerPid_user1AttributeI_gain(self._context)


class RootLuPid_controllerPid_user1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1'
        self.attribute = RootLuPid_controllerPid_user1Attribute(self._context)
        self.trigger = RootLuPid_controllerPid_user1Trigger(self._context)


class RootLuPid_controllerPid_wTriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.trigger.clear_pid_accu'


class RootLuPid_controllerPid_wTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.trigger'
        self.clear_pid_accu = RootLuPid_controllerPid_wTriggerClear_pid_accu(self._context)


class RootLuPid_controllerPid_wAttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.i_gain'


class RootLuPid_controllerPid_wAttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.max_value'


class RootLuPid_controllerPid_wAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.current_output_value'


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_wAttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.reached_max'


class RootLuPid_controllerPid_wAttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.p_gain'


class RootLuPid_controllerPid_wAttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.reached_err_lim'


class RootLuPid_controllerPid_wAttributeStatic_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.static_set_point'


class RootLuPid_controllerPid_wAttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.reached_min'


class RootLuPid_controllerPid_wAttributeFeedback_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.feedback_mode.enum'

    @property
    def freeze(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.feedback_mode.enum.freeze'))

    @freeze.setter
    def freeze(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.feedback_mode.enum.freeze', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.feedback_mode.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.feedback_mode.enum.running', int(new_val))


class RootLuPid_controllerPid_wAttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.feedback_mode'
        self.enum = RootLuPid_controllerPid_wAttributeFeedback_modeEnum(self._context)


class RootLuPid_controllerPid_wAttributeSelect_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.select_output.enum'

    @property
    def pid_controller_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.select_output.enum.pid_controller_out'))

    @pid_controller_out.setter
    def pid_controller_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.select_output.enum.pid_controller_out', int(new_val))

    @property
    def set_point_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.select_output.enum.set_point_in'))

    @set_point_in.setter
    def set_point_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.select_output.enum.set_point_in', int(new_val))


class RootLuPid_controllerPid_wAttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.select_output'
        self.enum = RootLuPid_controllerPid_wAttributeSelect_outputEnum(self._context)


class RootLuPid_controllerPid_wAttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.min_value'


class RootLuPid_controllerPid_wAttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.polarity.enum'

    @property
    def inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.polarity.enum.inverted'))

    @inverted.setter
    def inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.polarity.enum.inverted', int(new_val))

    @property
    def not_inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.polarity.enum.not_inverted'))

    @not_inverted.setter
    def not_inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.polarity.enum.not_inverted', int(new_val))


class RootLuPid_controllerPid_wAttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.polarity'
        self.enum = RootLuPid_controllerPid_wAttributePolarityEnum(self._context)


class RootLuPid_controllerPid_wAttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.set_point_gain'


class RootLuPid_controllerPid_wAttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.error_limit'


class RootLuPid_controllerPid_wAttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.slope'


class RootLuPid_controllerPid_wAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_wAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_wAttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_wAttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_actual.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_wAttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_wAttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_wAttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.d_gain'


class RootLuPid_controllerPid_wAttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_wAttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_wAttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_wAttributeCompare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuPid_controllerPid_wAttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.compare_mode'
        self.enum = RootLuPid_controllerPid_wAttributeCompare_modeEnum(self._context)


class RootLuPid_controllerPid_wAttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_set_point.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_wAttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_wAttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_wAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute'
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enable(self._context)
        self.input_set_point = RootLuPid_controllerPid_wAttributeInput_set_point(self._context)
        self.compare_mode = RootLuPid_controllerPid_wAttributeCompare_mode(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_wAttributeMedian_filter_enable(self._context)
        self.d_gain = RootLuPid_controllerPid_wAttributeD_gain(self._context)
        self.input_actual = RootLuPid_controllerPid_wAttributeInput_actual(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_wAttributeSet_point_modulation_enable(self._context)
        self.slope = RootLuPid_controllerPid_wAttributeSlope(self._context)
        self.error_limit = RootLuPid_controllerPid_wAttributeError_limit(self._context)
        self.set_point_gain = RootLuPid_controllerPid_wAttributeSet_point_gain(self._context)
        self.polarity = RootLuPid_controllerPid_wAttributePolarity(self._context)
        self.min_value = RootLuPid_controllerPid_wAttributeMin_value(self._context)
        self.select_output = RootLuPid_controllerPid_wAttributeSelect_output(self._context)
        self.feedback_mode = RootLuPid_controllerPid_wAttributeFeedback_mode(self._context)
        self.reached_min = RootLuPid_controllerPid_wAttributeReached_min(self._context)
        self.static_set_point = RootLuPid_controllerPid_wAttributeStatic_set_point(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_wAttributeReached_err_lim(self._context)
        self.p_gain = RootLuPid_controllerPid_wAttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_wAttributeReached_max(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enable(self._context)
        self.current_output_value = RootLuPid_controllerPid_wAttributeCurrent_output_value(self._context)
        self.max_value = RootLuPid_controllerPid_wAttributeMax_value(self._context)
        self.i_gain = RootLuPid_controllerPid_wAttributeI_gain(self._context)


class RootLuPid_controllerPid_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w'
        self.attribute = RootLuPid_controllerPid_wAttribute(self._context)
        self.trigger = RootLuPid_controllerPid_wTrigger(self._context)


class RootLuPid_controllerPid_user2TriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.trigger.clear_pid_accu'


class RootLuPid_controllerPid_user2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.trigger'
        self.clear_pid_accu = RootLuPid_controllerPid_user2TriggerClear_pid_accu(self._context)


class RootLuPid_controllerPid_user2AttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.i_gain'


class RootLuPid_controllerPid_user2AttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.max_value'


class RootLuPid_controllerPid_user2AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.current_output_value'


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_user2AttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.reached_max'


class RootLuPid_controllerPid_user2AttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.p_gain'


class RootLuPid_controllerPid_user2AttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.reached_err_lim'


class RootLuPid_controllerPid_user2AttributeStatic_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.static_set_point'


class RootLuPid_controllerPid_user2AttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.reached_min'


class RootLuPid_controllerPid_user2AttributeFeedback_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.feedback_mode.enum'

    @property
    def freeze(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.feedback_mode.enum.freeze'))

    @freeze.setter
    def freeze(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.feedback_mode.enum.freeze', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.feedback_mode.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.feedback_mode.enum.running', int(new_val))


class RootLuPid_controllerPid_user2AttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.feedback_mode'
        self.enum = RootLuPid_controllerPid_user2AttributeFeedback_modeEnum(self._context)


class RootLuPid_controllerPid_user2AttributeSelect_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.select_output.enum'

    @property
    def pid_controller_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.select_output.enum.pid_controller_out'))

    @pid_controller_out.setter
    def pid_controller_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.select_output.enum.pid_controller_out', int(new_val))

    @property
    def set_point_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.select_output.enum.set_point_in'))

    @set_point_in.setter
    def set_point_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.select_output.enum.set_point_in', int(new_val))


class RootLuPid_controllerPid_user2AttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.select_output'
        self.enum = RootLuPid_controllerPid_user2AttributeSelect_outputEnum(self._context)


class RootLuPid_controllerPid_user2AttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.min_value'


class RootLuPid_controllerPid_user2AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.polarity.enum'

    @property
    def inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.polarity.enum.inverted'))

    @inverted.setter
    def inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.polarity.enum.inverted', int(new_val))

    @property
    def not_inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.polarity.enum.not_inverted'))

    @not_inverted.setter
    def not_inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.polarity.enum.not_inverted', int(new_val))


class RootLuPid_controllerPid_user2AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.polarity'
        self.enum = RootLuPid_controllerPid_user2AttributePolarityEnum(self._context)


class RootLuPid_controllerPid_user2AttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.set_point_gain'


class RootLuPid_controllerPid_user2AttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.error_limit'


class RootLuPid_controllerPid_user2AttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.slope'


class RootLuPid_controllerPid_user2AttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_user2AttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_actual.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user2AttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_user2AttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_user2AttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.d_gain'


class RootLuPid_controllerPid_user2AttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_user2AttributeCompare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuPid_controllerPid_user2AttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.compare_mode'
        self.enum = RootLuPid_controllerPid_user2AttributeCompare_modeEnum(self._context)


class RootLuPid_controllerPid_user2AttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_set_point.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user2AttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_user2AttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_user2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute'
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enable(self._context)
        self.input_set_point = RootLuPid_controllerPid_user2AttributeInput_set_point(self._context)
        self.compare_mode = RootLuPid_controllerPid_user2AttributeCompare_mode(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_user2AttributeMedian_filter_enable(self._context)
        self.d_gain = RootLuPid_controllerPid_user2AttributeD_gain(self._context)
        self.input_actual = RootLuPid_controllerPid_user2AttributeInput_actual(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_user2AttributeSet_point_modulation_enable(self._context)
        self.slope = RootLuPid_controllerPid_user2AttributeSlope(self._context)
        self.error_limit = RootLuPid_controllerPid_user2AttributeError_limit(self._context)
        self.set_point_gain = RootLuPid_controllerPid_user2AttributeSet_point_gain(self._context)
        self.polarity = RootLuPid_controllerPid_user2AttributePolarity(self._context)
        self.min_value = RootLuPid_controllerPid_user2AttributeMin_value(self._context)
        self.select_output = RootLuPid_controllerPid_user2AttributeSelect_output(self._context)
        self.feedback_mode = RootLuPid_controllerPid_user2AttributeFeedback_mode(self._context)
        self.reached_min = RootLuPid_controllerPid_user2AttributeReached_min(self._context)
        self.static_set_point = RootLuPid_controllerPid_user2AttributeStatic_set_point(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_user2AttributeReached_err_lim(self._context)
        self.p_gain = RootLuPid_controllerPid_user2AttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_user2AttributeReached_max(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enable(self._context)
        self.current_output_value = RootLuPid_controllerPid_user2AttributeCurrent_output_value(self._context)
        self.max_value = RootLuPid_controllerPid_user2AttributeMax_value(self._context)
        self.i_gain = RootLuPid_controllerPid_user2AttributeI_gain(self._context)


class RootLuPid_controllerPid_user2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2'
        self.attribute = RootLuPid_controllerPid_user2Attribute(self._context)
        self.trigger = RootLuPid_controllerPid_user2Trigger(self._context)


class RootLuPid_controllerPid_xTriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.trigger.clear_pid_accu'


class RootLuPid_controllerPid_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.trigger'
        self.clear_pid_accu = RootLuPid_controllerPid_xTriggerClear_pid_accu(self._context)


class RootLuPid_controllerPid_xAttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.i_gain'


class RootLuPid_controllerPid_xAttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.max_value'


class RootLuPid_controllerPid_xAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.current_output_value'


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_xAttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.reached_max'


class RootLuPid_controllerPid_xAttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.p_gain'


class RootLuPid_controllerPid_xAttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.reached_err_lim'


class RootLuPid_controllerPid_xAttributeStatic_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.static_set_point'


class RootLuPid_controllerPid_xAttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.reached_min'


class RootLuPid_controllerPid_xAttributeFeedback_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.feedback_mode.enum'

    @property
    def freeze(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.feedback_mode.enum.freeze'))

    @freeze.setter
    def freeze(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.feedback_mode.enum.freeze', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.feedback_mode.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.feedback_mode.enum.running', int(new_val))


class RootLuPid_controllerPid_xAttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.feedback_mode'
        self.enum = RootLuPid_controllerPid_xAttributeFeedback_modeEnum(self._context)


class RootLuPid_controllerPid_xAttributeSelect_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.select_output.enum'

    @property
    def pid_controller_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.select_output.enum.pid_controller_out'))

    @pid_controller_out.setter
    def pid_controller_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.select_output.enum.pid_controller_out', int(new_val))

    @property
    def set_point_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.select_output.enum.set_point_in'))

    @set_point_in.setter
    def set_point_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.select_output.enum.set_point_in', int(new_val))


class RootLuPid_controllerPid_xAttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.select_output'
        self.enum = RootLuPid_controllerPid_xAttributeSelect_outputEnum(self._context)


class RootLuPid_controllerPid_xAttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.min_value'


class RootLuPid_controllerPid_xAttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.polarity.enum'

    @property
    def inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.polarity.enum.inverted'))

    @inverted.setter
    def inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.polarity.enum.inverted', int(new_val))

    @property
    def not_inverted(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.polarity.enum.not_inverted'))

    @not_inverted.setter
    def not_inverted(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.polarity.enum.not_inverted', int(new_val))


class RootLuPid_controllerPid_xAttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.polarity'
        self.enum = RootLuPid_controllerPid_xAttributePolarityEnum(self._context)


class RootLuPid_controllerPid_xAttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.set_point_gain'


class RootLuPid_controllerPid_xAttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.error_limit'


class RootLuPid_controllerPid_xAttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.slope'


class RootLuPid_controllerPid_xAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_xAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_xAttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_xAttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_actual.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_xAttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_xAttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_xAttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.d_gain'


class RootLuPid_controllerPid_xAttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_xAttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_xAttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_xAttributeCompare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuPid_controllerPid_xAttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.compare_mode'
        self.enum = RootLuPid_controllerPid_xAttributeCompare_modeEnum(self._context)


class RootLuPid_controllerPid_xAttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_set_point.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_xAttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_xAttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute'
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enable(self._context)
        self.input_set_point = RootLuPid_controllerPid_xAttributeInput_set_point(self._context)
        self.compare_mode = RootLuPid_controllerPid_xAttributeCompare_mode(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_xAttributeMedian_filter_enable(self._context)
        self.d_gain = RootLuPid_controllerPid_xAttributeD_gain(self._context)
        self.input_actual = RootLuPid_controllerPid_xAttributeInput_actual(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_xAttributeSet_point_modulation_enable(self._context)
        self.slope = RootLuPid_controllerPid_xAttributeSlope(self._context)
        self.error_limit = RootLuPid_controllerPid_xAttributeError_limit(self._context)
        self.set_point_gain = RootLuPid_controllerPid_xAttributeSet_point_gain(self._context)
        self.polarity = RootLuPid_controllerPid_xAttributePolarity(self._context)
        self.min_value = RootLuPid_controllerPid_xAttributeMin_value(self._context)
        self.select_output = RootLuPid_controllerPid_xAttributeSelect_output(self._context)
        self.feedback_mode = RootLuPid_controllerPid_xAttributeFeedback_mode(self._context)
        self.reached_min = RootLuPid_controllerPid_xAttributeReached_min(self._context)
        self.static_set_point = RootLuPid_controllerPid_xAttributeStatic_set_point(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_xAttributeReached_err_lim(self._context)
        self.p_gain = RootLuPid_controllerPid_xAttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_xAttributeReached_max(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enable(self._context)
        self.current_output_value = RootLuPid_controllerPid_xAttributeCurrent_output_value(self._context)
        self.max_value = RootLuPid_controllerPid_xAttributeMax_value(self._context)
        self.i_gain = RootLuPid_controllerPid_xAttributeI_gain(self._context)


class RootLuPid_controllerPid_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x'
        self.attribute = RootLuPid_controllerPid_xAttribute(self._context)
        self.trigger = RootLuPid_controllerPid_xTrigger(self._context)


class RootLuPid_controller(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller'
        self.pid_x = RootLuPid_controllerPid_x(self._context)
        self.pid_user2 = RootLuPid_controllerPid_user2(self._context)
        self.pid_w = RootLuPid_controllerPid_w(self._context)
        self.pid_user1 = RootLuPid_controllerPid_user1(self._context)
        self.pid_y = RootLuPid_controllerPid_y(self._context)


class RootLuOscilloscopeInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger.start'


class RootLuOscilloscopeInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger.stop'


class RootLuOscilloscopeInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger'
        self.stop = RootLuOscilloscopeInstanceTriggerStop(self._context)
        self.start = RootLuOscilloscopeInstanceTriggerStart(self._context)


class RootLuOscilloscopeInstanceAttributeFree_wave_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.free_wave_delay'


class RootLuOscilloscopeInstanceAttributePeriod_duration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.period_duration'


class RootLuOscilloscopeInstanceAttributeCapture_trigger_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.capture_trigger_mode.enum'

    @property
    def lu_scan(self) -> int:
        return int(self._context.get('root.lu.oscilloscope.instance.attribute.capture_trigger_mode.enum.lu_scan'))

    @lu_scan.setter
    def lu_scan(self, new_val:int):
        self._context.set('root.lu.oscilloscope.instance.attribute.capture_trigger_mode.enum.lu_scan', int(new_val))

    @property
    def free_running(self) -> int:
        return int(self._context.get('root.lu.oscilloscope.instance.attribute.capture_trigger_mode.enum.free_running'))

    @free_running.setter
    def free_running(self, new_val:int):
        self._context.set('root.lu.oscilloscope.instance.attribute.capture_trigger_mode.enum.free_running', int(new_val))


class RootLuOscilloscopeInstanceAttributeCapture_trigger_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.capture_trigger_mode'
        self.enum = RootLuOscilloscopeInstanceAttributeCapture_trigger_modeEnum(self._context)


class RootLuOscilloscopeInstanceAttributeDown_sample_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.down_sample_factor'


class RootLuOscilloscopeInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute'
        self.down_sample_factor = RootLuOscilloscopeInstanceAttributeDown_sample_factor(self._context)
        self.capture_trigger_mode = RootLuOscilloscopeInstanceAttributeCapture_trigger_mode(self._context)
        self.period_duration = RootLuOscilloscopeInstanceAttributePeriod_duration(self._context)
        self.free_wave_delay = RootLuOscilloscopeInstanceAttributeFree_wave_delay(self._context)


class RootLuOscilloscopeInstanceBusyIs_busy_line_capture(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.busy.is_busy_line_capture'


class RootLuOscilloscopeInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.busy.is_busy'


class RootLuOscilloscopeInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.busy'
        self.is_busy = RootLuOscilloscopeInstanceBusyIs_busy(self._context)
        self.is_busy_line_capture = RootLuOscilloscopeInstanceBusyIs_busy_line_capture(self._context)


class RootLuOscilloscopeInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance'
        self.busy = RootLuOscilloscopeInstanceBusy(self._context)
        self.attribute = RootLuOscilloscopeInstanceAttribute(self._context)
        self.trigger = RootLuOscilloscopeInstanceTrigger(self._context)


class RootLuOscilloscope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope'
        self.instance = RootLuOscilloscopeInstance(self._context)


class RootLuSequencerInstanceTriggerStep(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger.step'


class RootLuSequencerInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger.start'


class RootLuSequencerInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger.abort'


class RootLuSequencerInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger'
        self.abort = RootLuSequencerInstanceTriggerAbort(self._context)
        self.start = RootLuSequencerInstanceTriggerStart(self._context)
        self.step = RootLuSequencerInstanceTriggerStep(self._context)


class RootLuSequencerInstanceAttributeMemory_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute.memory_vec'


class RootLuSequencerInstanceAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute.status'


class RootLuSequencerInstanceAttributeInstruction_pointer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute.instruction_pointer'


class RootLuSequencerInstanceAttributeSynchronized_data_acquisition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute.synchronized_data_acquisition'


class RootLuSequencerInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute'
        self.synchronized_data_acquisition = RootLuSequencerInstanceAttributeSynchronized_data_acquisition(self._context)
        self.instruction_pointer = RootLuSequencerInstanceAttributeInstruction_pointer(self._context)
        self.status = RootLuSequencerInstanceAttributeStatus(self._context)
        self.memory_vec = RootLuSequencerInstanceAttributeMemory_vec(self._context)


class RootLuSequencerInstanceBusyIs_running(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.busy.is_running'


class RootLuSequencerInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.busy'
        self.is_running = RootLuSequencerInstanceBusyIs_running(self._context)


class RootLuSequencerInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance'
        self.busy = RootLuSequencerInstanceBusy(self._context)
        self.attribute = RootLuSequencerInstanceAttribute(self._context)
        self.trigger = RootLuSequencerInstanceTrigger(self._context)


class RootLuSequencer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer'
        self.instance = RootLuSequencerInstance(self._context)


class RootLuSensor_controlInstanceTriggerStart_deflection_offset_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_deflection_offset_calibration'


class RootLuSensor_controlInstanceTriggerDeflection_offset_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.deflection_offset_calibration'


class RootLuSensor_controlInstanceTriggerStart_update_laser_spot_on_detector_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_update_laser_spot_on_detector_status'


class RootLuSensor_controlInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.user_abort'


class RootLuSensor_controlInstanceTriggerStart_sensor_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_sensor_calibration'


class RootLuSensor_controlInstanceTriggerDeflection_offset_calibration_with_retract(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.deflection_offset_calibration_with_retract'


class RootLuSensor_controlInstanceTriggerStart_detector_auto_adjustment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_detector_auto_adjustment'


class RootLuSensor_controlInstanceTriggerUpdate_laser_spot_on_detector_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.update_laser_spot_on_detector_status'


class RootLuSensor_controlInstanceTriggerStart_set_dynamic_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_set_dynamic_amplitude'


class RootLuSensor_controlInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger'
        self.start_set_dynamic_amplitude = RootLuSensor_controlInstanceTriggerStart_set_dynamic_amplitude(self._context)
        self.update_laser_spot_on_detector_status = RootLuSensor_controlInstanceTriggerUpdate_laser_spot_on_detector_status(self._context)
        self.start_detector_auto_adjustment = RootLuSensor_controlInstanceTriggerStart_detector_auto_adjustment(self._context)
        self.deflection_offset_calibration_with_retract = RootLuSensor_controlInstanceTriggerDeflection_offset_calibration_with_retract(self._context)
        self.start_sensor_calibration = RootLuSensor_controlInstanceTriggerStart_sensor_calibration(self._context)
        self.user_abort = RootLuSensor_controlInstanceTriggerUser_abort(self._context)
        self.start_update_laser_spot_on_detector_status = RootLuSensor_controlInstanceTriggerStart_update_laser_spot_on_detector_status(self._context)
        self.deflection_offset_calibration = RootLuSensor_controlInstanceTriggerDeflection_offset_calibration(self._context)
        self.start_deflection_offset_calibration = RootLuSensor_controlInstanceTriggerStart_deflection_offset_calibration(self._context)


class RootLuSensor_controlInstanceAttributeSensor_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.sensor_amplitude'


class RootLuSensor_controlInstanceAttributeEnable10_hz_update_laser_spot_on_detector_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.enable10_hz_update_laser_spot_on_detector_status'


class RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum'

    @property
    def fix_from_attr(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.fix_from_attr'))

    @fix_from_attr.setter
    def fix_from_attr(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.fix_from_attr', int(new_val))

    @property
    def auto_from_head_typ(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.auto_from_head_typ'))

    @auto_from_head_typ.setter
    def auto_from_head_typ(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.auto_from_head_typ', int(new_val))


class RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode'
        self.enum = RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_modeEnum(self._context)


class RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum'

    @property
    def failed(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.failed'))

    @failed.setter
    def failed(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.failed', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.running', int(new_val))

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.idle', int(new_val))


class RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status'
        self.enum = RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_statusEnum(self._context)


class RootLuSensor_controlInstanceAttributeOffset_calib_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_i_gain'


class RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum'

    @property
    def sensor_signal_failed(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.sensor_signal_failed'))

    @sensor_signal_failed.setter
    def sensor_signal_failed(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.sensor_signal_failed', int(new_val))

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.no_error', int(new_val))

    @property
    def calibration_error(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.calibration_error'))

    @calibration_error.setter
    def calibration_error(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.calibration_error', int(new_val))


class RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status'
        self.enum = RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_statusEnum(self._context)


class RootLuSensor_controlInstanceAttributeDetector_adjustment_tolerance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.detector_adjustment_tolerance'


class RootLuSensor_controlInstanceAttributeOffset_calib_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_mode.enum'

    @property
    def no_auto_calibration(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.no_auto_calibration'))

    @no_auto_calibration.setter
    def no_auto_calibration(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.no_auto_calibration', int(new_val))

    @property
    def auto_calibrate_deflection(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_deflection'))

    @auto_calibrate_deflection.setter
    def auto_calibrate_deflection(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_deflection', int(new_val))

    @property
    def auto_calibrate_z_ctrl_input(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_z_ctrl_input'))

    @auto_calibrate_z_ctrl_input.setter
    def auto_calibrate_z_ctrl_input(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_z_ctrl_input', int(new_val))


class RootLuSensor_controlInstanceAttributeOffset_calib_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_mode'
        self.enum = RootLuSensor_controlInstanceAttributeOffset_calib_modeEnum(self._context)


class RootLuSensor_controlInstanceAttributeDetector_adjustment_duration_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.detector_adjustment_duration_limit'


class RootLuSensor_controlInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute'
        self.detector_adjustment_duration_limit = RootLuSensor_controlInstanceAttributeDetector_adjustment_duration_limit(self._context)
        self.offset_calib_mode = RootLuSensor_controlInstanceAttributeOffset_calib_mode(self._context)
        self.detector_adjustment_tolerance = RootLuSensor_controlInstanceAttributeDetector_adjustment_tolerance(self._context)
        self.deflection_offset_calibration_status = RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_status(self._context)
        self.offset_calib_i_gain = RootLuSensor_controlInstanceAttributeOffset_calib_i_gain(self._context)
        self.detector_auto_adjustment_status = RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_status(self._context)
        self.offset_calib_i_gain_mode = RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_mode(self._context)
        self.enable10_hz_update_laser_spot_on_detector_status = RootLuSensor_controlInstanceAttributeEnable10_hz_update_laser_spot_on_detector_status(self._context)
        self.sensor_amplitude = RootLuSensor_controlInstanceAttributeSensor_amplitude(self._context)


class RootLuSensor_controlInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance'
        self.attribute = RootLuSensor_controlInstanceAttribute(self._context)
        self.trigger = RootLuSensor_controlInstanceTrigger(self._context)


class RootLuSensor_control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control'
        self.instance = RootLuSensor_controlInstance(self._context)


class RootLuAnalog_hi_res_outPosition_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.trigger'


class RootLuAnalog_hi_res_outPosition_yAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_yAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_yAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_yAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_yAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_yAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_yAttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_yAttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_yAttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_yAttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_yAttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_yAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_yAttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_yAttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_yAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_yAttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_yAttributeInput(self._context)


class RootLuAnalog_hi_res_outPosition_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y'
        self.attribute = RootLuAnalog_hi_res_outPosition_yAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outPosition_yTrigger(self._context)


class RootLuAnalog_hi_res_outApproachTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.trigger'


class RootLuAnalog_hi_res_outApproachAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.input'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outApproachAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.current_output_value'


class RootLuAnalog_hi_res_outApproachAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_offset'


class RootLuAnalog_hi_res_outApproachAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.output_gain'


class RootLuAnalog_hi_res_outApproachAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.static_value'


class RootLuAnalog_hi_res_outApproachAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.slew_rate'


class RootLuAnalog_hi_res_outApproachAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_gain'


class RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outApproachAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.filter_number'


class RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outApproachAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outApproachAttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outApproachAttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outApproachAttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outApproachAttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outApproachAttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outApproachAttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outApproachAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outApproachAttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outApproachAttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outApproachAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outApproachAttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outApproachAttributeInput(self._context)


class RootLuAnalog_hi_res_outApproach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach'
        self.attribute = RootLuAnalog_hi_res_outApproachAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outApproachTrigger(self._context)


class RootLuAnalog_hi_res_outTip_voltageTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.trigger'


class RootLuAnalog_hi_res_outTip_voltageAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.input'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outTip_voltageAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.current_output_value'


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_offset'


class RootLuAnalog_hi_res_outTip_voltageAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.output_gain'


class RootLuAnalog_hi_res_outTip_voltageAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.static_value'


class RootLuAnalog_hi_res_outTip_voltageAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.slew_rate'


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_gain'


class RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outTip_voltageAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.filter_number'


class RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outTip_voltageAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outTip_voltageAttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outTip_voltageAttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outTip_voltageAttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outTip_voltageAttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outTip_voltageAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outTip_voltageAttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outTip_voltageAttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outTip_voltageAttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outTip_voltageAttributeInput(self._context)


class RootLuAnalog_hi_res_outTip_voltage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage'
        self.attribute = RootLuAnalog_hi_res_outTip_voltageAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outTip_voltageTrigger(self._context)


class RootLuAnalog_hi_res_outPosition_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.trigger'


class RootLuAnalog_hi_res_outPosition_zAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_zAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_zAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_zAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_zAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_zAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_zAttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_zAttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_zAttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_zAttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_zAttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_zAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_zAttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_zAttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_zAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_zAttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_zAttributeInput(self._context)


class RootLuAnalog_hi_res_outPosition_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z'
        self.attribute = RootLuAnalog_hi_res_outPosition_zAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outPosition_zTrigger(self._context)


class RootLuAnalog_hi_res_outOut7Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.trigger'


class RootLuAnalog_hi_res_outOut7AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.input'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outOut7AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.current_output_value'


class RootLuAnalog_hi_res_outOut7AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_offset'


class RootLuAnalog_hi_res_outOut7AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.output_gain'


class RootLuAnalog_hi_res_outOut7AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.static_value'


class RootLuAnalog_hi_res_outOut7AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.slew_rate'


class RootLuAnalog_hi_res_outOut7AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_gain'


class RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outOut7AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.filter_number'


class RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outOut7Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outOut7AttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outOut7AttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outOut7AttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outOut7AttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outOut7AttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outOut7AttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outOut7AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outOut7AttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outOut7AttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outOut7AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outOut7AttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outOut7AttributeInput(self._context)


class RootLuAnalog_hi_res_outOut7(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7'
        self.attribute = RootLuAnalog_hi_res_outOut7Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outOut7Trigger(self._context)


class RootLuAnalog_hi_res_outUser2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.trigger'


class RootLuAnalog_hi_res_outUser2AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser2AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser2AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.output_gain'


class RootLuAnalog_hi_res_outUser2AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.static_value'


class RootLuAnalog_hi_res_outUser2AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser2AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.filter_number'


class RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser2AttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser2AttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser2AttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser2AttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser2AttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser2AttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser2AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser2AttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser2AttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser2AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser2AttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outUser2AttributeInput(self._context)


class RootLuAnalog_hi_res_outUser2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2'
        self.attribute = RootLuAnalog_hi_res_outUser2Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outUser2Trigger(self._context)


class RootLuAnalog_hi_res_outUser3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.trigger'


class RootLuAnalog_hi_res_outUser3AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser3AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser3AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser3AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.output_gain'


class RootLuAnalog_hi_res_outUser3AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.static_value'


class RootLuAnalog_hi_res_outUser3AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser3AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser3AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.filter_number'


class RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser3AttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser3AttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser3AttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser3AttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser3AttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser3AttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser3AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser3AttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser3AttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser3AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser3AttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outUser3AttributeInput(self._context)


class RootLuAnalog_hi_res_outUser3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3'
        self.attribute = RootLuAnalog_hi_res_outUser3Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outUser3Trigger(self._context)


class RootLuAnalog_hi_res_outOut8Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.trigger'


class RootLuAnalog_hi_res_outOut8AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.input'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outOut8AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.current_output_value'


class RootLuAnalog_hi_res_outOut8AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_offset'


class RootLuAnalog_hi_res_outOut8AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.output_gain'


class RootLuAnalog_hi_res_outOut8AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.static_value'


class RootLuAnalog_hi_res_outOut8AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.slew_rate'


class RootLuAnalog_hi_res_outOut8AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_gain'


class RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outOut8AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.filter_number'


class RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outOut8Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outOut8AttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outOut8AttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outOut8AttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outOut8AttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outOut8AttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outOut8AttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outOut8AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outOut8AttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outOut8AttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outOut8AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outOut8AttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outOut8AttributeInput(self._context)


class RootLuAnalog_hi_res_outOut8(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8'
        self.attribute = RootLuAnalog_hi_res_outOut8Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outOut8Trigger(self._context)


class RootLuAnalog_hi_res_outUser4Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.trigger'


class RootLuAnalog_hi_res_outUser4AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser4AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser4AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser4AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.output_gain'


class RootLuAnalog_hi_res_outUser4AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.static_value'


class RootLuAnalog_hi_res_outUser4AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser4AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser4AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.filter_number'


class RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser4Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser4AttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser4AttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser4AttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser4AttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser4AttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser4AttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser4AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser4AttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser4AttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser4AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser4AttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outUser4AttributeInput(self._context)


class RootLuAnalog_hi_res_outUser4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4'
        self.attribute = RootLuAnalog_hi_res_outUser4Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outUser4Trigger(self._context)


class RootLuAnalog_hi_res_outPosition_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.trigger'


class RootLuAnalog_hi_res_outPosition_xAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_xAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_xAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_xAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_xAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_xAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_xAttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_xAttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_xAttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_xAttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_xAttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_xAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_xAttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_xAttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_xAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_xAttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_xAttributeInput(self._context)


class RootLuAnalog_hi_res_outPosition_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x'
        self.attribute = RootLuAnalog_hi_res_outPosition_xAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outPosition_xTrigger(self._context)


class RootLuAnalog_hi_res_outUser1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.trigger'


class RootLuAnalog_hi_res_outUser1AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser1AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser1AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser1AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.output_gain'


class RootLuAnalog_hi_res_outUser1AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.static_value'


class RootLuAnalog_hi_res_outUser1AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser1AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser1AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.filter_number'


class RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser1AttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser1AttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser1AttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser1AttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser1AttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser1AttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser1AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser1AttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser1AttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser1AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser1AttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outUser1AttributeInput(self._context)


class RootLuAnalog_hi_res_outUser1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1'
        self.attribute = RootLuAnalog_hi_res_outUser1Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outUser1Trigger(self._context)


class RootLuAnalog_hi_res_outPosition_wTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.trigger'


class RootLuAnalog_hi_res_outPosition_wAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_wAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_wAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_wAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_wAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_wAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_wAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute'
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_binary_vec(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_wAttributeFilter_number(self._context)
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_delay(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_wAttributeModulation(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dir(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_wAttributeFilter_coeff_vec(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarity(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabled(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_wAttributeCalib_gain(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_wAttributeSlew_rate(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_wAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_wAttributeOutput_gain(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_wAttributeModulation_input(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_wAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_wAttributeCurrent_output_value(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_gain(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_wAttributeInput(self._context)


class RootLuAnalog_hi_res_outPosition_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w'
        self.attribute = RootLuAnalog_hi_res_outPosition_wAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_outPosition_wTrigger(self._context)


class RootLuAnalog_hi_res_out(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out'
        self.position_w = RootLuAnalog_hi_res_outPosition_w(self._context)
        self.user1 = RootLuAnalog_hi_res_outUser1(self._context)
        self.position_x = RootLuAnalog_hi_res_outPosition_x(self._context)
        self.user4 = RootLuAnalog_hi_res_outUser4(self._context)
        self.out8 = RootLuAnalog_hi_res_outOut8(self._context)
        self.user3 = RootLuAnalog_hi_res_outUser3(self._context)
        self.user2 = RootLuAnalog_hi_res_outUser2(self._context)
        self.out7 = RootLuAnalog_hi_res_outOut7(self._context)
        self.position_z = RootLuAnalog_hi_res_outPosition_z(self._context)
        self.tip_voltage = RootLuAnalog_hi_res_outTip_voltage(self._context)
        self.approach = RootLuAnalog_hi_res_outApproach(self._context)
        self.position_y = RootLuAnalog_hi_res_outPosition_y(self._context)


class RootLuScanheadInstanceTriggerEnable_readout_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_readout_laser'


class RootLuScanheadInstanceTriggerDisable_electro_thermal_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_electro_thermal_excitation'


class RootLuScanheadInstanceTriggerEnable_piezo_electric_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_piezo_electric_excitation'


class RootLuScanheadInstanceTriggerDisable_readout_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_readout_laser'


class RootLuScanheadInstanceTriggerApply_tilt_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.apply_tilt_mode'


class RootLuScanheadInstanceTriggerEnable_pte_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_pte_laser'


class RootLuScanheadInstanceTriggerEnable_electro_thermal_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_electro_thermal_excitation'


class RootLuScanheadInstanceTriggerDisable_piezo_electric_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_piezo_electric_excitation'


class RootLuScanheadInstanceTriggerApply_addon_module_attributes(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.apply_addon_module_attributes'


class RootLuScanheadInstanceTriggerDisable_pte_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_pte_laser'


class RootLuScanheadInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger'
        self.disable_pte_laser = RootLuScanheadInstanceTriggerDisable_pte_laser(self._context)
        self.apply_addon_module_attributes = RootLuScanheadInstanceTriggerApply_addon_module_attributes(self._context)
        self.disable_piezo_electric_excitation = RootLuScanheadInstanceTriggerDisable_piezo_electric_excitation(self._context)
        self.enable_electro_thermal_excitation = RootLuScanheadInstanceTriggerEnable_electro_thermal_excitation(self._context)
        self.enable_pte_laser = RootLuScanheadInstanceTriggerEnable_pte_laser(self._context)
        self.apply_tilt_mode = RootLuScanheadInstanceTriggerApply_tilt_mode(self._context)
        self.disable_readout_laser = RootLuScanheadInstanceTriggerDisable_readout_laser(self._context)
        self.enable_piezo_electric_excitation = RootLuScanheadInstanceTriggerEnable_piezo_electric_excitation(self._context)
        self.disable_electro_thermal_excitation = RootLuScanheadInstanceTriggerDisable_electro_thermal_excitation(self._context)
        self.enable_readout_laser = RootLuScanheadInstanceTriggerEnable_readout_laser(self._context)


class RootLuScanheadInstanceAttributePte_laser_setpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.pte_laser_setpoint'


class RootLuScanheadInstanceAttributeTypeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.type.enum'

    @property
    def afsem(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.afsem'))

    @afsem.setter
    def afsem(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.afsem', int(new_val))

    @property
    def e_stm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.e_stm'))

    @e_stm.setter
    def e_stm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.e_stm', int(new_val))

    @property
    def dummy11(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy11'))

    @dummy11.setter
    def dummy11(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy11', int(new_val))

    @property
    def dummy7(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy7'))

    @dummy7.setter
    def dummy7(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy7', int(new_val))

    @property
    def dummy6(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy6'))

    @dummy6.setter
    def dummy6(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy6', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.unknown', int(new_val))

    @property
    def e_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.e_afm'))

    @e_afm.setter
    def e_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.e_afm', int(new_val))

    @property
    def semafm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.semafm'))

    @semafm.setter
    def semafm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.semafm', int(new_val))

    @property
    def p6(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.p6'))

    @p6.setter
    def p6(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.p6', int(new_val))

    @property
    def p6_mount(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.p6_mount'))

    @p6_mount.setter
    def p6_mount(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.p6_mount', int(new_val))

    @property
    def lens_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.lens_afm'))

    @lens_afm.setter
    def lens_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.lens_afm', int(new_val))

    @property
    def dummy5(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy5'))

    @dummy5.setter
    def dummy5(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy5', int(new_val))

    @property
    def nanite_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.nanite_afm'))

    @nanite_afm.setter
    def nanite_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.nanite_afm', int(new_val))

    @property
    def dummy10(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy10'))

    @dummy10.setter
    def dummy10(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy10', int(new_val))

    @property
    def dummy8(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy8'))

    @dummy8.setter
    def dummy8(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy8', int(new_val))

    @property
    def cytomass(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.cytomass'))

    @cytomass.setter
    def cytomass(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.cytomass', int(new_val))

    @property
    def flex_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.flex_afm'))

    @flex_afm.setter
    def flex_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.flex_afm', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.not_connected', int(new_val))

    @property
    def core_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.core_afm'))

    @core_afm.setter
    def core_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.core_afm', int(new_val))

    @property
    def dummy4(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy4'))

    @dummy4.setter
    def dummy4(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy4', int(new_val))

    @property
    def dummy3(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy3'))

    @dummy3.setter
    def dummy3(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy3', int(new_val))

    @property
    def arac(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.arac'))

    @arac.setter
    def arac(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.arac', int(new_val))


class RootLuScanheadInstanceAttributeType(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.type'
        self.enum = RootLuScanheadInstanceAttributeTypeEnum(self._context)


class RootLuScanheadInstanceAttributeAddon_module_mode_tip_accessEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum'

    @property
    def no_connection(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.no_connection'))

    @no_connection.setter
    def no_connection(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.no_connection', int(new_val))

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.internal', int(new_val))

    @property
    def both(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.both'))

    @both.setter
    def both(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.both', int(new_val))

    @property
    def external(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.external'))

    @external.setter
    def external(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_access.enum.external', int(new_val))


class RootLuScanheadInstanceAttributeAddon_module_mode_tip_access(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.addon_module_mode_tip_access'
        self.enum = RootLuScanheadInstanceAttributeAddon_module_mode_tip_accessEnum(self._context)


class RootLuScanheadInstanceAttributeAddon_module_mode_ssrmEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum'

    @property
    def invalid02(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid02'))

    @invalid02.setter
    def invalid02(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid02', int(new_val))

    @property
    def invalid01(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid01'))

    @invalid01.setter
    def invalid01(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid01', int(new_val))

    @property
    def invalid08(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid08'))

    @invalid08.setter
    def invalid08(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid08', int(new_val))

    @property
    def invalid06(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid06'))

    @invalid06.setter
    def invalid06(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid06', int(new_val))

    @property
    def invalid10(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid10'))

    @invalid10.setter
    def invalid10(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid10', int(new_val))

    @property
    def invalid13(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid13'))

    @invalid13.setter
    def invalid13(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid13', int(new_val))

    @property
    def lever_volt_sample_amp(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.lever_volt_sample_amp'))

    @lever_volt_sample_amp.setter
    def lever_volt_sample_amp(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.lever_volt_sample_amp', int(new_val))

    @property
    def lever_amp_sample_volt(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.lever_amp_sample_volt'))

    @lever_amp_sample_volt.setter
    def lever_amp_sample_volt(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.lever_amp_sample_volt', int(new_val))

    @property
    def invalid14(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid14'))

    @invalid14.setter
    def invalid14(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid14', int(new_val))

    @property
    def invalid07(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid07'))

    @invalid07.setter
    def invalid07(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid07', int(new_val))

    @property
    def invalid11(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid11'))

    @invalid11.setter
    def invalid11(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid11', int(new_val))

    @property
    def nothing_connected(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.nothing_connected'))

    @nothing_connected.setter
    def nothing_connected(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.nothing_connected', int(new_val))

    @property
    def invalid03(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid03'))

    @invalid03.setter
    def invalid03(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid03', int(new_val))

    @property
    def invalid04(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid04'))

    @invalid04.setter
    def invalid04(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid04', int(new_val))

    @property
    def invalid12(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid12'))

    @invalid12.setter
    def invalid12(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_ssrm.enum.invalid12', int(new_val))


class RootLuScanheadInstanceAttributeAddon_module_mode_ssrm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.addon_module_mode_ssrm'
        self.enum = RootLuScanheadInstanceAttributeAddon_module_mode_ssrmEnum(self._context)


class RootLuScanheadInstanceAttributeReadout_laser_setpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.readout_laser_setpoint'


class RootLuScanheadInstanceAttributeTilt_angle_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_angle_y'


class RootLuScanheadInstanceAttributeAddon_module_mode_tip_currentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum'

    @property
    def invalid4(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid4'))

    @invalid4.setter
    def invalid4(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid4', int(new_val))

    @property
    def invalid2(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid2'))

    @invalid2.setter
    def invalid2(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid2', int(new_val))

    @property
    def invalid5(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid5'))

    @invalid5.setter
    def invalid5(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid5', int(new_val))

    @property
    def mega100(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.mega100'))

    @mega100.setter
    def mega100(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.mega100', int(new_val))

    @property
    def kilo10(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.kilo10'))

    @kilo10.setter
    def kilo10(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.kilo10', int(new_val))

    @property
    def invalid1(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid1'))

    @invalid1.setter
    def invalid1(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid1', int(new_val))

    @property
    def invalid3(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid3'))

    @invalid3.setter
    def invalid3(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.invalid3', int(new_val))

    @property
    def mega1(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.mega1'))

    @mega1.setter
    def mega1(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.mega1', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.addon_module_mode_tip_current.enum.disabled', int(new_val))


class RootLuScanheadInstanceAttributeAddon_module_mode_tip_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.addon_module_mode_tip_current'
        self.enum = RootLuScanheadInstanceAttributeAddon_module_mode_tip_currentEnum(self._context)


class RootLuScanheadInstanceAttributeTilt_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_mode.enum'

    @property
    def override(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.tilt_mode.enum.override'))

    @override.setter
    def override(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.tilt_mode.enum.override', int(new_val))

    @property
    def measured(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.tilt_mode.enum.measured'))

    @measured.setter
    def measured(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.tilt_mode.enum.measured', int(new_val))


class RootLuScanheadInstanceAttributeTilt_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_mode'
        self.enum = RootLuScanheadInstanceAttributeTilt_modeEnum(self._context)


class RootLuScanheadInstanceAttributeTilt_angle_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_angle_x'


class RootLuScanheadInstanceAttributeReadout_laser_power_monitor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.readout_laser_power_monitor'


class RootLuScanheadInstanceAttributePte_laser_power_monitor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.pte_laser_power_monitor'


class RootLuScanheadInstanceAttributeHas_z_sensorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_z_sensor.enum'

    @property
    def no(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_z_sensor.enum.no'))

    @no.setter
    def no(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_z_sensor.enum.no', int(new_val))

    @property
    def yes(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_z_sensor.enum.yes'))

    @yes.setter
    def yes(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_z_sensor.enum.yes', int(new_val))


class RootLuScanheadInstanceAttributeHas_z_sensor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_z_sensor'
        self.enum = RootLuScanheadInstanceAttributeHas_z_sensorEnum(self._context)


class RootLuScanheadInstanceAttributeHas_xy_sensorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_xy_sensor.enum'

    @property
    def no(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.no'))

    @no.setter
    def no(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.no', int(new_val))

    @property
    def yes(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.yes'))

    @yes.setter
    def yes(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.yes', int(new_val))


class RootLuScanheadInstanceAttributeHas_xy_sensor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_xy_sensor'
        self.enum = RootLuScanheadInstanceAttributeHas_xy_sensorEnum(self._context)


class RootLuScanheadInstanceAttributeType_addon_moduleEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.type_addon_module.enum'

    @property
    def ssrm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type_addon_module.enum.ssrm'))

    @ssrm.setter
    def ssrm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type_addon_module.enum.ssrm', int(new_val))

    @property
    def tip_current(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type_addon_module.enum.tip_current'))

    @tip_current.setter
    def tip_current(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type_addon_module.enum.tip_current', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type_addon_module.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type_addon_module.enum.not_connected', int(new_val))

    @property
    def tip_access(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type_addon_module.enum.tip_access'))

    @tip_access.setter
    def tip_access(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type_addon_module.enum.tip_access', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type_addon_module.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type_addon_module.enum.unknown', int(new_val))


class RootLuScanheadInstanceAttributeType_addon_module(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.type_addon_module'
        self.enum = RootLuScanheadInstanceAttributeType_addon_moduleEnum(self._context)


class RootLuScanheadInstanceAttributeFast_in2_channelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.fast_in2_channel.enum'

    @property
    def addon_in(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.addon_in'))

    @addon_in.setter
    def addon_in(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.addon_in', int(new_val))

    @property
    def friction_channel(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.friction_channel'))

    @friction_channel.setter
    def friction_channel(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.friction_channel', int(new_val))

    @property
    def pte_monitor(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.pte_monitor'))

    @pte_monitor.setter
    def pte_monitor(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.pte_monitor', int(new_val))


class RootLuScanheadInstanceAttributeFast_in2_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.fast_in2_channel'
        self.enum = RootLuScanheadInstanceAttributeFast_in2_channelEnum(self._context)


class RootLuScanheadInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute'
        self.fast_in2_channel = RootLuScanheadInstanceAttributeFast_in2_channel(self._context)
        self.type_addon_module = RootLuScanheadInstanceAttributeType_addon_module(self._context)
        self.has_xy_sensor = RootLuScanheadInstanceAttributeHas_xy_sensor(self._context)
        self.has_z_sensor = RootLuScanheadInstanceAttributeHas_z_sensor(self._context)
        self.pte_laser_power_monitor = RootLuScanheadInstanceAttributePte_laser_power_monitor(self._context)
        self.readout_laser_power_monitor = RootLuScanheadInstanceAttributeReadout_laser_power_monitor(self._context)
        self.tilt_angle_x = RootLuScanheadInstanceAttributeTilt_angle_x(self._context)
        self.tilt_mode = RootLuScanheadInstanceAttributeTilt_mode(self._context)
        self.addon_module_mode_tip_current = RootLuScanheadInstanceAttributeAddon_module_mode_tip_current(self._context)
        self.tilt_angle_y = RootLuScanheadInstanceAttributeTilt_angle_y(self._context)
        self.readout_laser_setpoint = RootLuScanheadInstanceAttributeReadout_laser_setpoint(self._context)
        self.addon_module_mode_ssrm = RootLuScanheadInstanceAttributeAddon_module_mode_ssrm(self._context)
        self.addon_module_mode_tip_access = RootLuScanheadInstanceAttributeAddon_module_mode_tip_access(self._context)
        self.type = RootLuScanheadInstanceAttributeType(self._context)
        self.pte_laser_setpoint = RootLuScanheadInstanceAttributePte_laser_setpoint(self._context)


class RootLuScanheadInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance'
        self.attribute = RootLuScanheadInstanceAttribute(self._context)
        self.trigger = RootLuScanheadInstanceTrigger(self._context)


class RootLuScanhead(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead'
        self.instance = RootLuScanheadInstance(self._context)


class RootLuRamp_generatorAlternate_zTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.stop'


class RootLuRamp_generatorAlternate_zTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.prepare'


class RootLuRamp_generatorAlternate_zTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.abort'


class RootLuRamp_generatorAlternate_zTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.start'


class RootLuRamp_generatorAlternate_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger'
        self.start = RootLuRamp_generatorAlternate_zTriggerStart(self._context)
        self.abort = RootLuRamp_generatorAlternate_zTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorAlternate_zTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorAlternate_zTriggerStop(self._context)


class RootLuRamp_generatorAlternate_zAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.lower_limit'


class RootLuRamp_generatorAlternate_zAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorAlternate_zAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.status'
        self.enum = RootLuRamp_generatorAlternate_zAttributeStatusEnum(self._context)


class RootLuRamp_generatorAlternate_zAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_time'


class RootLuRamp_generatorAlternate_zAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_absolute'


class RootLuRamp_generatorAlternate_zAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.current_value'


class RootLuRamp_generatorAlternate_zAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_relative'


class RootLuRamp_generatorAlternate_zAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.upper_limit'


class RootLuRamp_generatorAlternate_zAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorAlternate_zAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_mode'
        self.enum = RootLuRamp_generatorAlternate_zAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorAlternate_zAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_speed'


class RootLuRamp_generatorAlternate_zAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorAlternate_zAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorAlternate_zAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorAlternate_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute'
        self.end_value_mode = RootLuRamp_generatorAlternate_zAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorAlternate_zAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorAlternate_zAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorAlternate_zAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorAlternate_zAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorAlternate_zAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorAlternate_zAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorAlternate_zAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorAlternate_zAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorAlternate_zAttributeLower_limit(self._context)


class RootLuRamp_generatorAlternate_zBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.busy.is_moving'


class RootLuRamp_generatorAlternate_zBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.busy'
        self.is_moving = RootLuRamp_generatorAlternate_zBusyIs_moving(self._context)


class RootLuRamp_generatorAlternate_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z'
        self.busy = RootLuRamp_generatorAlternate_zBusy(self._context)
        self.attribute = RootLuRamp_generatorAlternate_zAttribute(self._context)
        self.trigger = RootLuRamp_generatorAlternate_zTrigger(self._context)


class RootLuRamp_generatorApproachTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.stop'


class RootLuRamp_generatorApproachTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.prepare'


class RootLuRamp_generatorApproachTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.abort'


class RootLuRamp_generatorApproachTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.start'


class RootLuRamp_generatorApproachTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger'
        self.start = RootLuRamp_generatorApproachTriggerStart(self._context)
        self.abort = RootLuRamp_generatorApproachTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorApproachTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorApproachTriggerStop(self._context)


class RootLuRamp_generatorApproachAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.lower_limit'


class RootLuRamp_generatorApproachAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorApproachAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.status'
        self.enum = RootLuRamp_generatorApproachAttributeStatusEnum(self._context)


class RootLuRamp_generatorApproachAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_time'


class RootLuRamp_generatorApproachAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_absolute'


class RootLuRamp_generatorApproachAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.current_value'


class RootLuRamp_generatorApproachAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_relative'


class RootLuRamp_generatorApproachAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.upper_limit'


class RootLuRamp_generatorApproachAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorApproachAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_mode'
        self.enum = RootLuRamp_generatorApproachAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorApproachAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_speed'


class RootLuRamp_generatorApproachAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorApproachAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorApproachAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorApproachAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute'
        self.end_value_mode = RootLuRamp_generatorApproachAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorApproachAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorApproachAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorApproachAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorApproachAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorApproachAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorApproachAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorApproachAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorApproachAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorApproachAttributeLower_limit(self._context)


class RootLuRamp_generatorApproachBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.busy.is_moving'


class RootLuRamp_generatorApproachBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.busy'
        self.is_moving = RootLuRamp_generatorApproachBusyIs_moving(self._context)


class RootLuRamp_generatorApproach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach'
        self.busy = RootLuRamp_generatorApproachBusy(self._context)
        self.attribute = RootLuRamp_generatorApproachAttribute(self._context)
        self.trigger = RootLuRamp_generatorApproachTrigger(self._context)


class RootLuRamp_generatorTip_voltageTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.stop'


class RootLuRamp_generatorTip_voltageTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.prepare'


class RootLuRamp_generatorTip_voltageTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.abort'


class RootLuRamp_generatorTip_voltageTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.start'


class RootLuRamp_generatorTip_voltageTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger'
        self.start = RootLuRamp_generatorTip_voltageTriggerStart(self._context)
        self.abort = RootLuRamp_generatorTip_voltageTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorTip_voltageTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorTip_voltageTriggerStop(self._context)


class RootLuRamp_generatorTip_voltageAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.lower_limit'


class RootLuRamp_generatorTip_voltageAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorTip_voltageAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.status'
        self.enum = RootLuRamp_generatorTip_voltageAttributeStatusEnum(self._context)


class RootLuRamp_generatorTip_voltageAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_time'


class RootLuRamp_generatorTip_voltageAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_absolute'


class RootLuRamp_generatorTip_voltageAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.current_value'


class RootLuRamp_generatorTip_voltageAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_relative'


class RootLuRamp_generatorTip_voltageAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.upper_limit'


class RootLuRamp_generatorTip_voltageAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorTip_voltageAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_mode'
        self.enum = RootLuRamp_generatorTip_voltageAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorTip_voltageAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_speed'


class RootLuRamp_generatorTip_voltageAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorTip_voltageAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorTip_voltageAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorTip_voltageAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute'
        self.end_value_mode = RootLuRamp_generatorTip_voltageAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorTip_voltageAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorTip_voltageAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorTip_voltageAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorTip_voltageAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorTip_voltageAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorTip_voltageAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorTip_voltageAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorTip_voltageAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorTip_voltageAttributeLower_limit(self._context)


class RootLuRamp_generatorTip_voltageBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.busy.is_moving'


class RootLuRamp_generatorTip_voltageBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.busy'
        self.is_moving = RootLuRamp_generatorTip_voltageBusyIs_moving(self._context)


class RootLuRamp_generatorTip_voltage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage'
        self.busy = RootLuRamp_generatorTip_voltageBusy(self._context)
        self.attribute = RootLuRamp_generatorTip_voltageAttribute(self._context)
        self.trigger = RootLuRamp_generatorTip_voltageTrigger(self._context)


class RootLuRamp_generatorVirtual0TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.stop'


class RootLuRamp_generatorVirtual0TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.prepare'


class RootLuRamp_generatorVirtual0TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.abort'


class RootLuRamp_generatorVirtual0TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.start'


class RootLuRamp_generatorVirtual0Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger'
        self.start = RootLuRamp_generatorVirtual0TriggerStart(self._context)
        self.abort = RootLuRamp_generatorVirtual0TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorVirtual0TriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorVirtual0TriggerStop(self._context)


class RootLuRamp_generatorVirtual0AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.lower_limit'


class RootLuRamp_generatorVirtual0AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorVirtual0AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.status'
        self.enum = RootLuRamp_generatorVirtual0AttributeStatusEnum(self._context)


class RootLuRamp_generatorVirtual0AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_time'


class RootLuRamp_generatorVirtual0AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_absolute'


class RootLuRamp_generatorVirtual0AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.current_value'


class RootLuRamp_generatorVirtual0AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_relative'


class RootLuRamp_generatorVirtual0AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.upper_limit'


class RootLuRamp_generatorVirtual0AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorVirtual0AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_mode'
        self.enum = RootLuRamp_generatorVirtual0AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorVirtual0AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_speed'


class RootLuRamp_generatorVirtual0AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorVirtual0AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorVirtual0AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorVirtual0Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute'
        self.end_value_mode = RootLuRamp_generatorVirtual0AttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorVirtual0AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorVirtual0AttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorVirtual0AttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorVirtual0AttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorVirtual0AttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorVirtual0AttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorVirtual0AttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorVirtual0AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorVirtual0AttributeLower_limit(self._context)


class RootLuRamp_generatorVirtual0BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.busy.is_moving'


class RootLuRamp_generatorVirtual0Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.busy'
        self.is_moving = RootLuRamp_generatorVirtual0BusyIs_moving(self._context)


class RootLuRamp_generatorVirtual0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0'
        self.busy = RootLuRamp_generatorVirtual0Busy(self._context)
        self.attribute = RootLuRamp_generatorVirtual0Attribute(self._context)
        self.trigger = RootLuRamp_generatorVirtual0Trigger(self._context)


class RootLuRamp_generatorTestTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.stop'


class RootLuRamp_generatorTestTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.prepare'


class RootLuRamp_generatorTestTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.abort'


class RootLuRamp_generatorTestTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.start'


class RootLuRamp_generatorTestTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger'
        self.start = RootLuRamp_generatorTestTriggerStart(self._context)
        self.abort = RootLuRamp_generatorTestTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorTestTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorTestTriggerStop(self._context)


class RootLuRamp_generatorTestAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.lower_limit'


class RootLuRamp_generatorTestAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorTestAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.status'
        self.enum = RootLuRamp_generatorTestAttributeStatusEnum(self._context)


class RootLuRamp_generatorTestAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_time'


class RootLuRamp_generatorTestAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_absolute'


class RootLuRamp_generatorTestAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.current_value'


class RootLuRamp_generatorTestAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_relative'


class RootLuRamp_generatorTestAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.upper_limit'


class RootLuRamp_generatorTestAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorTestAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_mode'
        self.enum = RootLuRamp_generatorTestAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorTestAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_speed'


class RootLuRamp_generatorTestAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorTestAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorTestAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorTestAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute'
        self.end_value_mode = RootLuRamp_generatorTestAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorTestAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorTestAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorTestAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorTestAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorTestAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorTestAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorTestAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorTestAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorTestAttributeLower_limit(self._context)


class RootLuRamp_generatorTestBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.busy.is_moving'


class RootLuRamp_generatorTestBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.busy'
        self.is_moving = RootLuRamp_generatorTestBusyIs_moving(self._context)


class RootLuRamp_generatorTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test'
        self.busy = RootLuRamp_generatorTestBusy(self._context)
        self.attribute = RootLuRamp_generatorTestAttribute(self._context)
        self.trigger = RootLuRamp_generatorTestTrigger(self._context)


class RootLuRamp_generatorUser2TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.stop'


class RootLuRamp_generatorUser2TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.prepare'


class RootLuRamp_generatorUser2TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.abort'


class RootLuRamp_generatorUser2TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.start'


class RootLuRamp_generatorUser2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger'
        self.start = RootLuRamp_generatorUser2TriggerStart(self._context)
        self.abort = RootLuRamp_generatorUser2TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorUser2TriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorUser2TriggerStop(self._context)


class RootLuRamp_generatorUser2AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.lower_limit'


class RootLuRamp_generatorUser2AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorUser2AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.status'
        self.enum = RootLuRamp_generatorUser2AttributeStatusEnum(self._context)


class RootLuRamp_generatorUser2AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_time'


class RootLuRamp_generatorUser2AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_absolute'


class RootLuRamp_generatorUser2AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.current_value'


class RootLuRamp_generatorUser2AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_relative'


class RootLuRamp_generatorUser2AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.upper_limit'


class RootLuRamp_generatorUser2AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorUser2AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_mode'
        self.enum = RootLuRamp_generatorUser2AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorUser2AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_speed'


class RootLuRamp_generatorUser2AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorUser2AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorUser2AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorUser2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute'
        self.end_value_mode = RootLuRamp_generatorUser2AttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorUser2AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorUser2AttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorUser2AttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorUser2AttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorUser2AttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorUser2AttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorUser2AttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorUser2AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorUser2AttributeLower_limit(self._context)


class RootLuRamp_generatorUser2BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.busy.is_moving'


class RootLuRamp_generatorUser2Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.busy'
        self.is_moving = RootLuRamp_generatorUser2BusyIs_moving(self._context)


class RootLuRamp_generatorUser2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2'
        self.busy = RootLuRamp_generatorUser2Busy(self._context)
        self.attribute = RootLuRamp_generatorUser2Attribute(self._context)
        self.trigger = RootLuRamp_generatorUser2Trigger(self._context)


class RootLuRamp_generatorUser3TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.trigger.stop'


class RootLuRamp_generatorUser3TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.trigger.prepare'


class RootLuRamp_generatorUser3TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.trigger.abort'


class RootLuRamp_generatorUser3TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.trigger.start'


class RootLuRamp_generatorUser3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.trigger'
        self.start = RootLuRamp_generatorUser3TriggerStart(self._context)
        self.abort = RootLuRamp_generatorUser3TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorUser3TriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorUser3TriggerStop(self._context)


class RootLuRamp_generatorUser3AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.lower_limit'


class RootLuRamp_generatorUser3AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorUser3AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.status'
        self.enum = RootLuRamp_generatorUser3AttributeStatusEnum(self._context)


class RootLuRamp_generatorUser3AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.moving_time'


class RootLuRamp_generatorUser3AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.end_value_absolute'


class RootLuRamp_generatorUser3AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.current_value'


class RootLuRamp_generatorUser3AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.end_value_relative'


class RootLuRamp_generatorUser3AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.upper_limit'


class RootLuRamp_generatorUser3AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorUser3AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.moving_mode'
        self.enum = RootLuRamp_generatorUser3AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorUser3AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.moving_speed'


class RootLuRamp_generatorUser3AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user3.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user3.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorUser3AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorUser3AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorUser3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.attribute'
        self.end_value_mode = RootLuRamp_generatorUser3AttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorUser3AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorUser3AttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorUser3AttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorUser3AttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorUser3AttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorUser3AttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorUser3AttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorUser3AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorUser3AttributeLower_limit(self._context)


class RootLuRamp_generatorUser3BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.busy.is_moving'


class RootLuRamp_generatorUser3Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3.busy'
        self.is_moving = RootLuRamp_generatorUser3BusyIs_moving(self._context)


class RootLuRamp_generatorUser3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user3'
        self.busy = RootLuRamp_generatorUser3Busy(self._context)
        self.attribute = RootLuRamp_generatorUser3Attribute(self._context)
        self.trigger = RootLuRamp_generatorUser3Trigger(self._context)


class RootLuRamp_generatorPosition_yTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.stop'


class RootLuRamp_generatorPosition_yTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.prepare'


class RootLuRamp_generatorPosition_yTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.abort'


class RootLuRamp_generatorPosition_yTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.start'


class RootLuRamp_generatorPosition_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger'
        self.start = RootLuRamp_generatorPosition_yTriggerStart(self._context)
        self.abort = RootLuRamp_generatorPosition_yTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorPosition_yTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorPosition_yTriggerStop(self._context)


class RootLuRamp_generatorPosition_yAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.lower_limit'


class RootLuRamp_generatorPosition_yAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorPosition_yAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.status'
        self.enum = RootLuRamp_generatorPosition_yAttributeStatusEnum(self._context)


class RootLuRamp_generatorPosition_yAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_time'


class RootLuRamp_generatorPosition_yAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_absolute'


class RootLuRamp_generatorPosition_yAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.current_value'


class RootLuRamp_generatorPosition_yAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_relative'


class RootLuRamp_generatorPosition_yAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.upper_limit'


class RootLuRamp_generatorPosition_yAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorPosition_yAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_mode'
        self.enum = RootLuRamp_generatorPosition_yAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorPosition_yAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_speed'


class RootLuRamp_generatorPosition_yAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorPosition_yAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorPosition_yAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorPosition_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute'
        self.end_value_mode = RootLuRamp_generatorPosition_yAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorPosition_yAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorPosition_yAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorPosition_yAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorPosition_yAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorPosition_yAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorPosition_yAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorPosition_yAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorPosition_yAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorPosition_yAttributeLower_limit(self._context)


class RootLuRamp_generatorPosition_yBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.busy.is_moving'


class RootLuRamp_generatorPosition_yBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.busy'
        self.is_moving = RootLuRamp_generatorPosition_yBusyIs_moving(self._context)


class RootLuRamp_generatorPosition_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y'
        self.busy = RootLuRamp_generatorPosition_yBusy(self._context)
        self.attribute = RootLuRamp_generatorPosition_yAttribute(self._context)
        self.trigger = RootLuRamp_generatorPosition_yTrigger(self._context)


class RootLuRamp_generatorCtrl_zTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.stop'


class RootLuRamp_generatorCtrl_zTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.prepare'


class RootLuRamp_generatorCtrl_zTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.abort'


class RootLuRamp_generatorCtrl_zTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.start'


class RootLuRamp_generatorCtrl_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger'
        self.start = RootLuRamp_generatorCtrl_zTriggerStart(self._context)
        self.abort = RootLuRamp_generatorCtrl_zTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorCtrl_zTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorCtrl_zTriggerStop(self._context)


class RootLuRamp_generatorCtrl_zAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.lower_limit'


class RootLuRamp_generatorCtrl_zAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorCtrl_zAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.status'
        self.enum = RootLuRamp_generatorCtrl_zAttributeStatusEnum(self._context)


class RootLuRamp_generatorCtrl_zAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_time'


class RootLuRamp_generatorCtrl_zAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_absolute'


class RootLuRamp_generatorCtrl_zAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.current_value'


class RootLuRamp_generatorCtrl_zAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_relative'


class RootLuRamp_generatorCtrl_zAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.upper_limit'


class RootLuRamp_generatorCtrl_zAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorCtrl_zAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_mode'
        self.enum = RootLuRamp_generatorCtrl_zAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorCtrl_zAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_speed'


class RootLuRamp_generatorCtrl_zAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorCtrl_zAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorCtrl_zAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorCtrl_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute'
        self.end_value_mode = RootLuRamp_generatorCtrl_zAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorCtrl_zAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorCtrl_zAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorCtrl_zAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorCtrl_zAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorCtrl_zAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorCtrl_zAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorCtrl_zAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorCtrl_zAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorCtrl_zAttributeLower_limit(self._context)


class RootLuRamp_generatorCtrl_zBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.busy.is_moving'


class RootLuRamp_generatorCtrl_zBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.busy'
        self.is_moving = RootLuRamp_generatorCtrl_zBusyIs_moving(self._context)


class RootLuRamp_generatorCtrl_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z'
        self.busy = RootLuRamp_generatorCtrl_zBusy(self._context)
        self.attribute = RootLuRamp_generatorCtrl_zAttribute(self._context)
        self.trigger = RootLuRamp_generatorCtrl_zTrigger(self._context)


class RootLuRamp_generatorUser4TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.stop'


class RootLuRamp_generatorUser4TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.prepare'


class RootLuRamp_generatorUser4TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.abort'


class RootLuRamp_generatorUser4TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.start'


class RootLuRamp_generatorUser4Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger'
        self.start = RootLuRamp_generatorUser4TriggerStart(self._context)
        self.abort = RootLuRamp_generatorUser4TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorUser4TriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorUser4TriggerStop(self._context)


class RootLuRamp_generatorUser4AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.lower_limit'


class RootLuRamp_generatorUser4AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorUser4AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.status'
        self.enum = RootLuRamp_generatorUser4AttributeStatusEnum(self._context)


class RootLuRamp_generatorUser4AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_time'


class RootLuRamp_generatorUser4AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_absolute'


class RootLuRamp_generatorUser4AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.current_value'


class RootLuRamp_generatorUser4AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_relative'


class RootLuRamp_generatorUser4AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.upper_limit'


class RootLuRamp_generatorUser4AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorUser4AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_mode'
        self.enum = RootLuRamp_generatorUser4AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorUser4AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_speed'


class RootLuRamp_generatorUser4AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorUser4AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorUser4AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorUser4Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute'
        self.end_value_mode = RootLuRamp_generatorUser4AttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorUser4AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorUser4AttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorUser4AttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorUser4AttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorUser4AttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorUser4AttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorUser4AttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorUser4AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorUser4AttributeLower_limit(self._context)


class RootLuRamp_generatorUser4BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.busy.is_moving'


class RootLuRamp_generatorUser4Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.busy'
        self.is_moving = RootLuRamp_generatorUser4BusyIs_moving(self._context)


class RootLuRamp_generatorUser4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4'
        self.busy = RootLuRamp_generatorUser4Busy(self._context)
        self.attribute = RootLuRamp_generatorUser4Attribute(self._context)
        self.trigger = RootLuRamp_generatorUser4Trigger(self._context)


class RootLuRamp_generatorPosition_xTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.stop'


class RootLuRamp_generatorPosition_xTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.prepare'


class RootLuRamp_generatorPosition_xTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.abort'


class RootLuRamp_generatorPosition_xTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.start'


class RootLuRamp_generatorPosition_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger'
        self.start = RootLuRamp_generatorPosition_xTriggerStart(self._context)
        self.abort = RootLuRamp_generatorPosition_xTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorPosition_xTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorPosition_xTriggerStop(self._context)


class RootLuRamp_generatorPosition_xAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.lower_limit'


class RootLuRamp_generatorPosition_xAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorPosition_xAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.status'
        self.enum = RootLuRamp_generatorPosition_xAttributeStatusEnum(self._context)


class RootLuRamp_generatorPosition_xAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_time'


class RootLuRamp_generatorPosition_xAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_absolute'


class RootLuRamp_generatorPosition_xAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.current_value'


class RootLuRamp_generatorPosition_xAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_relative'


class RootLuRamp_generatorPosition_xAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.upper_limit'


class RootLuRamp_generatorPosition_xAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorPosition_xAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_mode'
        self.enum = RootLuRamp_generatorPosition_xAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorPosition_xAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_speed'


class RootLuRamp_generatorPosition_xAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorPosition_xAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorPosition_xAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorPosition_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute'
        self.end_value_mode = RootLuRamp_generatorPosition_xAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorPosition_xAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorPosition_xAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorPosition_xAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorPosition_xAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorPosition_xAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorPosition_xAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorPosition_xAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorPosition_xAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorPosition_xAttributeLower_limit(self._context)


class RootLuRamp_generatorPosition_xBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.busy.is_moving'


class RootLuRamp_generatorPosition_xBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.busy'
        self.is_moving = RootLuRamp_generatorPosition_xBusyIs_moving(self._context)


class RootLuRamp_generatorPosition_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x'
        self.busy = RootLuRamp_generatorPosition_xBusy(self._context)
        self.attribute = RootLuRamp_generatorPosition_xAttribute(self._context)
        self.trigger = RootLuRamp_generatorPosition_xTrigger(self._context)


class RootLuRamp_generatorUser1TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.stop'


class RootLuRamp_generatorUser1TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.prepare'


class RootLuRamp_generatorUser1TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.abort'


class RootLuRamp_generatorUser1TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.start'


class RootLuRamp_generatorUser1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger'
        self.start = RootLuRamp_generatorUser1TriggerStart(self._context)
        self.abort = RootLuRamp_generatorUser1TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorUser1TriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorUser1TriggerStop(self._context)


class RootLuRamp_generatorUser1AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.lower_limit'


class RootLuRamp_generatorUser1AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorUser1AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.status'
        self.enum = RootLuRamp_generatorUser1AttributeStatusEnum(self._context)


class RootLuRamp_generatorUser1AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_time'


class RootLuRamp_generatorUser1AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_absolute'


class RootLuRamp_generatorUser1AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.current_value'


class RootLuRamp_generatorUser1AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_relative'


class RootLuRamp_generatorUser1AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.upper_limit'


class RootLuRamp_generatorUser1AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorUser1AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_mode'
        self.enum = RootLuRamp_generatorUser1AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorUser1AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_speed'


class RootLuRamp_generatorUser1AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorUser1AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorUser1AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorUser1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute'
        self.end_value_mode = RootLuRamp_generatorUser1AttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorUser1AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorUser1AttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorUser1AttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorUser1AttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorUser1AttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorUser1AttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorUser1AttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorUser1AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorUser1AttributeLower_limit(self._context)


class RootLuRamp_generatorUser1BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.busy.is_moving'


class RootLuRamp_generatorUser1Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.busy'
        self.is_moving = RootLuRamp_generatorUser1BusyIs_moving(self._context)


class RootLuRamp_generatorUser1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1'
        self.busy = RootLuRamp_generatorUser1Busy(self._context)
        self.attribute = RootLuRamp_generatorUser1Attribute(self._context)
        self.trigger = RootLuRamp_generatorUser1Trigger(self._context)


class RootLuRamp_generatorPosition_wTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.trigger.stop'


class RootLuRamp_generatorPosition_wTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.trigger.prepare'


class RootLuRamp_generatorPosition_wTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.trigger.abort'


class RootLuRamp_generatorPosition_wTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.trigger.start'


class RootLuRamp_generatorPosition_wTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.trigger'
        self.start = RootLuRamp_generatorPosition_wTriggerStart(self._context)
        self.abort = RootLuRamp_generatorPosition_wTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorPosition_wTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorPosition_wTriggerStop(self._context)


class RootLuRamp_generatorPosition_wAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.lower_limit'


class RootLuRamp_generatorPosition_wAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorPosition_wAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.status'
        self.enum = RootLuRamp_generatorPosition_wAttributeStatusEnum(self._context)


class RootLuRamp_generatorPosition_wAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.moving_time'


class RootLuRamp_generatorPosition_wAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.end_value_absolute'


class RootLuRamp_generatorPosition_wAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.current_value'


class RootLuRamp_generatorPosition_wAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.end_value_relative'


class RootLuRamp_generatorPosition_wAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.upper_limit'


class RootLuRamp_generatorPosition_wAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorPosition_wAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.moving_mode'
        self.enum = RootLuRamp_generatorPosition_wAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorPosition_wAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.moving_speed'


class RootLuRamp_generatorPosition_wAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_w.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_w.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorPosition_wAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorPosition_wAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorPosition_wAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.attribute'
        self.end_value_mode = RootLuRamp_generatorPosition_wAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorPosition_wAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorPosition_wAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorPosition_wAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorPosition_wAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorPosition_wAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorPosition_wAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorPosition_wAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorPosition_wAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorPosition_wAttributeLower_limit(self._context)


class RootLuRamp_generatorPosition_wBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.busy.is_moving'


class RootLuRamp_generatorPosition_wBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w.busy'
        self.is_moving = RootLuRamp_generatorPosition_wBusyIs_moving(self._context)


class RootLuRamp_generatorPosition_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_w'
        self.busy = RootLuRamp_generatorPosition_wBusy(self._context)
        self.attribute = RootLuRamp_generatorPosition_wAttribute(self._context)
        self.trigger = RootLuRamp_generatorPosition_wTrigger(self._context)


class RootLuRamp_generatorPlane_zTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.stop'


class RootLuRamp_generatorPlane_zTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.prepare'


class RootLuRamp_generatorPlane_zTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.abort'


class RootLuRamp_generatorPlane_zTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.start'


class RootLuRamp_generatorPlane_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger'
        self.start = RootLuRamp_generatorPlane_zTriggerStart(self._context)
        self.abort = RootLuRamp_generatorPlane_zTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorPlane_zTriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorPlane_zTriggerStop(self._context)


class RootLuRamp_generatorPlane_zAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.lower_limit'


class RootLuRamp_generatorPlane_zAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorPlane_zAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.status'
        self.enum = RootLuRamp_generatorPlane_zAttributeStatusEnum(self._context)


class RootLuRamp_generatorPlane_zAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_time'


class RootLuRamp_generatorPlane_zAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_absolute'


class RootLuRamp_generatorPlane_zAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.current_value'


class RootLuRamp_generatorPlane_zAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_relative'


class RootLuRamp_generatorPlane_zAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.upper_limit'


class RootLuRamp_generatorPlane_zAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorPlane_zAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_mode'
        self.enum = RootLuRamp_generatorPlane_zAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorPlane_zAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_speed'


class RootLuRamp_generatorPlane_zAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorPlane_zAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorPlane_zAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorPlane_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute'
        self.end_value_mode = RootLuRamp_generatorPlane_zAttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorPlane_zAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorPlane_zAttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorPlane_zAttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorPlane_zAttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorPlane_zAttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorPlane_zAttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorPlane_zAttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorPlane_zAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorPlane_zAttributeLower_limit(self._context)


class RootLuRamp_generatorPlane_zBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.busy.is_moving'


class RootLuRamp_generatorPlane_zBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.busy'
        self.is_moving = RootLuRamp_generatorPlane_zBusyIs_moving(self._context)


class RootLuRamp_generatorPlane_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z'
        self.busy = RootLuRamp_generatorPlane_zBusy(self._context)
        self.attribute = RootLuRamp_generatorPlane_zAttribute(self._context)
        self.trigger = RootLuRamp_generatorPlane_zTrigger(self._context)


class RootLuRamp_generatorVirtual1TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.stop'


class RootLuRamp_generatorVirtual1TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.prepare'


class RootLuRamp_generatorVirtual1TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.abort'


class RootLuRamp_generatorVirtual1TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.start'


class RootLuRamp_generatorVirtual1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger'
        self.start = RootLuRamp_generatorVirtual1TriggerStart(self._context)
        self.abort = RootLuRamp_generatorVirtual1TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorVirtual1TriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorVirtual1TriggerStop(self._context)


class RootLuRamp_generatorVirtual1AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.lower_limit'


class RootLuRamp_generatorVirtual1AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorVirtual1AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.status'
        self.enum = RootLuRamp_generatorVirtual1AttributeStatusEnum(self._context)


class RootLuRamp_generatorVirtual1AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_time'


class RootLuRamp_generatorVirtual1AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_absolute'


class RootLuRamp_generatorVirtual1AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.current_value'


class RootLuRamp_generatorVirtual1AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_relative'


class RootLuRamp_generatorVirtual1AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.upper_limit'


class RootLuRamp_generatorVirtual1AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorVirtual1AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_mode'
        self.enum = RootLuRamp_generatorVirtual1AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorVirtual1AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_speed'


class RootLuRamp_generatorVirtual1AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorVirtual1AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorVirtual1AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorVirtual1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute'
        self.end_value_mode = RootLuRamp_generatorVirtual1AttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorVirtual1AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorVirtual1AttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorVirtual1AttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorVirtual1AttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorVirtual1AttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorVirtual1AttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorVirtual1AttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorVirtual1AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorVirtual1AttributeLower_limit(self._context)


class RootLuRamp_generatorVirtual1BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.busy.is_moving'


class RootLuRamp_generatorVirtual1Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.busy'
        self.is_moving = RootLuRamp_generatorVirtual1BusyIs_moving(self._context)


class RootLuRamp_generatorVirtual1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1'
        self.busy = RootLuRamp_generatorVirtual1Busy(self._context)
        self.attribute = RootLuRamp_generatorVirtual1Attribute(self._context)
        self.trigger = RootLuRamp_generatorVirtual1Trigger(self._context)


class RootLuRamp_generatorVirtual2TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.stop'


class RootLuRamp_generatorVirtual2TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.prepare'


class RootLuRamp_generatorVirtual2TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.abort'


class RootLuRamp_generatorVirtual2TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.start'


class RootLuRamp_generatorVirtual2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger'
        self.start = RootLuRamp_generatorVirtual2TriggerStart(self._context)
        self.abort = RootLuRamp_generatorVirtual2TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorVirtual2TriggerPrepare(self._context)
        self.stop = RootLuRamp_generatorVirtual2TriggerStop(self._context)


class RootLuRamp_generatorVirtual2AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.lower_limit'


class RootLuRamp_generatorVirtual2AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_endposition', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_upper_limit', int(new_val))


class RootLuRamp_generatorVirtual2AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.status'
        self.enum = RootLuRamp_generatorVirtual2AttributeStatusEnum(self._context)


class RootLuRamp_generatorVirtual2AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_time'


class RootLuRamp_generatorVirtual2AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_absolute'


class RootLuRamp_generatorVirtual2AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.current_value'


class RootLuRamp_generatorVirtual2AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_relative'


class RootLuRamp_generatorVirtual2AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.upper_limit'


class RootLuRamp_generatorVirtual2AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorVirtual2AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_mode'
        self.enum = RootLuRamp_generatorVirtual2AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorVirtual2AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_speed'


class RootLuRamp_generatorVirtual2AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_to_absolute', int(new_val))


class RootLuRamp_generatorVirtual2AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorVirtual2AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorVirtual2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute'
        self.end_value_mode = RootLuRamp_generatorVirtual2AttributeEnd_value_mode(self._context)
        self.moving_speed = RootLuRamp_generatorVirtual2AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorVirtual2AttributeMoving_mode(self._context)
        self.upper_limit = RootLuRamp_generatorVirtual2AttributeUpper_limit(self._context)
        self.end_value_relative = RootLuRamp_generatorVirtual2AttributeEnd_value_relative(self._context)
        self.current_value = RootLuRamp_generatorVirtual2AttributeCurrent_value(self._context)
        self.end_value_absolute = RootLuRamp_generatorVirtual2AttributeEnd_value_absolute(self._context)
        self.moving_time = RootLuRamp_generatorVirtual2AttributeMoving_time(self._context)
        self.status = RootLuRamp_generatorVirtual2AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorVirtual2AttributeLower_limit(self._context)


class RootLuRamp_generatorVirtual2BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.busy.is_moving'


class RootLuRamp_generatorVirtual2Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.busy'
        self.is_moving = RootLuRamp_generatorVirtual2BusyIs_moving(self._context)


class RootLuRamp_generatorVirtual2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2'
        self.busy = RootLuRamp_generatorVirtual2Busy(self._context)
        self.attribute = RootLuRamp_generatorVirtual2Attribute(self._context)
        self.trigger = RootLuRamp_generatorVirtual2Trigger(self._context)


class RootLuRamp_generator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator'
        self.virtual2 = RootLuRamp_generatorVirtual2(self._context)
        self.virtual1 = RootLuRamp_generatorVirtual1(self._context)
        self.plane_z = RootLuRamp_generatorPlane_z(self._context)
        self.position_w = RootLuRamp_generatorPosition_w(self._context)
        self.user1 = RootLuRamp_generatorUser1(self._context)
        self.position_x = RootLuRamp_generatorPosition_x(self._context)
        self.user4 = RootLuRamp_generatorUser4(self._context)
        self.ctrl_z = RootLuRamp_generatorCtrl_z(self._context)
        self.position_y = RootLuRamp_generatorPosition_y(self._context)
        self.user3 = RootLuRamp_generatorUser3(self._context)
        self.user2 = RootLuRamp_generatorUser2(self._context)
        self.test = RootLuRamp_generatorTest(self._context)
        self.virtual0 = RootLuRamp_generatorVirtual0(self._context)
        self.tip_voltage = RootLuRamp_generatorTip_voltage(self._context)
        self.approach = RootLuRamp_generatorApproach(self._context)
        self.alternate_z = RootLuRamp_generatorAlternate_z(self._context)


class RootLuSpecInstanceTriggerResume_last_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.resume_last_point'


class RootLuSpecInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.start'


class RootLuSpecInstanceTriggerPause(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.pause'


class RootLuSpecInstanceTriggerResume_next_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.resume_next_point'


class RootLuSpecInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.user_abort'


class RootLuSpecInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger'
        self.user_abort = RootLuSpecInstanceTriggerUser_abort(self._context)
        self.resume_next_point = RootLuSpecInstanceTriggerResume_next_point(self._context)
        self.pause = RootLuSpecInstanceTriggerPause(self._context)
        self.start = RootLuSpecInstanceTriggerStart(self._context)
        self.resume_last_point = RootLuSpecInstanceTriggerResume_last_point(self._context)


class RootLuSpecInstanceAttributeBwd_mod_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_range'


class RootLuSpecInstanceAttributeRepetition_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.repetition_mode.enum'

    @property
    def list(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.repetition_mode.enum.list'))

    @list.setter
    def list(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.repetition_mode.enum.list', int(new_val))

    @property
    def position(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.repetition_mode.enum.position'))

    @position.setter
    def position(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.repetition_mode.enum.position', int(new_val))


class RootLuSpecInstanceAttributeRepetition_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.repetition_mode'
        self.enum = RootLuSpecInstanceAttributeRepetition_modeEnum(self._context)


class RootLuSpecInstanceAttributeFwd_mod_stop_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum'

    @property
    def is_less_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_less_than'))

    @is_less_than.setter
    def is_less_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_less_than', int(new_val))

    @property
    def is_greater_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_greater_than'))

    @is_greater_than.setter
    def is_greater_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_greater_than', int(new_val))


class RootLuSpecInstanceAttributeFwd_mod_stop_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_stop_mode'
        self.enum = RootLuSpecInstanceAttributeFwd_mod_stop_modeEnum(self._context)


class RootLuSpecInstanceAttributeSpec_end_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_end_mode.enum'

    @property
    def z_controller_active(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.spec_end_mode.enum.z_controller_active'))

    @z_controller_active.setter
    def z_controller_active(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.spec_end_mode.enum.z_controller_active', int(new_val))

    @property
    def keep_last_z_pos(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.spec_end_mode.enum.keep_last_z_pos'))

    @keep_last_z_pos.setter
    def keep_last_z_pos(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.spec_end_mode.enum.keep_last_z_pos', int(new_val))


class RootLuSpecInstanceAttributeSpec_end_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_end_mode'
        self.enum = RootLuSpecInstanceAttributeSpec_end_modeEnum(self._context)


class RootLuSpecInstanceAttributeFwd_mod_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_range'


class RootLuSpecInstanceAttributeFwd_pause_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_mode.enum'

    @property
    def z_on(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_on'))

    @z_on.setter
    def z_on(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_on', int(new_val))

    @property
    def z_off(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_off'))

    @z_off.setter
    def z_off(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_off', int(new_val))


class RootLuSpecInstanceAttributeFwd_pause_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_mode'
        self.enum = RootLuSpecInstanceAttributeFwd_pause_modeEnum(self._context)


class RootLuSpecInstanceAttributeDeflection_force_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.deflection_force_offset'


class RootLuSpecInstanceAttributeBwd_mod_stop_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_stop_value'


class RootLuSpecInstanceAttributeFeedback_active(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.feedback_active'


class RootLuSpecInstanceAttributeMod_rel_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.mod_rel_value'


class RootLuSpecInstanceAttributePhase_bwd_mod_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_bwd_mod_rate'


class RootLuSpecInstanceAttributePhase_fwd_pause_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_fwd_pause_rate'


class RootLuSpecInstanceAttributePoint_coords_blob_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.point_coords_blob_vec'


class RootLuSpecInstanceAttributeRepetition_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.repetition_count'


class RootLuSpecInstanceAttributePhase_data_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_data_group_id'


class RootLuSpecInstanceAttributePhase_bwd_pause_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_bwd_pause_rate'


class RootLuSpecInstanceAttributeBwd_mod_stop_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum'

    @property
    def is_less_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_less_than'))

    @is_less_than.setter
    def is_less_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_less_than', int(new_val))

    @property
    def is_greater_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_greater_than'))

    @is_greater_than.setter
    def is_greater_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_greater_than', int(new_val))


class RootLuSpecInstanceAttributeBwd_mod_stop_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_stop_mode'
        self.enum = RootLuSpecInstanceAttributeBwd_mod_stop_modeEnum(self._context)


class RootLuSpecInstanceAttributeFwd_mod_stop_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_stop_value'


class RootLuSpecInstanceAttributeSpec_map_configuration_blob_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_map_configuration_blob_vec'


class RootLuSpecInstanceAttributeSpec_map_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_map_mode.enum'

    @property
    def spec_maps(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.spec_map_mode.enum.spec_maps'))

    @spec_maps.setter
    def spec_maps(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.spec_map_mode.enum.spec_maps', int(new_val))

    @property
    def point_list(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.spec_map_mode.enum.point_list'))

    @point_list.setter
    def point_list(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.spec_map_mode.enum.point_list', int(new_val))


class RootLuSpecInstanceAttributeSpec_map_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_map_mode'
        self.enum = RootLuSpecInstanceAttributeSpec_map_modeEnum(self._context)


class RootLuSpecInstanceAttributeBwd_pause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_time'


class RootLuSpecInstanceAttributePhase_sample_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_sample_mask'


class RootLuSpecInstanceAttributeFwd_mod_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_mode.enum'

    @property
    def stop_by_value(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_mode.enum.stop_by_value'))

    @stop_by_value.setter
    def stop_by_value(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_mode.enum.stop_by_value', int(new_val))

    @property
    def fixed_length(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_mode.enum.fixed_length'))

    @fixed_length.setter
    def fixed_length(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_mode.enum.fixed_length', int(new_val))


class RootLuSpecInstanceAttributeFwd_mod_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_mode'
        self.enum = RootLuSpecInstanceAttributeFwd_mod_modeEnum(self._context)


class RootLuSpecInstanceAttributeFwd_pause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_time'


class RootLuSpecInstanceAttributeBwd_mod_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_mode.enum'

    @property
    def stop_by_value(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_mode.enum.stop_by_value'))

    @stop_by_value.setter
    def stop_by_value(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_mode.enum.stop_by_value', int(new_val))

    @property
    def fixed_length(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_mode.enum.fixed_length'))

    @fixed_length.setter
    def fixed_length(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_mode.enum.fixed_length', int(new_val))


class RootLuSpecInstanceAttributeBwd_mod_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_mode'
        self.enum = RootLuSpecInstanceAttributeBwd_mod_modeEnum(self._context)


class RootLuSpecInstanceAttributeModulation_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.modulation_output.enum'

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.modulation_output.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.modulation_output.enum.position_z', int(new_val))

    @property
    def external_z(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.modulation_output.enum.external_z'))

    @external_z.setter
    def external_z(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.modulation_output.enum.external_z', int(new_val))

    @property
    def tip_voltage(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.modulation_output.enum.tip_voltage'))

    @tip_voltage.setter
    def tip_voltage(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.modulation_output.enum.tip_voltage', int(new_val))


class RootLuSpecInstanceAttributeModulation_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.modulation_output'
        self.enum = RootLuSpecInstanceAttributeModulation_outputEnum(self._context)


class RootLuSpecInstanceAttributeBwd_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_move_speed'


class RootLuSpecInstanceAttributeStart_offset_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.start_offset_move_speed'


class RootLuSpecInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.xy_move_speed'


class RootLuSpecInstanceAttributePhase_fwd_mod_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_fwd_mod_rate'


class RootLuSpecInstanceAttributeFwd_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_move_speed'


class RootLuSpecInstanceAttributeAuto_recalibrate_probe_interval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.auto_recalibrate_probe_interval'


class RootLuSpecInstanceAttributeStart_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.start_offset'


class RootLuSpecInstanceAttributeBwd_pause_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_datapoints'


class RootLuSpecInstanceAttributeBwd_pause_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_mode.enum'

    @property
    def z_on(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_on'))

    @z_on.setter
    def z_on(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_on', int(new_val))

    @property
    def z_off(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_off'))

    @z_off.setter
    def z_off(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_off', int(new_val))


class RootLuSpecInstanceAttributeBwd_pause_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_mode'
        self.enum = RootLuSpecInstanceAttributeBwd_pause_modeEnum(self._context)


class RootLuSpecInstanceAttributeBwd_mod_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_time'


class RootLuSpecInstanceAttributeBwd_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_datapoints'


class RootLuSpecInstanceAttributeCurrent_repetition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.current_repetition'


class RootLuSpecInstanceAttributeFwd_mod_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_time'


class RootLuSpecInstanceAttributeFwd_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_datapoints'


class RootLuSpecInstanceAttributeFwd_pause_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_datapoints'


class RootLuSpecInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute'
        self.fwd_pause_datapoints = RootLuSpecInstanceAttributeFwd_pause_datapoints(self._context)
        self.fwd_datapoints = RootLuSpecInstanceAttributeFwd_datapoints(self._context)
        self.fwd_mod_time = RootLuSpecInstanceAttributeFwd_mod_time(self._context)
        self.current_repetition = RootLuSpecInstanceAttributeCurrent_repetition(self._context)
        self.bwd_datapoints = RootLuSpecInstanceAttributeBwd_datapoints(self._context)
        self.bwd_mod_time = RootLuSpecInstanceAttributeBwd_mod_time(self._context)
        self.bwd_pause_mode = RootLuSpecInstanceAttributeBwd_pause_mode(self._context)
        self.bwd_pause_datapoints = RootLuSpecInstanceAttributeBwd_pause_datapoints(self._context)
        self.start_offset = RootLuSpecInstanceAttributeStart_offset(self._context)
        self.auto_recalibrate_probe_interval = RootLuSpecInstanceAttributeAuto_recalibrate_probe_interval(self._context)
        self.fwd_move_speed = RootLuSpecInstanceAttributeFwd_move_speed(self._context)
        self.phase_fwd_mod_rate = RootLuSpecInstanceAttributePhase_fwd_mod_rate(self._context)
        self.xy_move_speed = RootLuSpecInstanceAttributeXy_move_speed(self._context)
        self.start_offset_move_speed = RootLuSpecInstanceAttributeStart_offset_move_speed(self._context)
        self.bwd_move_speed = RootLuSpecInstanceAttributeBwd_move_speed(self._context)
        self.modulation_output = RootLuSpecInstanceAttributeModulation_output(self._context)
        self.bwd_mod_mode = RootLuSpecInstanceAttributeBwd_mod_mode(self._context)
        self.fwd_pause_time = RootLuSpecInstanceAttributeFwd_pause_time(self._context)
        self.fwd_mod_mode = RootLuSpecInstanceAttributeFwd_mod_mode(self._context)
        self.phase_sample_mask = RootLuSpecInstanceAttributePhase_sample_mask(self._context)
        self.bwd_pause_time = RootLuSpecInstanceAttributeBwd_pause_time(self._context)
        self.spec_map_mode = RootLuSpecInstanceAttributeSpec_map_mode(self._context)
        self.spec_map_configuration_blob_vec = RootLuSpecInstanceAttributeSpec_map_configuration_blob_vec(self._context)
        self.fwd_mod_stop_value = RootLuSpecInstanceAttributeFwd_mod_stop_value(self._context)
        self.bwd_mod_stop_mode = RootLuSpecInstanceAttributeBwd_mod_stop_mode(self._context)
        self.phase_bwd_pause_rate = RootLuSpecInstanceAttributePhase_bwd_pause_rate(self._context)
        self.phase_data_group_id = RootLuSpecInstanceAttributePhase_data_group_id(self._context)
        self.repetition_count = RootLuSpecInstanceAttributeRepetition_count(self._context)
        self.point_coords_blob_vec = RootLuSpecInstanceAttributePoint_coords_blob_vec(self._context)
        self.phase_fwd_pause_rate = RootLuSpecInstanceAttributePhase_fwd_pause_rate(self._context)
        self.phase_bwd_mod_rate = RootLuSpecInstanceAttributePhase_bwd_mod_rate(self._context)
        self.mod_rel_value = RootLuSpecInstanceAttributeMod_rel_value(self._context)
        self.feedback_active = RootLuSpecInstanceAttributeFeedback_active(self._context)
        self.bwd_mod_stop_value = RootLuSpecInstanceAttributeBwd_mod_stop_value(self._context)
        self.deflection_force_offset = RootLuSpecInstanceAttributeDeflection_force_offset(self._context)
        self.fwd_pause_mode = RootLuSpecInstanceAttributeFwd_pause_mode(self._context)
        self.fwd_mod_range = RootLuSpecInstanceAttributeFwd_mod_range(self._context)
        self.spec_end_mode = RootLuSpecInstanceAttributeSpec_end_mode(self._context)
        self.fwd_mod_stop_mode = RootLuSpecInstanceAttributeFwd_mod_stop_mode(self._context)
        self.repetition_mode = RootLuSpecInstanceAttributeRepetition_mode(self._context)
        self.bwd_mod_range = RootLuSpecInstanceAttributeBwd_mod_range(self._context)


class RootLuSpecInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance'
        self.attribute = RootLuSpecInstanceAttribute(self._context)
        self.trigger = RootLuSpecInstanceTrigger(self._context)


class RootLuSpec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec'
        self.instance = RootLuSpecInstance(self._context)


class RootLuRescanInstanceAttributeLine_repetition_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.line_repetition_max'


class RootLuRescanInstanceAttributeLine_repetition_max_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.line_repetition_max_count'


class RootLuRescanInstanceAttributeLine_repetition_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.line_repetition_count'


class RootLuRescanInstanceAttributeEnable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.enable'


class RootLuRescanInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute'
        self.enable = RootLuRescanInstanceAttributeEnable(self._context)
        self.line_repetition_count = RootLuRescanInstanceAttributeLine_repetition_count(self._context)
        self.line_repetition_max_count = RootLuRescanInstanceAttributeLine_repetition_max_count(self._context)
        self.line_repetition_max = RootLuRescanInstanceAttributeLine_repetition_max(self._context)


class RootLuRescanInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance'
        self.attribute = RootLuRescanInstanceAttribute(self._context)


class RootLuRescan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan'
        self.instance = RootLuRescanInstance(self._context)


class RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1TriggerStart_phase_zero_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_phase_zero_calibration'


class RootLuSignal_analyzerInst1TriggerStart_kpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_kpfm_phase_calibration'


class RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1TriggerKpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.kpfm_phase_calibration'


class RootLuSignal_analyzerInst1TriggerStart_update_current_free_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_update_current_free_amplitude'


class RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst1TriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.user_abort'


class RootLuSignal_analyzerInst1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger'
        self.user_abort = RootLuSignal_analyzerInst1TriggerUser_abort(self._context)
        self.switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_mode(self._context)
        self.start_update_current_free_amplitude = RootLuSignal_analyzerInst1TriggerStart_update_current_free_amplitude(self._context)
        self.kpfm_phase_calibration = RootLuSignal_analyzerInst1TriggerKpfm_phase_calibration(self._context)
        self.start_switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_set_point(self._context)
        self.start_switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_mode(self._context)
        self.start_kpfm_phase_calibration = RootLuSignal_analyzerInst1TriggerStart_kpfm_phase_calibration(self._context)
        self.start_phase_zero_calibration = RootLuSignal_analyzerInst1TriggerStart_phase_zero_calibration(self._context)
        self.switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_set_point(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_y'


class RootLuSignal_analyzerInst1AttributeAmplitude_modulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.disabled', int(new_val))


class RootLuSignal_analyzerInst1AttributeAmplitude_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_modulation'
        self.enum = RootLuSignal_analyzerInst1AttributeAmplitude_modulationEnum(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_binary'


class RootLuSignal_analyzerInst1AttributeCurrent_phase_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_phase_binary'


class RootLuSignal_analyzerInst1AttributeCurrent_ctrl_delta_f(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_ctrl_delta_f'


class RootLuSignal_analyzerInst1AttributeDemodulator_bwEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum'

    @property
    def bw_45_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_k_hz'))

    @bw_45_k_hz.setter
    def bw_45_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_k_hz', int(new_val))

    @property
    def bw_1500_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_1500_hz'))

    @bw_1500_hz.setter
    def bw_1500_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_1500_hz', int(new_val))

    @property
    def bw_3_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_3_k_hz'))

    @bw_3_k_hz.setter
    def bw_3_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_3_k_hz', int(new_val))

    @property
    def bw_180_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_180_hz'))

    @bw_180_hz.setter
    def bw_180_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_180_hz', int(new_val))

    @property
    def bw_750_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_750_hz'))

    @bw_750_hz.setter
    def bw_750_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_750_hz', int(new_val))

    @property
    def bw_45_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_hz'))

    @bw_45_hz.setter
    def bw_45_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_hz', int(new_val))

    @property
    def bw_23_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_k_hz'))

    @bw_23_k_hz.setter
    def bw_23_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_k_hz', int(new_val))

    @property
    def bw_500_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_500_k_hz'))

    @bw_500_k_hz.setter
    def bw_500_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_500_k_hz', int(new_val))

    @property
    def bw_360_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_360_hz'))

    @bw_360_hz.setter
    def bw_360_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_360_hz', int(new_val))

    @property
    def bw_12_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_12_k_hz'))

    @bw_12_k_hz.setter
    def bw_12_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_12_k_hz', int(new_val))

    @property
    def bw_90_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_90_hz'))

    @bw_90_hz.setter
    def bw_90_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_90_hz', int(new_val))

    @property
    def bw_230_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_230_k_hz'))

    @bw_230_k_hz.setter
    def bw_230_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_230_k_hz', int(new_val))

    @property
    def bw_23_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_hz'))

    @bw_23_hz.setter
    def bw_23_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_hz', int(new_val))

    @property
    def bw_6_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_6_k_hz'))

    @bw_6_k_hz.setter
    def bw_6_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_6_k_hz', int(new_val))

    @property
    def bw_100_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_100_k_hz'))

    @bw_100_k_hz.setter
    def bw_100_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_100_k_hz', int(new_val))


class RootLuSignal_analyzerInst1AttributeDemodulator_bw(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.demodulator_bw'
        self.enum = RootLuSignal_analyzerInst1AttributeDemodulator_bwEnum(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_reference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_reference_amplitude'


class RootLuSignal_analyzerInst1AttributeCurrent_x_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_x_binary'


class RootLuSignal_analyzerInst1AttributeDisplay_df_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.display_df_range'


class RootLuSignal_analyzerInst1AttributeLock_in_calc_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.lock_in_calc_amplitude'


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_i_gain'


class RootLuSignal_analyzerInst1AttributeReference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_amplitude'


class RootLuSignal_analyzerInst1AttributeReference_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_frequency'


class RootLuSignal_analyzerInst1AttributeReference_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_phase'


class RootLuSignal_analyzerInst1AttributeCurrent_y_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_y_binary'


class RootLuSignal_analyzerInst1AttributeCurrent_ctrl_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_ctrl_amplitude'


class RootLuSignal_analyzerInst1AttributeReset_flag_pll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reset_flag_pll_unlocked'


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_p_gain'


class RootLuSignal_analyzerInst1AttributeDelay_comp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.delay_comp'


class RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum'

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_drive', int(new_val))


class RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst1AttributeLock_in_calc_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.lock_in_calc_phase'


class RootLuSignal_analyzerInst1AttributeOperating_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.operating_mode.enum'

    @property
    def lock_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.lock_in'))

    @lock_in.setter
    def lock_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.lock_in', int(new_val))

    @property
    def pll(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.pll'))

    @pll.setter
    def pll(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.pll', int(new_val))

    @property
    def kpfm(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.kpfm'))

    @kpfm.setter
    def kpfm(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.kpfm', int(new_val))


class RootLuSignal_analyzerInst1AttributeOperating_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.operating_mode'
        self.enum = RootLuSignal_analyzerInst1AttributeOperating_modeEnum(self._context)


class RootLuSignal_analyzerInst1AttributeReference_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_source.enum'

    @property
    def harmonic2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic2'))

    @harmonic2.setter
    def harmonic2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic2', int(new_val))

    @property
    def own(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.own'))

    @own.setter
    def own(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.own', int(new_val))

    @property
    def harmonic3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic3'))

    @harmonic3.setter
    def harmonic3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic3', int(new_val))

    @property
    def harmonic1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic1'))

    @harmonic1.setter
    def harmonic1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic1', int(new_val))


class RootLuSignal_analyzerInst1AttributeReference_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_source'
        self.enum = RootLuSignal_analyzerInst1AttributeReference_sourceEnum(self._context)


class RootLuSignal_analyzerInst1AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.input.enum'

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.static', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user4', int(new_val))

    @property
    def test_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.test_tip_voltage'))

    @test_tip_voltage.setter
    def test_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.test_tip_voltage', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def test_ref(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ref'))

    @test_ref.setter
    def test_ref(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ref', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in2', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user3', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_x', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_lateral', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user1', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_z', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in6', int(new_val))

    @property
    def test_ana_gnd(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ana_gnd'))

    @test_ana_gnd.setter
    def test_ana_gnd(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ana_gnd', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_baseline', int(new_val))


class RootLuSignal_analyzerInst1AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.input'
        self.enum = RootLuSignal_analyzerInst1AttributeInputEnum(self._context)


class RootLuSignal_analyzerInst1AttributePhase_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.phase_ctrl_p_gain'


class RootLuSignal_analyzerInst1AttributePll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.pll_unlocked'


class RootLuSignal_analyzerInst1AttributeEnable_dc_blockEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.disabled', int(new_val))


class RootLuSignal_analyzerInst1AttributeEnable_dc_block(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.enable_dc_block'
        self.enum = RootLuSignal_analyzerInst1AttributeEnable_dc_blockEnum(self._context)


class RootLuSignal_analyzerInst1AttributePhase_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.phase_ctrl_i_gain'


class RootLuSignal_analyzerInst1AttributeHarmonic_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum'

    @property
    def analyzer2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer2'))

    @analyzer2.setter
    def analyzer2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer2', int(new_val))

    @property
    def analyzer1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer1'))

    @analyzer1.setter
    def analyzer1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer1', int(new_val))


class RootLuSignal_analyzerInst1AttributeHarmonic_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.harmonic_source'
        self.enum = RootLuSignal_analyzerInst1AttributeHarmonic_sourceEnum(self._context)


class RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1AttributeReference_amplitude_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_amplitude_factor'


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum'

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_drive', int(new_val))


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst1AttributePhase_lock_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.phase_lock_range'


class RootLuSignal_analyzerInst1AttributeCurrent_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_phase'


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude'


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum'

    @property
    def amplitude_calibration_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error'))

    @amplitude_calibration_error.setter
    def amplitude_calibration_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error', int(new_val))

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error', int(new_val))


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result'
        self.enum = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_resultEnum(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_x'


class RootLuSignal_analyzerInst1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute'
        self.current_x = RootLuSignal_analyzerInst1AttributeCurrent_x(self._context)
        self.amplitude_ctrl_set_point_calib_result = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_result(self._context)
        self.current_amplitude = RootLuSignal_analyzerInst1AttributeCurrent_amplitude(self._context)
        self.current_phase = RootLuSignal_analyzerInst1AttributeCurrent_phase(self._context)
        self.phase_lock_range = RootLuSignal_analyzerInst1AttributePhase_lock_range(self._context)
        self.current_amplitude_ctrl_mode = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_mode(self._context)
        self.reference_amplitude_factor = RootLuSignal_analyzerInst1AttributeReference_amplitude_factor(self._context)
        self.current_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_set_point(self._context)
        self.target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_set_point(self._context)
        self.harmonic_source = RootLuSignal_analyzerInst1AttributeHarmonic_source(self._context)
        self.phase_ctrl_i_gain = RootLuSignal_analyzerInst1AttributePhase_ctrl_i_gain(self._context)
        self.enable_dc_block = RootLuSignal_analyzerInst1AttributeEnable_dc_block(self._context)
        self.pll_unlocked = RootLuSignal_analyzerInst1AttributePll_unlocked(self._context)
        self.phase_ctrl_p_gain = RootLuSignal_analyzerInst1AttributePhase_ctrl_p_gain(self._context)
        self.input = RootLuSignal_analyzerInst1AttributeInput(self._context)
        self.reference_source = RootLuSignal_analyzerInst1AttributeReference_source(self._context)
        self.operating_mode = RootLuSignal_analyzerInst1AttributeOperating_mode(self._context)
        self.lock_in_calc_phase = RootLuSignal_analyzerInst1AttributeLock_in_calc_phase(self._context)
        self.target_amplitude_ctrl_mode = RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_mode(self._context)
        self.delay_comp = RootLuSignal_analyzerInst1AttributeDelay_comp(self._context)
        self.amplitude_ctrl_p_gain = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_p_gain(self._context)
        self.reset_flag_pll_unlocked = RootLuSignal_analyzerInst1AttributeReset_flag_pll_unlocked(self._context)
        self.current_ctrl_amplitude = RootLuSignal_analyzerInst1AttributeCurrent_ctrl_amplitude(self._context)
        self.current_y_binary = RootLuSignal_analyzerInst1AttributeCurrent_y_binary(self._context)
        self.reference_phase = RootLuSignal_analyzerInst1AttributeReference_phase(self._context)
        self.reference_frequency = RootLuSignal_analyzerInst1AttributeReference_frequency(self._context)
        self.reference_amplitude = RootLuSignal_analyzerInst1AttributeReference_amplitude(self._context)
        self.amplitude_ctrl_i_gain = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_i_gain(self._context)
        self.lock_in_calc_amplitude = RootLuSignal_analyzerInst1AttributeLock_in_calc_amplitude(self._context)
        self.display_df_range = RootLuSignal_analyzerInst1AttributeDisplay_df_range(self._context)
        self.current_x_binary = RootLuSignal_analyzerInst1AttributeCurrent_x_binary(self._context)
        self.current_reference_amplitude = RootLuSignal_analyzerInst1AttributeCurrent_reference_amplitude(self._context)
        self.demodulator_bw = RootLuSignal_analyzerInst1AttributeDemodulator_bw(self._context)
        self.current_ctrl_delta_f = RootLuSignal_analyzerInst1AttributeCurrent_ctrl_delta_f(self._context)
        self.current_phase_binary = RootLuSignal_analyzerInst1AttributeCurrent_phase_binary(self._context)
        self.current_amplitude_binary = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_binary(self._context)
        self.amplitude_modulation = RootLuSignal_analyzerInst1AttributeAmplitude_modulation(self._context)
        self.current_y = RootLuSignal_analyzerInst1AttributeCurrent_y(self._context)


class RootLuSignal_analyzerInst1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1'
        self.attribute = RootLuSignal_analyzerInst1Attribute(self._context)
        self.trigger = RootLuSignal_analyzerInst1Trigger(self._context)


class RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2TriggerStart_phase_zero_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_phase_zero_calibration'


class RootLuSignal_analyzerInst2TriggerStart_kpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_kpfm_phase_calibration'


class RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2TriggerKpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.kpfm_phase_calibration'


class RootLuSignal_analyzerInst2TriggerStart_update_current_free_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_update_current_free_amplitude'


class RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst2TriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.user_abort'


class RootLuSignal_analyzerInst2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger'
        self.user_abort = RootLuSignal_analyzerInst2TriggerUser_abort(self._context)
        self.switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_mode(self._context)
        self.start_update_current_free_amplitude = RootLuSignal_analyzerInst2TriggerStart_update_current_free_amplitude(self._context)
        self.kpfm_phase_calibration = RootLuSignal_analyzerInst2TriggerKpfm_phase_calibration(self._context)
        self.start_switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_set_point(self._context)
        self.start_switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_mode(self._context)
        self.start_kpfm_phase_calibration = RootLuSignal_analyzerInst2TriggerStart_kpfm_phase_calibration(self._context)
        self.start_phase_zero_calibration = RootLuSignal_analyzerInst2TriggerStart_phase_zero_calibration(self._context)
        self.switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_set_point(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_y'


class RootLuSignal_analyzerInst2AttributeAmplitude_modulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.disabled', int(new_val))


class RootLuSignal_analyzerInst2AttributeAmplitude_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_modulation'
        self.enum = RootLuSignal_analyzerInst2AttributeAmplitude_modulationEnum(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_binary'


class RootLuSignal_analyzerInst2AttributeCurrent_phase_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_phase_binary'


class RootLuSignal_analyzerInst2AttributeCurrent_ctrl_delta_f(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_ctrl_delta_f'


class RootLuSignal_analyzerInst2AttributeDemodulator_bwEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum'

    @property
    def bw_45_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_k_hz'))

    @bw_45_k_hz.setter
    def bw_45_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_k_hz', int(new_val))

    @property
    def bw_1500_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_1500_hz'))

    @bw_1500_hz.setter
    def bw_1500_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_1500_hz', int(new_val))

    @property
    def bw_3_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_3_k_hz'))

    @bw_3_k_hz.setter
    def bw_3_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_3_k_hz', int(new_val))

    @property
    def bw_180_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_180_hz'))

    @bw_180_hz.setter
    def bw_180_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_180_hz', int(new_val))

    @property
    def bw_750_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_750_hz'))

    @bw_750_hz.setter
    def bw_750_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_750_hz', int(new_val))

    @property
    def bw_45_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_hz'))

    @bw_45_hz.setter
    def bw_45_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_hz', int(new_val))

    @property
    def bw_23_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_k_hz'))

    @bw_23_k_hz.setter
    def bw_23_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_k_hz', int(new_val))

    @property
    def bw_500_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_500_k_hz'))

    @bw_500_k_hz.setter
    def bw_500_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_500_k_hz', int(new_val))

    @property
    def bw_360_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_360_hz'))

    @bw_360_hz.setter
    def bw_360_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_360_hz', int(new_val))

    @property
    def bw_12_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_12_k_hz'))

    @bw_12_k_hz.setter
    def bw_12_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_12_k_hz', int(new_val))

    @property
    def bw_90_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_90_hz'))

    @bw_90_hz.setter
    def bw_90_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_90_hz', int(new_val))

    @property
    def bw_230_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_230_k_hz'))

    @bw_230_k_hz.setter
    def bw_230_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_230_k_hz', int(new_val))

    @property
    def bw_23_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_hz'))

    @bw_23_hz.setter
    def bw_23_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_hz', int(new_val))

    @property
    def bw_6_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_6_k_hz'))

    @bw_6_k_hz.setter
    def bw_6_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_6_k_hz', int(new_val))

    @property
    def bw_100_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_100_k_hz'))

    @bw_100_k_hz.setter
    def bw_100_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_100_k_hz', int(new_val))


class RootLuSignal_analyzerInst2AttributeDemodulator_bw(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.demodulator_bw'
        self.enum = RootLuSignal_analyzerInst2AttributeDemodulator_bwEnum(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_reference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_reference_amplitude'


class RootLuSignal_analyzerInst2AttributeCurrent_x_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_x_binary'


class RootLuSignal_analyzerInst2AttributeDisplay_df_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.display_df_range'


class RootLuSignal_analyzerInst2AttributeLock_in_calc_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.lock_in_calc_amplitude'


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_i_gain'


class RootLuSignal_analyzerInst2AttributeReference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_amplitude'


class RootLuSignal_analyzerInst2AttributeReference_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_frequency'


class RootLuSignal_analyzerInst2AttributeReference_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_phase'


class RootLuSignal_analyzerInst2AttributeCurrent_y_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_y_binary'


class RootLuSignal_analyzerInst2AttributeCurrent_ctrl_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_ctrl_amplitude'


class RootLuSignal_analyzerInst2AttributeReset_flag_pll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reset_flag_pll_unlocked'


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_p_gain'


class RootLuSignal_analyzerInst2AttributeDelay_comp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.delay_comp'


class RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum'

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_drive', int(new_val))


class RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst2AttributeLock_in_calc_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.lock_in_calc_phase'


class RootLuSignal_analyzerInst2AttributeOperating_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.operating_mode.enum'

    @property
    def lock_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.lock_in'))

    @lock_in.setter
    def lock_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.lock_in', int(new_val))

    @property
    def pll(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.pll'))

    @pll.setter
    def pll(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.pll', int(new_val))

    @property
    def kpfm(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.kpfm'))

    @kpfm.setter
    def kpfm(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.kpfm', int(new_val))


class RootLuSignal_analyzerInst2AttributeOperating_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.operating_mode'
        self.enum = RootLuSignal_analyzerInst2AttributeOperating_modeEnum(self._context)


class RootLuSignal_analyzerInst2AttributeReference_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_source.enum'

    @property
    def harmonic2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic2'))

    @harmonic2.setter
    def harmonic2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic2', int(new_val))

    @property
    def own(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.own'))

    @own.setter
    def own(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.own', int(new_val))

    @property
    def harmonic3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic3'))

    @harmonic3.setter
    def harmonic3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic3', int(new_val))

    @property
    def harmonic1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic1'))

    @harmonic1.setter
    def harmonic1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic1', int(new_val))


class RootLuSignal_analyzerInst2AttributeReference_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_source'
        self.enum = RootLuSignal_analyzerInst2AttributeReference_sourceEnum(self._context)


class RootLuSignal_analyzerInst2AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.input.enum'

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.static', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user4', int(new_val))

    @property
    def test_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.test_tip_voltage'))

    @test_tip_voltage.setter
    def test_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.test_tip_voltage', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def test_ref(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ref'))

    @test_ref.setter
    def test_ref(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ref', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in2', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user3', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_x', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_lateral', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user1', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_z', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in6', int(new_val))

    @property
    def test_ana_gnd(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ana_gnd'))

    @test_ana_gnd.setter
    def test_ana_gnd(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ana_gnd', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_baseline', int(new_val))


class RootLuSignal_analyzerInst2AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.input'
        self.enum = RootLuSignal_analyzerInst2AttributeInputEnum(self._context)


class RootLuSignal_analyzerInst2AttributePhase_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.phase_ctrl_p_gain'


class RootLuSignal_analyzerInst2AttributePll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.pll_unlocked'


class RootLuSignal_analyzerInst2AttributeEnable_dc_blockEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.disabled', int(new_val))


class RootLuSignal_analyzerInst2AttributeEnable_dc_block(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.enable_dc_block'
        self.enum = RootLuSignal_analyzerInst2AttributeEnable_dc_blockEnum(self._context)


class RootLuSignal_analyzerInst2AttributePhase_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.phase_ctrl_i_gain'


class RootLuSignal_analyzerInst2AttributeHarmonic_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum'

    @property
    def analyzer2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer2'))

    @analyzer2.setter
    def analyzer2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer2', int(new_val))

    @property
    def analyzer1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer1'))

    @analyzer1.setter
    def analyzer1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer1', int(new_val))


class RootLuSignal_analyzerInst2AttributeHarmonic_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.harmonic_source'
        self.enum = RootLuSignal_analyzerInst2AttributeHarmonic_sourceEnum(self._context)


class RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2AttributeReference_amplitude_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_amplitude_factor'


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum'

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_drive', int(new_val))


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst2AttributePhase_lock_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.phase_lock_range'


class RootLuSignal_analyzerInst2AttributeCurrent_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_phase'


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude'


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum'

    @property
    def amplitude_calibration_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error'))

    @amplitude_calibration_error.setter
    def amplitude_calibration_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error', int(new_val))

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error', int(new_val))


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result'
        self.enum = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_resultEnum(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_x'


class RootLuSignal_analyzerInst2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute'
        self.current_x = RootLuSignal_analyzerInst2AttributeCurrent_x(self._context)
        self.amplitude_ctrl_set_point_calib_result = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_result(self._context)
        self.current_amplitude = RootLuSignal_analyzerInst2AttributeCurrent_amplitude(self._context)
        self.current_phase = RootLuSignal_analyzerInst2AttributeCurrent_phase(self._context)
        self.phase_lock_range = RootLuSignal_analyzerInst2AttributePhase_lock_range(self._context)
        self.current_amplitude_ctrl_mode = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_mode(self._context)
        self.reference_amplitude_factor = RootLuSignal_analyzerInst2AttributeReference_amplitude_factor(self._context)
        self.current_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_set_point(self._context)
        self.target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_set_point(self._context)
        self.harmonic_source = RootLuSignal_analyzerInst2AttributeHarmonic_source(self._context)
        self.phase_ctrl_i_gain = RootLuSignal_analyzerInst2AttributePhase_ctrl_i_gain(self._context)
        self.enable_dc_block = RootLuSignal_analyzerInst2AttributeEnable_dc_block(self._context)
        self.pll_unlocked = RootLuSignal_analyzerInst2AttributePll_unlocked(self._context)
        self.phase_ctrl_p_gain = RootLuSignal_analyzerInst2AttributePhase_ctrl_p_gain(self._context)
        self.input = RootLuSignal_analyzerInst2AttributeInput(self._context)
        self.reference_source = RootLuSignal_analyzerInst2AttributeReference_source(self._context)
        self.operating_mode = RootLuSignal_analyzerInst2AttributeOperating_mode(self._context)
        self.lock_in_calc_phase = RootLuSignal_analyzerInst2AttributeLock_in_calc_phase(self._context)
        self.target_amplitude_ctrl_mode = RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_mode(self._context)
        self.delay_comp = RootLuSignal_analyzerInst2AttributeDelay_comp(self._context)
        self.amplitude_ctrl_p_gain = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_p_gain(self._context)
        self.reset_flag_pll_unlocked = RootLuSignal_analyzerInst2AttributeReset_flag_pll_unlocked(self._context)
        self.current_ctrl_amplitude = RootLuSignal_analyzerInst2AttributeCurrent_ctrl_amplitude(self._context)
        self.current_y_binary = RootLuSignal_analyzerInst2AttributeCurrent_y_binary(self._context)
        self.reference_phase = RootLuSignal_analyzerInst2AttributeReference_phase(self._context)
        self.reference_frequency = RootLuSignal_analyzerInst2AttributeReference_frequency(self._context)
        self.reference_amplitude = RootLuSignal_analyzerInst2AttributeReference_amplitude(self._context)
        self.amplitude_ctrl_i_gain = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_i_gain(self._context)
        self.lock_in_calc_amplitude = RootLuSignal_analyzerInst2AttributeLock_in_calc_amplitude(self._context)
        self.display_df_range = RootLuSignal_analyzerInst2AttributeDisplay_df_range(self._context)
        self.current_x_binary = RootLuSignal_analyzerInst2AttributeCurrent_x_binary(self._context)
        self.current_reference_amplitude = RootLuSignal_analyzerInst2AttributeCurrent_reference_amplitude(self._context)
        self.demodulator_bw = RootLuSignal_analyzerInst2AttributeDemodulator_bw(self._context)
        self.current_ctrl_delta_f = RootLuSignal_analyzerInst2AttributeCurrent_ctrl_delta_f(self._context)
        self.current_phase_binary = RootLuSignal_analyzerInst2AttributeCurrent_phase_binary(self._context)
        self.current_amplitude_binary = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_binary(self._context)
        self.amplitude_modulation = RootLuSignal_analyzerInst2AttributeAmplitude_modulation(self._context)
        self.current_y = RootLuSignal_analyzerInst2AttributeCurrent_y(self._context)


class RootLuSignal_analyzerInst2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2'
        self.attribute = RootLuSignal_analyzerInst2Attribute(self._context)
        self.trigger = RootLuSignal_analyzerInst2Trigger(self._context)


class RootLuSignal_analyzer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer'
        self.inst2 = RootLuSignal_analyzerInst2(self._context)
        self.inst1 = RootLuSignal_analyzerInst1(self._context)


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_time_xyz'


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_speed_xy'


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_speed_xyz'


class RootLuPosition_controlInstanceTriggerCalib_xy_sensor_zero_to_center_of_ramp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.calib_xy_sensor_zero_to_center_of_ramp'


class RootLuPosition_controlInstanceTriggerSwitch_to_target_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.switch_to_target_scan_axis_range_select'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_time_xyz'


class RootLuPosition_controlInstanceTriggerStart_calib_xy_sensor_zero_to_center_of_ramp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_calib_xy_sensor_zero_to_center_of_ramp'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_time_xy'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_speed_xyz'


class RootLuPosition_controlInstanceTriggerStart_switch_to_target_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_switch_to_target_scan_axis_range_select'


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_time_xy'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_speed_xy'


class RootLuPosition_controlInstanceTriggerStart_switch_to_target_w_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_switch_to_target_w_scan_axis_range_select'


class RootLuPosition_controlInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger'
        self.start_switch_to_target_w_scan_axis_range_select = RootLuPosition_controlInstanceTriggerStart_switch_to_target_w_scan_axis_range_select(self._context)
        self.move_to_target_fix_speed_xy = RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xy(self._context)
        self.start_move_to_target_fix_time_xy = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xy(self._context)
        self.start_switch_to_target_scan_axis_range_select = RootLuPosition_controlInstanceTriggerStart_switch_to_target_scan_axis_range_select(self._context)
        self.move_to_target_fix_speed_xyz = RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xyz(self._context)
        self.move_to_target_fix_time_xy = RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xy(self._context)
        self.start_calib_xy_sensor_zero_to_center_of_ramp = RootLuPosition_controlInstanceTriggerStart_calib_xy_sensor_zero_to_center_of_ramp(self._context)
        self.move_to_target_fix_time_xyz = RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xyz(self._context)
        self.switch_to_target_scan_axis_range_select = RootLuPosition_controlInstanceTriggerSwitch_to_target_scan_axis_range_select(self._context)
        self.calib_xy_sensor_zero_to_center_of_ramp = RootLuPosition_controlInstanceTriggerCalib_xy_sensor_zero_to_center_of_ramp(self._context)
        self.start_move_to_target_fix_speed_xyz = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xyz(self._context)
        self.start_move_to_target_fix_speed_xy = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xy(self._context)
        self.start_move_to_target_fix_time_xyz = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xyz(self._context)


class RootLuPosition_controlInstanceAttributeCurrent_pos_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_pos_z'


class RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_selectEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum'

    @property
    def reduced_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.reduced_range'))

    @reduced_range.setter
    def reduced_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.reduced_range', int(new_val))

    @property
    def full_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.full_range'))

    @full_range.setter
    def full_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.full_range', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.off', int(new_val))


class RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_scan_axis_range_select'
        self.enum = RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_selectEnum(self._context)


class RootLuPosition_controlInstanceAttributeEnable_xy_closed_loop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.enable_xy_closed_loop'


class RootLuPosition_controlInstanceAttributeLast_move_stop_eventEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_move_stop_event.enum'

    @property
    def out_of_bound_max(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_max'))

    @out_of_bound_max.setter
    def out_of_bound_max(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_max', int(new_val))

    @property
    def finish(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.finish'))

    @finish.setter
    def finish(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.finish', int(new_val))

    @property
    def out_of_bound_upper_limit(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_upper_limit'))

    @out_of_bound_upper_limit.setter
    def out_of_bound_upper_limit(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_upper_limit', int(new_val))

    @property
    def out_of_bound_lower_limit(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_lower_limit'))

    @out_of_bound_lower_limit.setter
    def out_of_bound_lower_limit(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_lower_limit', int(new_val))

    @property
    def out_of_bound_min(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_min'))

    @out_of_bound_min.setter
    def out_of_bound_min(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_min', int(new_val))

    @property
    def user_abort(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.user_abort'))

    @user_abort.setter
    def user_abort(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.user_abort', int(new_val))

    @property
    def timer_expired(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.timer_expired'))

    @timer_expired.setter
    def timer_expired(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.timer_expired', int(new_val))

    @property
    def position_reached(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.position_reached'))

    @position_reached.setter
    def position_reached(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.position_reached', int(new_val))

    @property
    def setpoint_reached(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.setpoint_reached'))

    @setpoint_reached.setter
    def setpoint_reached(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.setpoint_reached', int(new_val))

    @property
    def out_of_data(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_data'))

    @out_of_data.setter
    def out_of_data(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_data', int(new_val))


class RootLuPosition_controlInstanceAttributeLast_move_stop_event(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_move_stop_event'
        self.enum = RootLuPosition_controlInstanceAttributeLast_move_stop_eventEnum(self._context)


class RootLuPosition_controlInstanceAttributeScan_correction_x_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.scan_correction_x_rotation'


class RootLuPosition_controlInstanceAttributeRamp_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.ramp_time'


class RootLuPosition_controlInstanceAttributePid_controller_settings_yEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_y.enum'

    @property
    def i_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.i_gain'))

    @i_gain.setter
    def i_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.i_gain', int(new_val))

    @property
    def d_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.d_gain'))

    @d_gain.setter
    def d_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.d_gain', int(new_val))

    @property
    def p_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.p_gain'))

    @p_gain.setter
    def p_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.p_gain', int(new_val))


class RootLuPosition_controlInstanceAttributePid_controller_settings_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_y'
        self.enum = RootLuPosition_controlInstanceAttributePid_controller_settings_yEnum(self._context)


class RootLuPosition_controlInstanceAttributeScan_correction_y_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.scan_correction_y_rotation'


class RootLuPosition_controlInstanceAttributeTarget_move_pos_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_move_pos_w'


class RootLuPosition_controlInstanceAttributeRamp_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.ramp_count'


class RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possibleEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum'

    @property
    def possible(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.possible'))

    @possible.setter
    def possible(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.possible', int(new_val))

    @property
    def not_possible(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible'))

    @not_possible.setter
    def not_possible(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible', int(new_val))

    @property
    def not_possible_no_scan_head(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_scan_head'))

    @not_possible_no_scan_head.setter
    def not_possible_no_scan_head(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_scan_head', int(new_val))

    @property
    def not_possible_no_sensor(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_sensor'))

    @not_possible_no_sensor.setter
    def not_possible_no_sensor(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_sensor', int(new_val))

    @property
    def not_possible_wrong_scan_axis_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_wrong_scan_axis_range'))

    @not_possible_wrong_scan_axis_range.setter
    def not_possible_wrong_scan_axis_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_wrong_scan_axis_range', int(new_val))


class RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possible(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.is_xy_closed_loop_possible'
        self.enum = RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possibleEnum(self._context)


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_keep_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_keep_pos'


class RootLuPosition_controlInstanceAttributeTarget_move_pos_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_move_pos_y'


class RootLuPosition_controlInstanceAttributeAxis_scale_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_z'


class RootLuPosition_controlInstanceAttributeTarget_moving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_moving_speed'


class RootLuPosition_controlInstanceAttributeCurrent_pos_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_pos_y'


class RootLuPosition_controlInstanceAttributeTarget_move_pos_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_move_pos_z'


class RootLuPosition_controlInstanceAttributeTarget_moving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_moving_time'


class RootLuPosition_controlInstanceAttributeAxis_scale_xylv(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_xylv'


class RootLuPosition_controlInstanceAttributePid_controller_settings_xEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_x.enum'

    @property
    def i_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.i_gain'))

    @i_gain.setter
    def i_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.i_gain', int(new_val))

    @property
    def d_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.d_gain'))

    @d_gain.setter
    def d_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.d_gain', int(new_val))

    @property
    def p_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.p_gain'))

    @p_gain.setter
    def p_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.p_gain', int(new_val))


class RootLuPosition_controlInstanceAttributePid_controller_settings_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_x'
        self.enum = RootLuPosition_controlInstanceAttributePid_controller_settings_xEnum(self._context)


class RootLuPosition_controlInstanceAttributeAxis_scale_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_xy'


class RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_selectEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum'

    @property
    def reduced_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.reduced_range'))

    @reduced_range.setter
    def reduced_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.reduced_range', int(new_val))

    @property
    def full_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.full_range'))

    @full_range.setter
    def full_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.full_range', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.off', int(new_val))


class RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_scan_axis_range_select'
        self.enum = RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_selectEnum(self._context)


class RootLuPosition_controlInstanceAttributeCurrent_pos_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_pos_w'


class RootLuPosition_controlInstanceAttributeCurrent_pos_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_pos_x'


class RootLuPosition_controlInstanceAttributeTarget_move_pos_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_move_pos_x'


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum'

    @property
    def moving(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.moving'))

    @moving.setter
    def moving(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.moving', int(new_val))

    @property
    def keep_position(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.keep_position'))

    @keep_position.setter
    def keep_position(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.keep_position', int(new_val))


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode'
        self.enum = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_modeEnum(self._context)


class RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum'

    @property
    def interlock_open_user(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.interlock_open_user'))

    @interlock_open_user.setter
    def interlock_open_user(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.interlock_open_user', int(new_val))

    @property
    def ok(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.ok'))

    @ok.setter
    def ok(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.ok', int(new_val))

    @property
    def interlock_open_hv_cable(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.interlock_open_hv_cable'))

    @interlock_open_hv_cable.setter
    def interlock_open_hv_cable(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.interlock_open_hv_cable', int(new_val))

    @property
    def interlock_open_cx_cable(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.interlock_open_cx_cable'))

    @interlock_open_cx_cable.setter
    def interlock_open_cx_cable(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.interlock_open_cx_cable', int(new_val))

    @property
    def feature_not_supported(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.feature_not_supported'))

    @feature_not_supported.setter
    def feature_not_supported(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.feature_not_supported', int(new_val))


class RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result'
        self.enum = RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_resultEnum(self._context)


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_moving'


class RootLuPosition_controlInstanceAttributeAxis_scale_zlv(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_zlv'


class RootLuPosition_controlInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute'
        self.axis_scale_zlv = RootLuPosition_controlInstanceAttributeAxis_scale_zlv(self._context)
        self.xy_closed_loop_speed_moving = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_moving(self._context)
        self.last_scan_axis_range_select_switch_result = RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_result(self._context)
        self.xy_closed_loop_speed_mode = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_mode(self._context)
        self.target_move_pos_x = RootLuPosition_controlInstanceAttributeTarget_move_pos_x(self._context)
        self.current_pos_x = RootLuPosition_controlInstanceAttributeCurrent_pos_x(self._context)
        self.current_pos_w = RootLuPosition_controlInstanceAttributeCurrent_pos_w(self._context)
        self.target_scan_axis_range_select = RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_select(self._context)
        self.axis_scale_xy = RootLuPosition_controlInstanceAttributeAxis_scale_xy(self._context)
        self.pid_controller_settings_x = RootLuPosition_controlInstanceAttributePid_controller_settings_x(self._context)
        self.axis_scale_xylv = RootLuPosition_controlInstanceAttributeAxis_scale_xylv(self._context)
        self.target_moving_time = RootLuPosition_controlInstanceAttributeTarget_moving_time(self._context)
        self.target_move_pos_z = RootLuPosition_controlInstanceAttributeTarget_move_pos_z(self._context)
        self.current_pos_y = RootLuPosition_controlInstanceAttributeCurrent_pos_y(self._context)
        self.target_moving_speed = RootLuPosition_controlInstanceAttributeTarget_moving_speed(self._context)
        self.axis_scale_z = RootLuPosition_controlInstanceAttributeAxis_scale_z(self._context)
        self.target_move_pos_y = RootLuPosition_controlInstanceAttributeTarget_move_pos_y(self._context)
        self.xy_closed_loop_speed_keep_pos = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_keep_pos(self._context)
        self.is_xy_closed_loop_possible = RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possible(self._context)
        self.ramp_count = RootLuPosition_controlInstanceAttributeRamp_count(self._context)
        self.target_move_pos_w = RootLuPosition_controlInstanceAttributeTarget_move_pos_w(self._context)
        self.scan_correction_y_rotation = RootLuPosition_controlInstanceAttributeScan_correction_y_rotation(self._context)
        self.pid_controller_settings_y = RootLuPosition_controlInstanceAttributePid_controller_settings_y(self._context)
        self.ramp_time = RootLuPosition_controlInstanceAttributeRamp_time(self._context)
        self.scan_correction_x_rotation = RootLuPosition_controlInstanceAttributeScan_correction_x_rotation(self._context)
        self.last_move_stop_event = RootLuPosition_controlInstanceAttributeLast_move_stop_event(self._context)
        self.enable_xy_closed_loop = RootLuPosition_controlInstanceAttributeEnable_xy_closed_loop(self._context)
        self.current_scan_axis_range_select = RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_select(self._context)
        self.current_pos_z = RootLuPosition_controlInstanceAttributeCurrent_pos_z(self._context)


class RootLuPosition_controlInstanceBusyIs_tip_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_tip_moving'


class RootLuPosition_controlInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_busy'


class RootLuPosition_controlInstanceBusyIs_range_switching(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_range_switching'


class RootLuPosition_controlInstanceBusyIs_calibrating(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_calibrating'


class RootLuPosition_controlInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy'
        self.is_calibrating = RootLuPosition_controlInstanceBusyIs_calibrating(self._context)
        self.is_range_switching = RootLuPosition_controlInstanceBusyIs_range_switching(self._context)
        self.is_busy = RootLuPosition_controlInstanceBusyIs_busy(self._context)
        self.is_tip_moving = RootLuPosition_controlInstanceBusyIs_tip_moving(self._context)


class RootLuPosition_controlInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance'
        self.busy = RootLuPosition_controlInstanceBusy(self._context)
        self.attribute = RootLuPosition_controlInstanceAttribute(self._context)
        self.trigger = RootLuPosition_controlInstanceTrigger(self._context)


class RootLuPosition_control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control'
        self.instance = RootLuPosition_controlInstance(self._context)


class RootLuSystemInstanceTriggerEntry_litho(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_litho'


class RootLuSystemInstanceTriggerEntry_spec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_spec'


class RootLuSystemInstanceTriggerExit_idle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_idle'


class RootLuSystemInstanceTriggerEntry_uncal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_uncal'


class RootLuSystemInstanceTriggerExit_litho(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_litho'


class RootLuSystemInstanceTriggerExit_uncal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_uncal'


class RootLuSystemInstanceTriggerLevel_scanhead(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.level_scanhead'


class RootLuSystemInstanceTriggerMotor_set_pos_zero(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_set_pos_zero'


class RootLuSystemInstanceTriggerOffset_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.offset_xyz'


class RootLuSystemInstanceTriggerExit_scan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_scan'


class RootLuSystemInstanceTriggerEntry_scan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_scan'


class RootLuSystemInstanceTriggerMotor_reference_and_move_back(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_reference_and_move_back'


class RootLuSystemInstanceTriggerEntry_idle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_idle'


class RootLuSystemInstanceTriggerMotor_stop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_stop'


class RootLuSystemInstanceTriggerExit_spec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_spec'


class RootLuSystemInstanceTriggerStart_system_startup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.start_system_startup'


class RootLuSystemInstanceTriggerMotor_move(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_move'


class RootLuSystemInstanceTriggerMotor_reference(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_reference'


class RootLuSystemInstanceTriggerExit_macro_cmd(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_macro_cmd'


class RootLuSystemInstanceTriggerExit_approach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_approach'


class RootLuSystemInstanceTriggerMotor_step(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_step'


class RootLuSystemInstanceTriggerEntry_macro_cmd(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_macro_cmd'


class RootLuSystemInstanceTriggerForce_motor_pos_update(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.force_motor_pos_update'


class RootLuSystemInstanceTriggerEntry_approach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_approach'


class RootLuSystemInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger'
        self.entry_approach = RootLuSystemInstanceTriggerEntry_approach(self._context)
        self.force_motor_pos_update = RootLuSystemInstanceTriggerForce_motor_pos_update(self._context)
        self.entry_macro_cmd = RootLuSystemInstanceTriggerEntry_macro_cmd(self._context)
        self.motor_step = RootLuSystemInstanceTriggerMotor_step(self._context)
        self.exit_approach = RootLuSystemInstanceTriggerExit_approach(self._context)
        self.exit_macro_cmd = RootLuSystemInstanceTriggerExit_macro_cmd(self._context)
        self.motor_reference = RootLuSystemInstanceTriggerMotor_reference(self._context)
        self.motor_move = RootLuSystemInstanceTriggerMotor_move(self._context)
        self.start_system_startup = RootLuSystemInstanceTriggerStart_system_startup(self._context)
        self.exit_spec = RootLuSystemInstanceTriggerExit_spec(self._context)
        self.motor_stop = RootLuSystemInstanceTriggerMotor_stop(self._context)
        self.entry_idle = RootLuSystemInstanceTriggerEntry_idle(self._context)
        self.motor_reference_and_move_back = RootLuSystemInstanceTriggerMotor_reference_and_move_back(self._context)
        self.entry_scan = RootLuSystemInstanceTriggerEntry_scan(self._context)
        self.exit_scan = RootLuSystemInstanceTriggerExit_scan(self._context)
        self.offset_xyz = RootLuSystemInstanceTriggerOffset_xyz(self._context)
        self.motor_set_pos_zero = RootLuSystemInstanceTriggerMotor_set_pos_zero(self._context)
        self.level_scanhead = RootLuSystemInstanceTriggerLevel_scanhead(self._context)
        self.exit_uncal = RootLuSystemInstanceTriggerExit_uncal(self._context)
        self.exit_litho = RootLuSystemInstanceTriggerExit_litho(self._context)
        self.entry_uncal = RootLuSystemInstanceTriggerEntry_uncal(self._context)
        self.exit_idle = RootLuSystemInstanceTriggerExit_idle(self._context)
        self.entry_spec = RootLuSystemInstanceTriggerEntry_spec(self._context)
        self.entry_litho = RootLuSystemInstanceTriggerEntry_litho(self._context)


class RootLuSystemInstanceAttributeOp_mode_kpfm_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.disabled', int(new_val))


class RootLuSystemInstanceAttributeOp_mode_kpfm_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.op_mode_kpfm_enabled'
        self.enum = RootLuSystemInstanceAttributeOp_mode_kpfm_enabledEnum(self._context)


class RootLuSystemInstanceAttributeMotor_selectionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_selection.enum'

    @property
    def motor_b(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_b'))

    @motor_b.setter
    def motor_b(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_b', int(new_val))

    @property
    def motor_focus(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_focus'))

    @motor_focus.setter
    def motor_focus(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_focus', int(new_val))

    @property
    def motor_beam_deflection_x(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_x'))

    @motor_beam_deflection_x.setter
    def motor_beam_deflection_x(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_x', int(new_val))

    @property
    def motor_photodiode_normal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_normal'))

    @motor_photodiode_normal.setter
    def motor_photodiode_normal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_normal', int(new_val))

    @property
    def motor_beam_deflection_y(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_y'))

    @motor_beam_deflection_y.setter
    def motor_beam_deflection_y(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_y', int(new_val))

    @property
    def motor_c(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_c'))

    @motor_c.setter
    def motor_c(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_c', int(new_val))

    @property
    def motor_approach(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_approach'))

    @motor_approach.setter
    def motor_approach(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_approach', int(new_val))

    @property
    def motor_ptex(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_ptex'))

    @motor_ptex.setter
    def motor_ptex(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_ptex', int(new_val))

    @property
    def motor_a(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_a'))

    @motor_a.setter
    def motor_a(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_a', int(new_val))

    @property
    def motor_lens_gimbal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_lens_gimbal'))

    @motor_lens_gimbal.setter
    def motor_lens_gimbal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_lens_gimbal', int(new_val))

    @property
    def motor_photodiode_lateral(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_lateral'))

    @motor_photodiode_lateral.setter
    def motor_photodiode_lateral(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_lateral', int(new_val))

    @property
    def motor_ptey(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_ptey'))

    @motor_ptey.setter
    def motor_ptey(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_ptey', int(new_val))


class RootLuSystemInstanceAttributeMotor_selection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_selection'
        self.enum = RootLuSystemInstanceAttributeMotor_selectionEnum(self._context)


class RootLuSystemInstanceAttributeMemory_block_available(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.memory_block_available'


class RootLuSystemInstanceAttributeMemory_available(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.memory_available'


class RootLuSystemInstanceAttributeIdle_position_z_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_z_mode.enum'

    @property
    def absolute_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.absolute_z_pos'))

    @absolute_z_pos.setter
    def absolute_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.absolute_z_pos', int(new_val))

    @property
    def keep_last_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.keep_last_z_pos'))

    @keep_last_z_pos.setter
    def keep_last_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.keep_last_z_pos', int(new_val))

    @property
    def z_controller_active(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.z_controller_active'))

    @z_controller_active.setter
    def z_controller_active(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.z_controller_active', int(new_val))

    @property
    def retract_tip(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.retract_tip'))

    @retract_tip.setter
    def retract_tip(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.retract_tip', int(new_val))


class RootLuSystemInstanceAttributeIdle_position_z_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_z_mode'
        self.enum = RootLuSystemInstanceAttributeIdle_position_z_modeEnum(self._context)


class RootLuSystemInstanceAttributeMotor_step_size(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_step_size'


class RootLuSystemInstanceAttributeIdle_position_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_z'


class RootLuSystemInstanceAttributeSystem_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.system_state.enum'

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.idle', int(new_val))

    @property
    def litho(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.litho'))

    @litho.setter
    def litho(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.litho', int(new_val))

    @property
    def macro_cmd(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.macro_cmd'))

    @macro_cmd.setter
    def macro_cmd(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.macro_cmd', int(new_val))

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.internal', int(new_val))

    @property
    def scan(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.scan'))

    @scan.setter
    def scan(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.scan', int(new_val))

    @property
    def spec(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.spec'))

    @spec.setter
    def spec(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.spec', int(new_val))

    @property
    def approach(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.approach'))

    @approach.setter
    def approach(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.approach', int(new_val))

    @property
    def uncal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.uncal'))

    @uncal.setter
    def uncal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.uncal', int(new_val))


class RootLuSystemInstanceAttributeSystem_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.system_state'
        self.enum = RootLuSystemInstanceAttributeSystem_stateEnum(self._context)


class RootLuSystemInstanceAttributeMeasurement_environmentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.measurement_environment.enum'

    @property
    def air(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.measurement_environment.enum.air'))

    @air.setter
    def air(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.measurement_environment.enum.air', int(new_val))

    @property
    def liquid(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.measurement_environment.enum.liquid'))

    @liquid.setter
    def liquid(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.measurement_environment.enum.liquid', int(new_val))

    @property
    def vacuum(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.measurement_environment.enum.vacuum'))

    @vacuum.setter
    def vacuum(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.measurement_environment.enum.vacuum', int(new_val))


class RootLuSystemInstanceAttributeMeasurement_environment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.measurement_environment'
        self.enum = RootLuSystemInstanceAttributeMeasurement_environmentEnum(self._context)


class RootLuSystemInstanceAttributeHv_position_w_output_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.hv_position_w_output_mode.enum'

    @property
    def dac_hi_res_position_w(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.hv_position_w_output_mode.enum.dac_hi_res_position_w'))

    @dac_hi_res_position_w.setter
    def dac_hi_res_position_w(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.hv_position_w_output_mode.enum.dac_hi_res_position_w', int(new_val))

    @property
    def dac_fast_fast3(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.hv_position_w_output_mode.enum.dac_fast_fast3'))

    @dac_fast_fast3.setter
    def dac_fast_fast3(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.hv_position_w_output_mode.enum.dac_fast_fast3', int(new_val))


class RootLuSystemInstanceAttributeHv_position_w_output_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.hv_position_w_output_mode'
        self.enum = RootLuSystemInstanceAttributeHv_position_w_output_modeEnum(self._context)


class RootLuSystemInstanceAttributeMotor_move_directionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_move_direction.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_move_direction.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_move_direction.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_move_direction.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_move_direction.enum.positive', int(new_val))


class RootLuSystemInstanceAttributeMotor_move_direction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_move_direction'
        self.enum = RootLuSystemInstanceAttributeMotor_move_directionEnum(self._context)


class RootLuSystemInstanceAttributeIdle_external_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_external_z'


class RootLuSystemInstanceAttributeIdle_external_z_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_external_z_mode.enum'

    @property
    def absolute_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.absolute_z_pos'))

    @absolute_z_pos.setter
    def absolute_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.absolute_z_pos', int(new_val))

    @property
    def keep_last_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.keep_last_z_pos'))

    @keep_last_z_pos.setter
    def keep_last_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.keep_last_z_pos', int(new_val))

    @property
    def z_controller_active(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.z_controller_active'))

    @z_controller_active.setter
    def z_controller_active(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.z_controller_active', int(new_val))

    @property
    def retract_tip(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.retract_tip'))

    @retract_tip.setter
    def retract_tip(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.retract_tip', int(new_val))


class RootLuSystemInstanceAttributeIdle_external_z_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_external_z_mode'
        self.enum = RootLuSystemInstanceAttributeIdle_external_z_modeEnum(self._context)


class RootLuSystemInstanceAttributeIdle_position_xy_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_xy_mode.enum'

    @property
    def keep_last_xy_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_xy_mode.enum.keep_last_xy_pos'))

    @keep_last_xy_pos.setter
    def keep_last_xy_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_xy_mode.enum.keep_last_xy_pos', int(new_val))

    @property
    def image_center(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_xy_mode.enum.image_center'))

    @image_center.setter
    def image_center(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_xy_mode.enum.image_center', int(new_val))


class RootLuSystemInstanceAttributeIdle_position_xy_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_xy_mode'
        self.enum = RootLuSystemInstanceAttributeIdle_position_xy_modeEnum(self._context)


class RootLuSystemInstanceAttributeHi_res_ch5_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.hi_res_ch5_input'


class RootLuSystemInstanceAttributeHi_res_ch4_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.hi_res_ch4_input'


class RootLuSystemInstanceAttributeZ_axis_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.z_axis_ctrl_mode.enum'

    @property
    def position_sensing(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_sensing'))

    @position_sensing.setter
    def position_sensing(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_sensing', int(new_val))

    @property
    def position_drive(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_drive'))

    @position_drive.setter
    def position_drive(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_drive', int(new_val))

    @property
    def position_control(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_control'))

    @position_control.setter
    def position_control(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_control', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.undefined', int(new_val))


class RootLuSystemInstanceAttributeZ_axis_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.z_axis_ctrl_mode'
        self.enum = RootLuSystemInstanceAttributeZ_axis_ctrl_modeEnum(self._context)


class RootLuSystemInstanceAttributeOperating_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.operating_mode.enum'

    @property
    def phase_contrast(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.phase_contrast'))

    @phase_contrast.setter
    def phase_contrast(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.phase_contrast', int(new_val))

    @property
    def force_modulation(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.force_modulation'))

    @force_modulation.setter
    def force_modulation(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.force_modulation', int(new_val))

    @property
    def stm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.stm'))

    @stm.setter
    def stm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.stm', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.undefined', int(new_val))

    @property
    def const_phase(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.const_phase'))

    @const_phase.setter
    def const_phase(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.const_phase', int(new_val))

    @property
    def user_defined(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.user_defined'))

    @user_defined.setter
    def user_defined(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.user_defined', int(new_val))

    @property
    def resistivity_map(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.resistivity_map'))

    @resistivity_map.setter
    def resistivity_map(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.resistivity_map', int(new_val))

    @property
    def lateral_force(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.lateral_force'))

    @lateral_force.setter
    def lateral_force(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.lateral_force', int(new_val))

    @property
    def static_afm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.static_afm'))

    @static_afm.setter
    def static_afm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.static_afm', int(new_val))

    @property
    def dynamic_afm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.dynamic_afm'))

    @dynamic_afm.setter
    def dynamic_afm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.dynamic_afm', int(new_val))

    @property
    def fm_dynamic_afm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.fm_dynamic_afm'))

    @fm_dynamic_afm.setter
    def fm_dynamic_afm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.fm_dynamic_afm', int(new_val))


class RootLuSystemInstanceAttributeOperating_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.operating_mode'
        self.enum = RootLuSystemInstanceAttributeOperating_modeEnum(self._context)


class RootLuSystemInstanceAttributeMotor_move_speed_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_move_speed_factor'


class RootLuSystemInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute'
        self.motor_move_speed_factor = RootLuSystemInstanceAttributeMotor_move_speed_factor(self._context)
        self.operating_mode = RootLuSystemInstanceAttributeOperating_mode(self._context)
        self.z_axis_ctrl_mode = RootLuSystemInstanceAttributeZ_axis_ctrl_mode(self._context)
        self.hi_res_ch4_input = RootLuSystemInstanceAttributeHi_res_ch4_input(self._context)
        self.hi_res_ch5_input = RootLuSystemInstanceAttributeHi_res_ch5_input(self._context)
        self.idle_position_xy_mode = RootLuSystemInstanceAttributeIdle_position_xy_mode(self._context)
        self.idle_external_z_mode = RootLuSystemInstanceAttributeIdle_external_z_mode(self._context)
        self.idle_external_z = RootLuSystemInstanceAttributeIdle_external_z(self._context)
        self.motor_move_direction = RootLuSystemInstanceAttributeMotor_move_direction(self._context)
        self.hv_position_w_output_mode = RootLuSystemInstanceAttributeHv_position_w_output_mode(self._context)
        self.measurement_environment = RootLuSystemInstanceAttributeMeasurement_environment(self._context)
        self.system_state = RootLuSystemInstanceAttributeSystem_state(self._context)
        self.idle_position_z = RootLuSystemInstanceAttributeIdle_position_z(self._context)
        self.motor_step_size = RootLuSystemInstanceAttributeMotor_step_size(self._context)
        self.idle_position_z_mode = RootLuSystemInstanceAttributeIdle_position_z_mode(self._context)
        self.memory_available = RootLuSystemInstanceAttributeMemory_available(self._context)
        self.memory_block_available = RootLuSystemInstanceAttributeMemory_block_available(self._context)
        self.motor_selection = RootLuSystemInstanceAttributeMotor_selection(self._context)
        self.op_mode_kpfm_enabled = RootLuSystemInstanceAttributeOp_mode_kpfm_enabled(self._context)


class RootLuSystemInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance'
        self.attribute = RootLuSystemInstanceAttribute(self._context)
        self.trigger = RootLuSystemInstanceTrigger(self._context)


class RootLuSystem(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system'
        self.instance = RootLuSystemInstance(self._context)


class RootLuThermal_tuningInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.trigger.user_abort'


class RootLuThermal_tuningInstanceTriggerStart_block(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.trigger.start_block'


class RootLuThermal_tuningInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.trigger'
        self.start_block = RootLuThermal_tuningInstanceTriggerStart_block(self._context)
        self.user_abort = RootLuThermal_tuningInstanceTriggerUser_abort(self._context)


class RootLuThermal_tuningInstanceAttributeBuffer_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.attribute.buffer_group_id'


class RootLuThermal_tuningInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.attribute'
        self.buffer_group_id = RootLuThermal_tuningInstanceAttributeBuffer_group_id(self._context)


class RootLuThermal_tuningInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance'
        self.attribute = RootLuThermal_tuningInstanceAttribute(self._context)
        self.trigger = RootLuThermal_tuningInstanceTrigger(self._context)


class RootLuThermal_tuning(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning'
        self.instance = RootLuThermal_tuningInstance(self._context)


class RootLuAnalog_fast_outExcitationTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.trigger'


class RootLuAnalog_fast_outExcitationAttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.damping_gain'


class RootLuAnalog_fast_outExcitationAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.input.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.static', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.in_deflection', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.in_user', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.input'
        self.enum = RootLuAnalog_fast_outExcitationAttributeInputEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.current_output_value'


class RootLuAnalog_fast_outExcitationAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_offset'


class RootLuAnalog_fast_outExcitationAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.modulation.enum'

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.damping', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.modulation'
        self.enum = RootLuAnalog_fast_outExcitationAttributeModulationEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.output_gain'


class RootLuAnalog_fast_outExcitationAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.static_value'


class RootLuAnalog_fast_outExcitationAttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.analog_output.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.disabled', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outExcitationAttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_gain'


class RootLuAnalog_fast_outExcitationAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outExcitationAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_fast_outExcitationAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_fast_outExcitationAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute'
        self.calib_sig_source_dir = RootLuAnalog_fast_outExcitationAttributeCalib_sig_source_dir(self._context)
        self.calib_polarity = RootLuAnalog_fast_outExcitationAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_fast_outExcitationAttributeCalib_gain(self._context)
        self.analog_output = RootLuAnalog_fast_outExcitationAttributeAnalog_output(self._context)
        self.static_value = RootLuAnalog_fast_outExcitationAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_fast_outExcitationAttributeOutput_gain(self._context)
        self.modulation = RootLuAnalog_fast_outExcitationAttributeModulation(self._context)
        self.calib_offset = RootLuAnalog_fast_outExcitationAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_fast_outExcitationAttributeCurrent_output_value(self._context)
        self.input = RootLuAnalog_fast_outExcitationAttributeInput(self._context)
        self.damping_gain = RootLuAnalog_fast_outExcitationAttributeDamping_gain(self._context)


class RootLuAnalog_fast_outExcitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation'
        self.attribute = RootLuAnalog_fast_outExcitationAttribute(self._context)
        self.trigger = RootLuAnalog_fast_outExcitationTrigger(self._context)


class RootLuAnalog_fast_outFast2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.trigger'


class RootLuAnalog_fast_outFast2AttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.damping_gain'


class RootLuAnalog_fast_outFast2AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.input.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.static', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.in_deflection', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.in_user', int(new_val))


class RootLuAnalog_fast_outFast2AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.input'
        self.enum = RootLuAnalog_fast_outFast2AttributeInputEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.current_output_value'


class RootLuAnalog_fast_outFast2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_offset'


class RootLuAnalog_fast_outFast2AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.modulation.enum'

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.damping', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_fast_outFast2AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.modulation'
        self.enum = RootLuAnalog_fast_outFast2AttributeModulationEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.output_gain'


class RootLuAnalog_fast_outFast2AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.static_value'


class RootLuAnalog_fast_outFast2AttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.analog_output.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.disabled', int(new_val))


class RootLuAnalog_fast_outFast2AttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outFast2AttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_gain'


class RootLuAnalog_fast_outFast2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_fast_outFast2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outFast2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_fast_outFast2AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_fast_outFast2AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_fast_outFast2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute'
        self.calib_sig_source_dir = RootLuAnalog_fast_outFast2AttributeCalib_sig_source_dir(self._context)
        self.calib_polarity = RootLuAnalog_fast_outFast2AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_fast_outFast2AttributeCalib_gain(self._context)
        self.analog_output = RootLuAnalog_fast_outFast2AttributeAnalog_output(self._context)
        self.static_value = RootLuAnalog_fast_outFast2AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_fast_outFast2AttributeOutput_gain(self._context)
        self.modulation = RootLuAnalog_fast_outFast2AttributeModulation(self._context)
        self.calib_offset = RootLuAnalog_fast_outFast2AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_fast_outFast2AttributeCurrent_output_value(self._context)
        self.input = RootLuAnalog_fast_outFast2AttributeInput(self._context)
        self.damping_gain = RootLuAnalog_fast_outFast2AttributeDamping_gain(self._context)


class RootLuAnalog_fast_outFast2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2'
        self.attribute = RootLuAnalog_fast_outFast2Attribute(self._context)
        self.trigger = RootLuAnalog_fast_outFast2Trigger(self._context)


class RootLuAnalog_fast_outFast3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.trigger'


class RootLuAnalog_fast_outFast3AttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.damping_gain'


class RootLuAnalog_fast_outFast3AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.input.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.static', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.in_deflection', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.in_user', int(new_val))


class RootLuAnalog_fast_outFast3AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.input'
        self.enum = RootLuAnalog_fast_outFast3AttributeInputEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.current_output_value'


class RootLuAnalog_fast_outFast3AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_offset'


class RootLuAnalog_fast_outFast3AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.modulation.enum'

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.damping', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_fast_outFast3AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.modulation'
        self.enum = RootLuAnalog_fast_outFast3AttributeModulationEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.output_gain'


class RootLuAnalog_fast_outFast3AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.static_value'


class RootLuAnalog_fast_outFast3AttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.analog_output.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.disabled', int(new_val))


class RootLuAnalog_fast_outFast3AttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outFast3AttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_gain'


class RootLuAnalog_fast_outFast3AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_fast_outFast3AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outFast3AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_fast_outFast3AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_fast_outFast3AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_fast_outFast3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute'
        self.calib_sig_source_dir = RootLuAnalog_fast_outFast3AttributeCalib_sig_source_dir(self._context)
        self.calib_polarity = RootLuAnalog_fast_outFast3AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_fast_outFast3AttributeCalib_gain(self._context)
        self.analog_output = RootLuAnalog_fast_outFast3AttributeAnalog_output(self._context)
        self.static_value = RootLuAnalog_fast_outFast3AttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_fast_outFast3AttributeOutput_gain(self._context)
        self.modulation = RootLuAnalog_fast_outFast3AttributeModulation(self._context)
        self.calib_offset = RootLuAnalog_fast_outFast3AttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_fast_outFast3AttributeCurrent_output_value(self._context)
        self.input = RootLuAnalog_fast_outFast3AttributeInput(self._context)
        self.damping_gain = RootLuAnalog_fast_outFast3AttributeDamping_gain(self._context)


class RootLuAnalog_fast_outFast3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3'
        self.attribute = RootLuAnalog_fast_outFast3Attribute(self._context)
        self.trigger = RootLuAnalog_fast_outFast3Trigger(self._context)


class RootLuAnalog_fast_outUserTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.trigger'


class RootLuAnalog_fast_outUserAttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.damping_gain'


class RootLuAnalog_fast_outUserAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.input.enum'

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.static', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.in_deflection', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.in_user', int(new_val))


class RootLuAnalog_fast_outUserAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.input'
        self.enum = RootLuAnalog_fast_outUserAttributeInputEnum(self._context)


class RootLuAnalog_fast_outUserAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.current_output_value'


class RootLuAnalog_fast_outUserAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_offset'


class RootLuAnalog_fast_outUserAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.modulation.enum'

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.damping', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.analyzer1_reference', int(new_val))

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.disabled', int(new_val))


class RootLuAnalog_fast_outUserAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.modulation'
        self.enum = RootLuAnalog_fast_outUserAttributeModulationEnum(self._context)


class RootLuAnalog_fast_outUserAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.output_gain'


class RootLuAnalog_fast_outUserAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.static_value'


class RootLuAnalog_fast_outUserAttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.analog_output.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.analog_output.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.analog_output.enum.disabled', int(new_val))


class RootLuAnalog_fast_outUserAttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outUserAttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outUserAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_gain'


class RootLuAnalog_fast_outUserAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_fast_outUserAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outUserAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outUserAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_fast_outUserAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_fast_outUserAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_fast_outUserAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute'
        self.calib_sig_source_dir = RootLuAnalog_fast_outUserAttributeCalib_sig_source_dir(self._context)
        self.calib_polarity = RootLuAnalog_fast_outUserAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_fast_outUserAttributeCalib_gain(self._context)
        self.analog_output = RootLuAnalog_fast_outUserAttributeAnalog_output(self._context)
        self.static_value = RootLuAnalog_fast_outUserAttributeStatic_value(self._context)
        self.output_gain = RootLuAnalog_fast_outUserAttributeOutput_gain(self._context)
        self.modulation = RootLuAnalog_fast_outUserAttributeModulation(self._context)
        self.calib_offset = RootLuAnalog_fast_outUserAttributeCalib_offset(self._context)
        self.current_output_value = RootLuAnalog_fast_outUserAttributeCurrent_output_value(self._context)
        self.input = RootLuAnalog_fast_outUserAttributeInput(self._context)
        self.damping_gain = RootLuAnalog_fast_outUserAttributeDamping_gain(self._context)


class RootLuAnalog_fast_outUser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user'
        self.attribute = RootLuAnalog_fast_outUserAttribute(self._context)
        self.trigger = RootLuAnalog_fast_outUserTrigger(self._context)


class RootLuAnalog_fast_out(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out'
        self.user = RootLuAnalog_fast_outUser(self._context)
        self.fast3 = RootLuAnalog_fast_outFast3(self._context)
        self.fast2 = RootLuAnalog_fast_outFast2(self._context)
        self.excitation = RootLuAnalog_fast_outExcitation(self._context)


class RootLuZ_controller_exInstanceTriggerReset_tip_guard_active(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.reset_tip_guard_active'


class RootLuZ_controller_exInstanceTriggerApply_max_z_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.apply_max_z_value'


class RootLuZ_controller_exInstanceTriggerUpdate_base_line_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.update_base_line_pos'


class RootLuZ_controller_exInstanceTriggerInit_phase_move(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.init_phase_move'


class RootLuZ_controller_exInstanceTriggerSwitch_to_target_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.switch_to_target_output_channel'


class RootLuZ_controller_exInstanceTriggerWait_for_z_controller_adjust(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.wait_for_z_controller_adjust'


class RootLuZ_controller_exInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.abort'


class RootLuZ_controller_exInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.start'


class RootLuZ_controller_exInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.stop'


class RootLuZ_controller_exInstanceTriggerStart_simple(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.start_simple'


class RootLuZ_controller_exInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger'
        self.start_simple = RootLuZ_controller_exInstanceTriggerStart_simple(self._context)
        self.stop = RootLuZ_controller_exInstanceTriggerStop(self._context)
        self.start = RootLuZ_controller_exInstanceTriggerStart(self._context)
        self.abort = RootLuZ_controller_exInstanceTriggerAbort(self._context)
        self.wait_for_z_controller_adjust = RootLuZ_controller_exInstanceTriggerWait_for_z_controller_adjust(self._context)
        self.switch_to_target_output_channel = RootLuZ_controller_exInstanceTriggerSwitch_to_target_output_channel(self._context)
        self.init_phase_move = RootLuZ_controller_exInstanceTriggerInit_phase_move(self._context)
        self.update_base_line_pos = RootLuZ_controller_exInstanceTriggerUpdate_base_line_pos(self._context)
        self.apply_max_z_value = RootLuZ_controller_exInstanceTriggerApply_max_z_value(self._context)
        self.reset_tip_guard_active = RootLuZ_controller_exInstanceTriggerReset_tip_guard_active(self._context)


class RootLuZ_controller_exInstanceAttributeCtrl_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ctrl_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuZ_controller_exInstanceAttributeCtrl_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ctrl_input'
        self.enum = RootLuZ_controller_exInstanceAttributeCtrl_inputEnum(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_output_channelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_output_channel.enum'

    @property
    def out_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_output_channel.enum.out_position_z'))

    @out_position_z.setter
    def out_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_output_channel.enum.out_position_z', int(new_val))

    @property
    def out_external_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_output_channel.enum.out_external_z'))

    @out_external_z.setter
    def out_external_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_output_channel.enum.out_external_z', int(new_val))


class RootLuZ_controller_exInstanceAttributeCurrent_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_output_channel'
        self.enum = RootLuZ_controller_exInstanceAttributeCurrent_output_channelEnum(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_output_value'


class RootLuZ_controller_exInstanceAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_input_value'


class RootLuZ_controller_exInstanceAttributeCurrent_sum_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_sum_value'


class RootLuZ_controller_exInstanceAttributeDdc_filter_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ddc_filter_rate'


class RootLuZ_controller_exInstanceAttributeMax_z_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.max_z_value'


class RootLuZ_controller_exInstanceAttributeOutput_compare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuZ_controller_exInstanceAttributeOutput_compare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_compare_mode'
        self.enum = RootLuZ_controller_exInstanceAttributeOutput_compare_modeEnum(self._context)


class RootLuZ_controller_exInstanceAttributeOutput_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.disabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeOutput_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_modulation_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeOutput_modulation_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeActive_pid_gain_setEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum'

    @property
    def out_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_position_z'))

    @out_position_z.setter
    def out_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_position_z', int(new_val))

    @property
    def out_external_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_external_z'))

    @out_external_z.setter
    def out_external_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_external_z', int(new_val))

    @property
    def user(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.user'))

    @user.setter
    def user(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.user', int(new_val))


class RootLuZ_controller_exInstanceAttributeActive_pid_gain_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.active_pid_gain_set'
        self.enum = RootLuZ_controller_exInstanceAttributeActive_pid_gain_setEnum(self._context)


class RootLuZ_controller_exInstanceAttributeOutput_compare_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_compare_value'


class RootLuZ_controller_exInstanceAttributeInput_compare_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.input_compare_value'


class RootLuZ_controller_exInstanceAttributePhase_move_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_value_vec'


class RootLuZ_controller_exInstanceAttributePhase_real_end_pos_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_real_end_pos_vec'


class RootLuZ_controller_exInstanceAttributeZ_controller_adjust_timed_out(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.z_controller_adjust_timed_out'


class RootLuZ_controller_exInstanceAttributeSet_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.set_point'


class RootLuZ_controller_exInstanceAttributeTip_guard_criteria_enable_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum'

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.all', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.none', int(new_val))

    @property
    def deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.deflection'))

    @deflection.setter
    def deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.deflection', int(new_val))

    @property
    def detector_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.detector_sum'))

    @detector_sum.setter
    def detector_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.detector_sum', int(new_val))

    @property
    def z_ctrl_in(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.z_ctrl_in'))

    @z_ctrl_in.setter
    def z_ctrl_in(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.z_ctrl_in', int(new_val))

    @property
    def user_channel(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.user_channel'))

    @user_channel.setter
    def user_channel(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask.enum.user_channel', int(new_val))


class RootLuZ_controller_exInstanceAttributeTip_guard_criteria_enable_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_criteria_enable_mask'
        self.enum = RootLuZ_controller_exInstanceAttributeTip_guard_criteria_enable_maskEnum(self._context)


class RootLuZ_controller_exInstanceAttributeTip_guard_current_statesEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum'

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.all', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.none', int(new_val))

    @property
    def deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.deflection'))

    @deflection.setter
    def deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.deflection', int(new_val))

    @property
    def detector_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.detector_sum'))

    @detector_sum.setter
    def detector_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.detector_sum', int(new_val))

    @property
    def z_ctrl_in(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.z_ctrl_in'))

    @z_ctrl_in.setter
    def z_ctrl_in(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.z_ctrl_in', int(new_val))

    @property
    def user_channel(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.user_channel'))

    @user_channel.setter
    def user_channel(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_current_states.enum.user_channel', int(new_val))


class RootLuZ_controller_exInstanceAttributeTip_guard_current_states(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_current_states'
        self.enum = RootLuZ_controller_exInstanceAttributeTip_guard_current_statesEnum(self._context)


class RootLuZ_controller_exInstanceAttributeTip_guard_current_active_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_current_active_state'


class RootLuZ_controller_exInstanceAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.disabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeSet_point_modulation_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeTip_guard_detector_sum_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_detector_sum_limit'


class RootLuZ_controller_exInstanceAttributeTip_guard_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_enable.enum.disabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeTip_guard_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeTip_guard_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeBase_line_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.base_line_pos'


class RootLuZ_controller_exInstanceAttributeCurrent_limited_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_limited_value'


class RootLuZ_controller_exInstanceAttributeFeedback_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.positive', int(new_val))


class RootLuZ_controller_exInstanceAttributeFeedback_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.feedback_polarity'
        self.enum = RootLuZ_controller_exInstanceAttributeFeedback_polarityEnum(self._context)


class RootLuZ_controller_exInstanceAttributeTip_guard_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_speed'


class RootLuZ_controller_exInstanceAttributePhase_pause_time_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_pause_time_vec'


class RootLuZ_controller_exInstanceAttributeCurrent_error_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_error_value'


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeNumber_of_pid_gain_sets(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.number_of_pid_gain_sets'


class RootLuZ_controller_exInstanceAttributeCurrent_input_filtered_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_input_filtered_value'


class RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_relative', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_to_absolute', int(new_val))

    @property
    def pause(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.pause'))

    @pause.setter
    def pause(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.pause', int(new_val))


class RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec'
        self.enum = RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vecEnum(self._context)


class RootLuZ_controller_exInstanceAttributeMin_z_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.min_z_value'


class RootLuZ_controller_exInstanceAttributePhase_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_count'


class RootLuZ_controller_exInstanceAttributePhase_move_time_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_time_vec'


class RootLuZ_controller_exInstanceAttributePhase_init_phase_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_init_phase_count'


class RootLuZ_controller_exInstanceAttributeTip_guard_user_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuZ_controller_exInstanceAttributeTip_guard_user_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_user_input'
        self.enum = RootLuZ_controller_exInstanceAttributeTip_guard_user_inputEnum(self._context)


class RootLuZ_controller_exInstanceAttributeMax_z_value_change_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.max_z_value_change_speed'


class RootLuZ_controller_exInstanceAttributeDdc_filter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ddc_filter_number'


class RootLuZ_controller_exInstanceAttributeClosed_loop_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_p_gain'


class RootLuZ_controller_exInstanceAttributeProportional_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.proportional_gain'


class RootLuZ_controller_exInstanceAttributeTip_guard_deflection_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_deflection_limit'


class RootLuZ_controller_exInstanceAttributePhase_move_stop_by_value_active_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_stop_by_value_active_vec'


class RootLuZ_controller_exInstanceAttributeInput_compare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuZ_controller_exInstanceAttributeInput_compare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.input_compare_mode'
        self.enum = RootLuZ_controller_exInstanceAttributeInput_compare_modeEnum(self._context)


class RootLuZ_controller_exInstanceAttributeTarget_output_channelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.target_output_channel.enum'

    @property
    def out_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_position_z'))

    @out_position_z.setter
    def out_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_position_z', int(new_val))

    @property
    def out_external_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_external_z'))

    @out_external_z.setter
    def out_external_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_external_z', int(new_val))


class RootLuZ_controller_exInstanceAttributeTarget_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.target_output_channel'
        self.enum = RootLuZ_controller_exInstanceAttributeTarget_output_channelEnum(self._context)


class RootLuZ_controller_exInstanceAttributeMax_z_current_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.max_z_current_value'


class RootLuZ_controller_exInstanceAttributeTip_guard_last_active_statesEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum'

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.all', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.none', int(new_val))

    @property
    def deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.deflection'))

    @deflection.setter
    def deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.deflection', int(new_val))

    @property
    def detector_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.detector_sum'))

    @detector_sum.setter
    def detector_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.detector_sum', int(new_val))

    @property
    def z_ctrl_in(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.z_ctrl_in'))

    @z_ctrl_in.setter
    def z_ctrl_in(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.z_ctrl_in', int(new_val))

    @property
    def user_channel(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.user_channel'))

    @user_channel.setter
    def user_channel(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states.enum.user_channel', int(new_val))


class RootLuZ_controller_exInstanceAttributeTip_guard_last_active_states(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_last_active_states'
        self.enum = RootLuZ_controller_exInstanceAttributeTip_guard_last_active_statesEnum(self._context)


class RootLuZ_controller_exInstanceAttributePhase_work_mode_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum'

    @property
    def z_feedback(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_feedback'))

    @z_feedback.setter
    def z_feedback(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_feedback', int(new_val))

    @property
    def z_closed_loop(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_closed_loop'))

    @z_closed_loop.setter
    def z_closed_loop(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_closed_loop', int(new_val))

    @property
    def z_drive(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_drive'))

    @z_drive.setter
    def z_drive(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_drive', int(new_val))


class RootLuZ_controller_exInstanceAttributePhase_work_mode_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec'
        self.enum = RootLuZ_controller_exInstanceAttributePhase_work_mode_vecEnum(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_feedback_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum'

    @property
    def max_retracted(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_retracted'))

    @max_retracted.setter
    def max_retracted(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_retracted', int(new_val))

    @property
    def max_extended(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_extended'))

    @max_extended.setter
    def max_extended(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_extended', int(new_val))

    @property
    def in_range(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.in_range'))

    @in_range.setter
    def in_range(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.in_range', int(new_val))


class RootLuZ_controller_exInstanceAttributeCurrent_feedback_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_feedback_status'
        self.enum = RootLuZ_controller_exInstanceAttributeCurrent_feedback_statusEnum(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_status_flags(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_status_flags'


class RootLuZ_controller_exInstanceAttributeDifferential_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.differential_gain'


class RootLuZ_controller_exInstanceAttributeTip_guard_user_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_user_limit'


class RootLuZ_controller_exInstanceAttributeClosed_loop_d_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_d_gain'


class RootLuZ_controller_exInstanceAttributeSensor_slope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.sensor_slope'


class RootLuZ_controller_exInstanceAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.filter_coeff_vec'


class RootLuZ_controller_exInstanceAttributeBase_work_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.base_work_mode.enum'

    @property
    def z_feedback(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_feedback'))

    @z_feedback.setter
    def z_feedback(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_feedback', int(new_val))

    @property
    def z_closed_loop(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_closed_loop'))

    @z_closed_loop.setter
    def z_closed_loop(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_closed_loop', int(new_val))

    @property
    def z_drive(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_drive'))

    @z_drive.setter
    def z_drive(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_drive', int(new_val))


class RootLuZ_controller_exInstanceAttributeBase_work_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.base_work_mode'
        self.enum = RootLuZ_controller_exInstanceAttributeBase_work_modeEnum(self._context)


class RootLuZ_controller_exInstanceAttributeClosed_loop_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_polarity'


class RootLuZ_controller_exInstanceAttributeCurrent_pid_command_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_pid_command_value'


class RootLuZ_controller_exInstanceAttributeCurrent_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_phase'


class RootLuZ_controller_exInstanceAttributePhase_move_mode_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_time', int(new_val))


class RootLuZ_controller_exInstanceAttributePhase_move_mode_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec'
        self.enum = RootLuZ_controller_exInstanceAttributePhase_move_mode_vecEnum(self._context)


class RootLuZ_controller_exInstanceAttributeClosed_loop_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_i_gain'


class RootLuZ_controller_exInstanceAttributePhase_move_speed_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_speed_vec'


class RootLuZ_controller_exInstanceAttributeTip_guard_user_compare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_user_compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.tip_guard_user_compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.tip_guard_user_compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuZ_controller_exInstanceAttributeTip_guard_user_compare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.tip_guard_user_compare_mode'
        self.enum = RootLuZ_controller_exInstanceAttributeTip_guard_user_compare_modeEnum(self._context)


class RootLuZ_controller_exInstanceAttributeDdc_filter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ddc_filter_coeff_vec'


class RootLuZ_controller_exInstanceAttributeIntegral_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.integral_gain'


class RootLuZ_controller_exInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute'
        self.integral_gain = RootLuZ_controller_exInstanceAttributeIntegral_gain(self._context)
        self.ddc_filter_coeff_vec = RootLuZ_controller_exInstanceAttributeDdc_filter_coeff_vec(self._context)
        self.tip_guard_user_compare_mode = RootLuZ_controller_exInstanceAttributeTip_guard_user_compare_mode(self._context)
        self.phase_move_speed_vec = RootLuZ_controller_exInstanceAttributePhase_move_speed_vec(self._context)
        self.closed_loop_i_gain = RootLuZ_controller_exInstanceAttributeClosed_loop_i_gain(self._context)
        self.phase_move_mode_vec = RootLuZ_controller_exInstanceAttributePhase_move_mode_vec(self._context)
        self.current_phase = RootLuZ_controller_exInstanceAttributeCurrent_phase(self._context)
        self.current_pid_command_value = RootLuZ_controller_exInstanceAttributeCurrent_pid_command_value(self._context)
        self.closed_loop_polarity = RootLuZ_controller_exInstanceAttributeClosed_loop_polarity(self._context)
        self.base_work_mode = RootLuZ_controller_exInstanceAttributeBase_work_mode(self._context)
        self.filter_coeff_vec = RootLuZ_controller_exInstanceAttributeFilter_coeff_vec(self._context)
        self.sensor_slope = RootLuZ_controller_exInstanceAttributeSensor_slope(self._context)
        self.closed_loop_d_gain = RootLuZ_controller_exInstanceAttributeClosed_loop_d_gain(self._context)
        self.tip_guard_user_limit = RootLuZ_controller_exInstanceAttributeTip_guard_user_limit(self._context)
        self.differential_gain = RootLuZ_controller_exInstanceAttributeDifferential_gain(self._context)
        self.current_status_flags = RootLuZ_controller_exInstanceAttributeCurrent_status_flags(self._context)
        self.current_feedback_status = RootLuZ_controller_exInstanceAttributeCurrent_feedback_status(self._context)
        self.phase_work_mode_vec = RootLuZ_controller_exInstanceAttributePhase_work_mode_vec(self._context)
        self.tip_guard_last_active_states = RootLuZ_controller_exInstanceAttributeTip_guard_last_active_states(self._context)
        self.max_z_current_value = RootLuZ_controller_exInstanceAttributeMax_z_current_value(self._context)
        self.target_output_channel = RootLuZ_controller_exInstanceAttributeTarget_output_channel(self._context)
        self.input_compare_mode = RootLuZ_controller_exInstanceAttributeInput_compare_mode(self._context)
        self.phase_move_stop_by_value_active_vec = RootLuZ_controller_exInstanceAttributePhase_move_stop_by_value_active_vec(self._context)
        self.tip_guard_deflection_limit = RootLuZ_controller_exInstanceAttributeTip_guard_deflection_limit(self._context)
        self.proportional_gain = RootLuZ_controller_exInstanceAttributeProportional_gain(self._context)
        self.closed_loop_p_gain = RootLuZ_controller_exInstanceAttributeClosed_loop_p_gain(self._context)
        self.ddc_filter_number = RootLuZ_controller_exInstanceAttributeDdc_filter_number(self._context)
        self.max_z_value_change_speed = RootLuZ_controller_exInstanceAttributeMax_z_value_change_speed(self._context)
        self.tip_guard_user_input = RootLuZ_controller_exInstanceAttributeTip_guard_user_input(self._context)
        self.phase_init_phase_count = RootLuZ_controller_exInstanceAttributePhase_init_phase_count(self._context)
        self.phase_move_time_vec = RootLuZ_controller_exInstanceAttributePhase_move_time_vec(self._context)
        self.phase_count = RootLuZ_controller_exInstanceAttributePhase_count(self._context)
        self.min_z_value = RootLuZ_controller_exInstanceAttributeMin_z_value(self._context)
        self.phase_move_end_mode_vec = RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vec(self._context)
        self.current_input_filtered_value = RootLuZ_controller_exInstanceAttributeCurrent_input_filtered_value(self._context)
        self.number_of_pid_gain_sets = RootLuZ_controller_exInstanceAttributeNumber_of_pid_gain_sets(self._context)
        self.memory_signal_gen_drive_enable = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enable(self._context)
        self.current_error_value = RootLuZ_controller_exInstanceAttributeCurrent_error_value(self._context)
        self.phase_pause_time_vec = RootLuZ_controller_exInstanceAttributePhase_pause_time_vec(self._context)
        self.tip_guard_speed = RootLuZ_controller_exInstanceAttributeTip_guard_speed(self._context)
        self.feedback_polarity = RootLuZ_controller_exInstanceAttributeFeedback_polarity(self._context)
        self.current_limited_value = RootLuZ_controller_exInstanceAttributeCurrent_limited_value(self._context)
        self.base_line_pos = RootLuZ_controller_exInstanceAttributeBase_line_pos(self._context)
        self.tip_guard_enable = RootLuZ_controller_exInstanceAttributeTip_guard_enable(self._context)
        self.tip_guard_detector_sum_limit = RootLuZ_controller_exInstanceAttributeTip_guard_detector_sum_limit(self._context)
        self.set_point_modulation_enable = RootLuZ_controller_exInstanceAttributeSet_point_modulation_enable(self._context)
        self.tip_guard_current_active_state = RootLuZ_controller_exInstanceAttributeTip_guard_current_active_state(self._context)
        self.tip_guard_current_states = RootLuZ_controller_exInstanceAttributeTip_guard_current_states(self._context)
        self.tip_guard_criteria_enable_mask = RootLuZ_controller_exInstanceAttributeTip_guard_criteria_enable_mask(self._context)
        self.set_point = RootLuZ_controller_exInstanceAttributeSet_point(self._context)
        self.z_controller_adjust_timed_out = RootLuZ_controller_exInstanceAttributeZ_controller_adjust_timed_out(self._context)
        self.phase_real_end_pos_vec = RootLuZ_controller_exInstanceAttributePhase_real_end_pos_vec(self._context)
        self.phase_move_value_vec = RootLuZ_controller_exInstanceAttributePhase_move_value_vec(self._context)
        self.input_compare_value = RootLuZ_controller_exInstanceAttributeInput_compare_value(self._context)
        self.output_compare_value = RootLuZ_controller_exInstanceAttributeOutput_compare_value(self._context)
        self.active_pid_gain_set = RootLuZ_controller_exInstanceAttributeActive_pid_gain_set(self._context)
        self.memory_signal_gen_position_enable = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enable(self._context)
        self.output_modulation_enable = RootLuZ_controller_exInstanceAttributeOutput_modulation_enable(self._context)
        self.output_compare_mode = RootLuZ_controller_exInstanceAttributeOutput_compare_mode(self._context)
        self.max_z_value = RootLuZ_controller_exInstanceAttributeMax_z_value(self._context)
        self.ddc_filter_rate = RootLuZ_controller_exInstanceAttributeDdc_filter_rate(self._context)
        self.current_sum_value = RootLuZ_controller_exInstanceAttributeCurrent_sum_value(self._context)
        self.current_input_value = RootLuZ_controller_exInstanceAttributeCurrent_input_value(self._context)
        self.current_output_value = RootLuZ_controller_exInstanceAttributeCurrent_output_value(self._context)
        self.current_output_channel = RootLuZ_controller_exInstanceAttributeCurrent_output_channel(self._context)
        self.ctrl_input = RootLuZ_controller_exInstanceAttributeCtrl_input(self._context)


class RootLuZ_controller_exInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance'
        self.attribute = RootLuZ_controller_exInstanceAttribute(self._context)
        self.trigger = RootLuZ_controller_exInstanceTrigger(self._context)


class RootLuZ_controller_ex(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex'
        self.instance = RootLuZ_controller_exInstance(self._context)


class RootLuHv_amplifierScanheadTriggerDisable_z_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.disable_z_modulation'


class RootLuHv_amplifierScanheadTriggerEnable_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.enable_power'


class RootLuHv_amplifierScanheadTriggerEnable_z_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.enable_z_modulation'


class RootLuHv_amplifierScanheadTriggerDepreciated_6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.depreciated_6'


class RootLuHv_amplifierScanheadTriggerStart_switch_to_target_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.start_switch_to_target_mode'


class RootLuHv_amplifierScanheadTriggerSwitch_to_target_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.switch_to_target_mode'


class RootLuHv_amplifierScanheadTriggerDisable_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.disable_power'


class RootLuHv_amplifierScanheadTriggerDisable_module(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.disable_module'


class RootLuHv_amplifierScanheadTriggerEnable_module(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger.enable_module'


class RootLuHv_amplifierScanheadTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.trigger'
        self.enable_module = RootLuHv_amplifierScanheadTriggerEnable_module(self._context)
        self.disable_module = RootLuHv_amplifierScanheadTriggerDisable_module(self._context)
        self.disable_power = RootLuHv_amplifierScanheadTriggerDisable_power(self._context)
        self.switch_to_target_mode = RootLuHv_amplifierScanheadTriggerSwitch_to_target_mode(self._context)
        self.start_switch_to_target_mode = RootLuHv_amplifierScanheadTriggerStart_switch_to_target_mode(self._context)
        self.depreciated_6 = RootLuHv_amplifierScanheadTriggerDepreciated_6(self._context)
        self.enable_z_modulation = RootLuHv_amplifierScanheadTriggerEnable_z_modulation(self._context)
        self.enable_power = RootLuHv_amplifierScanheadTriggerEnable_power(self._context)
        self.disable_z_modulation = RootLuHv_amplifierScanheadTriggerDisable_z_modulation(self._context)


class RootLuHv_amplifierScanheadAttributeInterlock_open_cx_cable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.interlock_open_cx_cable'


class RootLuHv_amplifierScanheadAttributeOutput_discharge_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.output_discharge_delay'


class RootLuHv_amplifierScanheadAttributeInterlock_open_hv_cable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.interlock_open_hv_cable'


class RootLuHv_amplifierScanheadAttributeMode_currentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.mode_current.enum'

    @property
    def lv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.mode_current.enum.lv'))

    @lv.setter
    def lv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.mode_current.enum.lv', int(new_val))

    @property
    def hv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.mode_current.enum.hv'))

    @hv.setter
    def hv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.mode_current.enum.hv', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.mode_current.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.mode_current.enum.off', int(new_val))


class RootLuHv_amplifierScanheadAttributeMode_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.mode_current'
        self.enum = RootLuHv_amplifierScanheadAttributeMode_currentEnum(self._context)


class RootLuHv_amplifierScanheadAttributeLast_mode_switch_retvalEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval.enum'

    @property
    def interlock_open(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval.enum.interlock_open'))

    @interlock_open.setter
    def interlock_open(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval.enum.interlock_open', int(new_val))

    @property
    def ok(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval.enum.ok'))

    @ok.setter
    def ok(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval.enum.ok', int(new_val))

    @property
    def mode_not_supported(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval.enum.mode_not_supported'))

    @mode_not_supported.setter
    def mode_not_supported(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval.enum.mode_not_supported', int(new_val))


class RootLuHv_amplifierScanheadAttributeLast_mode_switch_retval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.last_mode_switch_retval'
        self.enum = RootLuHv_amplifierScanheadAttributeLast_mode_switch_retvalEnum(self._context)


class RootLuHv_amplifierScanheadAttributeTemperature(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.temperature'


class RootLuHv_amplifierScanheadAttributeTypeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.type.enum'

    @property
    def hv500(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.type.enum.hv500'))

    @hv500.setter
    def hv500(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.type.enum.hv500', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.type.enum.not_connected', int(new_val))

    @property
    def a201(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.type.enum.a201'))

    @a201.setter
    def a201(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.type.enum.a201', int(new_val))

    @property
    def a202(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.type.enum.a202'))

    @a202.setter
    def a202(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.type.enum.a202', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.type.enum.unknown', int(new_val))

    @property
    def hv180(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.type.enum.hv180'))

    @hv180.setter
    def hv180(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.type.enum.hv180', int(new_val))


class RootLuHv_amplifierScanheadAttributeType(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.type'
        self.enum = RootLuHv_amplifierScanheadAttributeTypeEnum(self._context)


class RootLuHv_amplifierScanheadAttributeZ_modulation_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.z_modulation_enabled'


class RootLuHv_amplifierScanheadAttributeMode_targetEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.mode_target.enum'

    @property
    def lv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.mode_target.enum.lv'))

    @lv.setter
    def lv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.mode_target.enum.lv', int(new_val))

    @property
    def hv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.mode_target.enum.hv'))

    @hv.setter
    def hv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.mode_target.enum.hv', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.mode_target.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.mode_target.enum.off', int(new_val))


class RootLuHv_amplifierScanheadAttributeMode_target(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.mode_target'
        self.enum = RootLuHv_amplifierScanheadAttributeMode_targetEnum(self._context)


class RootLuHv_amplifierScanheadAttributeSelected_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.selected_input.enum'

    @property
    def bnc(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.selected_input.enum.bnc'))

    @bnc.setter
    def bnc(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.selected_input.enum.bnc', int(new_val))

    @property
    def not_selectable(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.selected_input.enum.not_selectable'))

    @not_selectable.setter
    def not_selectable(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.selected_input.enum.not_selectable', int(new_val))

    @property
    def dvi(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.scanhead.attribute.selected_input.enum.dvi'))

    @dvi.setter
    def dvi(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.scanhead.attribute.selected_input.enum.dvi', int(new_val))


class RootLuHv_amplifierScanheadAttributeSelected_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.selected_input'
        self.enum = RootLuHv_amplifierScanheadAttributeSelected_inputEnum(self._context)


class RootLuHv_amplifierScanheadAttributeInterlock_open_user(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.interlock_open_user'


class RootLuHv_amplifierScanheadAttributePower_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.power_enabled'


class RootLuHv_amplifierScanheadAttributeHv_module_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute.hv_module_enabled'


class RootLuHv_amplifierScanheadAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead.attribute'
        self.hv_module_enabled = RootLuHv_amplifierScanheadAttributeHv_module_enabled(self._context)
        self.power_enabled = RootLuHv_amplifierScanheadAttributePower_enabled(self._context)
        self.interlock_open_user = RootLuHv_amplifierScanheadAttributeInterlock_open_user(self._context)
        self.selected_input = RootLuHv_amplifierScanheadAttributeSelected_input(self._context)
        self.mode_target = RootLuHv_amplifierScanheadAttributeMode_target(self._context)
        self.z_modulation_enabled = RootLuHv_amplifierScanheadAttributeZ_modulation_enabled(self._context)
        self.type = RootLuHv_amplifierScanheadAttributeType(self._context)
        self.temperature = RootLuHv_amplifierScanheadAttributeTemperature(self._context)
        self.last_mode_switch_retval = RootLuHv_amplifierScanheadAttributeLast_mode_switch_retval(self._context)
        self.mode_current = RootLuHv_amplifierScanheadAttributeMode_current(self._context)
        self.interlock_open_hv_cable = RootLuHv_amplifierScanheadAttributeInterlock_open_hv_cable(self._context)
        self.output_discharge_delay = RootLuHv_amplifierScanheadAttributeOutput_discharge_delay(self._context)
        self.interlock_open_cx_cable = RootLuHv_amplifierScanheadAttributeInterlock_open_cx_cable(self._context)


class RootLuHv_amplifierScanhead(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.scanhead'
        self.attribute = RootLuHv_amplifierScanheadAttribute(self._context)
        self.trigger = RootLuHv_amplifierScanheadTrigger(self._context)


class RootLuHv_amplifierDual_actuationTriggerDisable_z_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.disable_z_modulation'


class RootLuHv_amplifierDual_actuationTriggerEnable_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.enable_power'


class RootLuHv_amplifierDual_actuationTriggerEnable_z_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.enable_z_modulation'


class RootLuHv_amplifierDual_actuationTriggerDepreciated_6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.depreciated_6'


class RootLuHv_amplifierDual_actuationTriggerStart_switch_to_target_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.start_switch_to_target_mode'


class RootLuHv_amplifierDual_actuationTriggerSwitch_to_target_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.switch_to_target_mode'


class RootLuHv_amplifierDual_actuationTriggerDisable_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.disable_power'


class RootLuHv_amplifierDual_actuationTriggerDisable_module(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.disable_module'


class RootLuHv_amplifierDual_actuationTriggerEnable_module(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger.enable_module'


class RootLuHv_amplifierDual_actuationTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.trigger'
        self.enable_module = RootLuHv_amplifierDual_actuationTriggerEnable_module(self._context)
        self.disable_module = RootLuHv_amplifierDual_actuationTriggerDisable_module(self._context)
        self.disable_power = RootLuHv_amplifierDual_actuationTriggerDisable_power(self._context)
        self.switch_to_target_mode = RootLuHv_amplifierDual_actuationTriggerSwitch_to_target_mode(self._context)
        self.start_switch_to_target_mode = RootLuHv_amplifierDual_actuationTriggerStart_switch_to_target_mode(self._context)
        self.depreciated_6 = RootLuHv_amplifierDual_actuationTriggerDepreciated_6(self._context)
        self.enable_z_modulation = RootLuHv_amplifierDual_actuationTriggerEnable_z_modulation(self._context)
        self.enable_power = RootLuHv_amplifierDual_actuationTriggerEnable_power(self._context)
        self.disable_z_modulation = RootLuHv_amplifierDual_actuationTriggerDisable_z_modulation(self._context)


class RootLuHv_amplifierDual_actuationAttributeInterlock_open_cx_cable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.interlock_open_cx_cable'


class RootLuHv_amplifierDual_actuationAttributeOutput_discharge_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.output_discharge_delay'


class RootLuHv_amplifierDual_actuationAttributeInterlock_open_hv_cable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.interlock_open_hv_cable'


class RootLuHv_amplifierDual_actuationAttributeMode_currentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.mode_current.enum'

    @property
    def lv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.mode_current.enum.lv'))

    @lv.setter
    def lv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.mode_current.enum.lv', int(new_val))

    @property
    def hv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.mode_current.enum.hv'))

    @hv.setter
    def hv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.mode_current.enum.hv', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.mode_current.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.mode_current.enum.off', int(new_val))


class RootLuHv_amplifierDual_actuationAttributeMode_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.mode_current'
        self.enum = RootLuHv_amplifierDual_actuationAttributeMode_currentEnum(self._context)


class RootLuHv_amplifierDual_actuationAttributeLast_mode_switch_retvalEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval.enum'

    @property
    def interlock_open(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval.enum.interlock_open'))

    @interlock_open.setter
    def interlock_open(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval.enum.interlock_open', int(new_val))

    @property
    def ok(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval.enum.ok'))

    @ok.setter
    def ok(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval.enum.ok', int(new_val))

    @property
    def mode_not_supported(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval.enum.mode_not_supported'))

    @mode_not_supported.setter
    def mode_not_supported(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval.enum.mode_not_supported', int(new_val))


class RootLuHv_amplifierDual_actuationAttributeLast_mode_switch_retval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.last_mode_switch_retval'
        self.enum = RootLuHv_amplifierDual_actuationAttributeLast_mode_switch_retvalEnum(self._context)


class RootLuHv_amplifierDual_actuationAttributeTemperature(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.temperature'


class RootLuHv_amplifierDual_actuationAttributeTypeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.type.enum'

    @property
    def hv500(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.hv500'))

    @hv500.setter
    def hv500(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.hv500', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.not_connected', int(new_val))

    @property
    def a201(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.a201'))

    @a201.setter
    def a201(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.a201', int(new_val))

    @property
    def a202(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.a202'))

    @a202.setter
    def a202(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.a202', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.unknown', int(new_val))

    @property
    def hv180(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.hv180'))

    @hv180.setter
    def hv180(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.type.enum.hv180', int(new_val))


class RootLuHv_amplifierDual_actuationAttributeType(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.type'
        self.enum = RootLuHv_amplifierDual_actuationAttributeTypeEnum(self._context)


class RootLuHv_amplifierDual_actuationAttributeZ_modulation_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.z_modulation_enabled'


class RootLuHv_amplifierDual_actuationAttributeMode_targetEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.mode_target.enum'

    @property
    def lv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.mode_target.enum.lv'))

    @lv.setter
    def lv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.mode_target.enum.lv', int(new_val))

    @property
    def hv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.mode_target.enum.hv'))

    @hv.setter
    def hv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.mode_target.enum.hv', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.mode_target.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.mode_target.enum.off', int(new_val))


class RootLuHv_amplifierDual_actuationAttributeMode_target(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.mode_target'
        self.enum = RootLuHv_amplifierDual_actuationAttributeMode_targetEnum(self._context)


class RootLuHv_amplifierDual_actuationAttributeSelected_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.selected_input.enum'

    @property
    def bnc(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.selected_input.enum.bnc'))

    @bnc.setter
    def bnc(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.selected_input.enum.bnc', int(new_val))

    @property
    def not_selectable(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.selected_input.enum.not_selectable'))

    @not_selectable.setter
    def not_selectable(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.selected_input.enum.not_selectable', int(new_val))

    @property
    def dvi(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.dual_actuation.attribute.selected_input.enum.dvi'))

    @dvi.setter
    def dvi(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.dual_actuation.attribute.selected_input.enum.dvi', int(new_val))


class RootLuHv_amplifierDual_actuationAttributeSelected_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.selected_input'
        self.enum = RootLuHv_amplifierDual_actuationAttributeSelected_inputEnum(self._context)


class RootLuHv_amplifierDual_actuationAttributeInterlock_open_user(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.interlock_open_user'


class RootLuHv_amplifierDual_actuationAttributePower_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.power_enabled'


class RootLuHv_amplifierDual_actuationAttributeHv_module_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute.hv_module_enabled'


class RootLuHv_amplifierDual_actuationAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation.attribute'
        self.hv_module_enabled = RootLuHv_amplifierDual_actuationAttributeHv_module_enabled(self._context)
        self.power_enabled = RootLuHv_amplifierDual_actuationAttributePower_enabled(self._context)
        self.interlock_open_user = RootLuHv_amplifierDual_actuationAttributeInterlock_open_user(self._context)
        self.selected_input = RootLuHv_amplifierDual_actuationAttributeSelected_input(self._context)
        self.mode_target = RootLuHv_amplifierDual_actuationAttributeMode_target(self._context)
        self.z_modulation_enabled = RootLuHv_amplifierDual_actuationAttributeZ_modulation_enabled(self._context)
        self.type = RootLuHv_amplifierDual_actuationAttributeType(self._context)
        self.temperature = RootLuHv_amplifierDual_actuationAttributeTemperature(self._context)
        self.last_mode_switch_retval = RootLuHv_amplifierDual_actuationAttributeLast_mode_switch_retval(self._context)
        self.mode_current = RootLuHv_amplifierDual_actuationAttributeMode_current(self._context)
        self.interlock_open_hv_cable = RootLuHv_amplifierDual_actuationAttributeInterlock_open_hv_cable(self._context)
        self.output_discharge_delay = RootLuHv_amplifierDual_actuationAttributeOutput_discharge_delay(self._context)
        self.interlock_open_cx_cable = RootLuHv_amplifierDual_actuationAttributeInterlock_open_cx_cable(self._context)


class RootLuHv_amplifierDual_actuation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.dual_actuation'
        self.attribute = RootLuHv_amplifierDual_actuationAttribute(self._context)
        self.trigger = RootLuHv_amplifierDual_actuationTrigger(self._context)


class RootLuHv_amplifier(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier'
        self.dual_actuation = RootLuHv_amplifierDual_actuation(self._context)
        self.scanhead = RootLuHv_amplifierScanhead(self._context)


class RootLuScanInstanceTriggerStart_move_to_start_and_do_frame_quick(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_move_to_start_and_do_frame_quick'


class RootLuScanInstanceTriggerOffset_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.offset_xyz'


class RootLuScanInstanceTriggerDo_set_xy_sensor_data_acquisition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.do_set_xy_sensor_data_acquisition'


class RootLuScanInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.user_abort'


class RootLuScanInstanceTriggerStart_do_frame(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_do_frame'


class RootLuScanInstanceTriggerStart_move_to_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_move_to_start'


class RootLuScanInstanceTriggerStart_move_to_start_and_do_frame(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_move_to_start_and_do_frame'


class RootLuScanInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger'
        self.start_move_to_start_and_do_frame = RootLuScanInstanceTriggerStart_move_to_start_and_do_frame(self._context)
        self.start_move_to_start = RootLuScanInstanceTriggerStart_move_to_start(self._context)
        self.start_do_frame = RootLuScanInstanceTriggerStart_do_frame(self._context)
        self.user_abort = RootLuScanInstanceTriggerUser_abort(self._context)
        self.do_set_xy_sensor_data_acquisition = RootLuScanInstanceTriggerDo_set_xy_sensor_data_acquisition(self._context)
        self.offset_xyz = RootLuScanInstanceTriggerOffset_xyz(self._context)
        self.start_move_to_start_and_do_frame_quick = RootLuScanInstanceTriggerStart_move_to_start_and_do_frame_quick(self._context)


class RootLuScanInstanceAttributeScan_direction_slow_axisEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.scan_direction_slow_axis.enum'

    @property
    def upward(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.upward'))

    @upward.setter
    def upward(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.upward', int(new_val))

    @property
    def downward(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.downward'))

    @downward.setter
    def downward(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.downward', int(new_val))


class RootLuScanInstanceAttributeScan_direction_slow_axis(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.scan_direction_slow_axis'
        self.enum = RootLuScanInstanceAttributeScan_direction_slow_axisEnum(self._context)


class RootLuScanInstanceAttributeSlow_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_range'


class RootLuScanInstanceAttributeBackward_fast_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.backward_fast_points'


class RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_dynamic_amplitude'


class RootLuScanInstanceAttributeAuto_readjust_probe_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.auto_readjust_probe_enabled'


class RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_dynamic_amplitude_enabled'


class RootLuScanInstanceAttributeZ_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.z_rotation'


class RootLuScanInstanceAttributeY_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.y_rotation'


class RootLuScanInstanceAttributeReadjust_lift_height(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.readjust_lift_height'


class RootLuScanInstanceAttributeContour_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.contour_enabled'


class RootLuScanInstanceAttributeTime_per_line(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.time_per_line'


class RootLuScanInstanceAttributeX_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.x_rotation'


class RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_force_modulation_amplitude'


class RootLuScanInstanceAttributeSlow_increment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_increment'


class RootLuScanInstanceAttributeZ_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.z_move_speed'


class RootLuScanInstanceAttributeSnd_scan_enable_kpfm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_enable_kpfm'


class RootLuScanInstanceAttributeFast_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.fast_points'


class RootLuScanInstanceAttributeFirst_line_repetition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.first_line_repetition'


class RootLuScanInstanceAttributeLinearization_smoothing_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.linearization_smoothing_factor'


class RootLuScanInstanceAttributeLine_scanningEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.line_scanning.enum'

    @property
    def snd_scan_only(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.snd_scan_only'))

    @snd_scan_only.setter
    def snd_scan_only(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.snd_scan_only', int(new_val))

    @property
    def dual_scan(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.dual_scan'))

    @dual_scan.setter
    def dual_scan(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.dual_scan', int(new_val))

    @property
    def standard(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.standard'))

    @standard.setter
    def standard(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.standard', int(new_val))

    @property
    def interlaced(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.interlaced'))

    @interlaced.setter
    def interlaced(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.interlaced', int(new_val))


class RootLuScanInstanceAttributeLine_scanning(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.line_scanning'
        self.enum = RootLuScanInstanceAttributeLine_scanningEnum(self._context)


class RootLuScanInstanceAttributeLine_z_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.line_z_offset'


class RootLuScanInstanceAttributeSlow_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_points'


class RootLuScanInstanceAttributeContour_data_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.contour_data_channel'


class RootLuScanInstanceAttributeX_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.x_offset'


class RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_snd_lock_in_excitation_amplitude'


class RootLuScanInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.xy_move_speed'


class RootLuScanInstanceAttributeZ_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.z_offset'


class RootLuScanInstanceAttributeY_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.y_offset'


class RootLuScanInstanceAttributeLinearization_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.linearization_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.linearization_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.linearization_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.linearization_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.linearization_enable.enum.disabled', int(new_val))


class RootLuScanInstanceAttributeLinearization_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.linearization_enable'
        self.enum = RootLuScanInstanceAttributeLinearization_enableEnum(self._context)


class RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_snd_lock_in_excitation_amplitude_enabled'


class RootLuScanInstanceAttributeSnd_scan_enable_dark_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_enable_dark_mode'


class RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_force_modulation_amplitude_enabled'


class RootLuScanInstanceAttributeMove_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.move_mode.enum'

    @property
    def lifted(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.move_mode.enum.lifted'))

    @lifted.setter
    def lifted(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.move_mode.enum.lifted', int(new_val))

    @property
    def controlled(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.move_mode.enum.controlled'))

    @controlled.setter
    def controlled(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.move_mode.enum.controlled', int(new_val))


class RootLuScanInstanceAttributeMove_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.move_mode'
        self.enum = RootLuScanInstanceAttributeMove_modeEnum(self._context)


class RootLuScanInstanceAttributeGeneratorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.generator.enum'

    @property
    def linear_line(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.linear_line'))

    @linear_line.setter
    def linear_line(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.linear_line', int(new_val))

    @property
    def generic_line(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.generic_line'))

    @generic_line.setter
    def generic_line(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.generic_line', int(new_val))

    @property
    def generic_frame_fast(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.generic_frame_fast'))

    @generic_frame_fast.setter
    def generic_frame_fast(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.generic_frame_fast', int(new_val))

    @property
    def generic_frame(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.generic_frame'))

    @generic_frame.setter
    def generic_frame(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.generic_frame', int(new_val))


class RootLuScanInstanceAttributeGenerator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.generator'
        self.enum = RootLuScanInstanceAttributeGeneratorEnum(self._context)


class RootLuScanInstanceAttributeOverscan_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.overscan_points'


class RootLuScanInstanceAttributeFast_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.fast_range'


class RootLuScanInstanceAttributeSlow_axis_move_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_axis_move_mode.enum'

    @property
    def continuous(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.continuous'))

    @continuous.setter
    def continuous(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.continuous', int(new_val))

    @property
    def stepwise(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.stepwise'))

    @stepwise.setter
    def stepwise(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.stepwise', int(new_val))

    @property
    def serpentine(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.serpentine'))

    @serpentine.setter
    def serpentine(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.serpentine', int(new_val))


class RootLuScanInstanceAttributeSlow_axis_move_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_axis_move_mode'
        self.enum = RootLuScanInstanceAttributeSlow_axis_move_modeEnum(self._context)


class RootLuScanInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute'
        self.slow_axis_move_mode = RootLuScanInstanceAttributeSlow_axis_move_mode(self._context)
        self.fast_range = RootLuScanInstanceAttributeFast_range(self._context)
        self.overscan_points = RootLuScanInstanceAttributeOverscan_points(self._context)
        self.generator = RootLuScanInstanceAttributeGenerator(self._context)
        self.move_mode = RootLuScanInstanceAttributeMove_mode(self._context)
        self.snd_scan_force_modulation_amplitude_enabled = RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude_enabled(self._context)
        self.snd_scan_enable_dark_mode = RootLuScanInstanceAttributeSnd_scan_enable_dark_mode(self._context)
        self.snd_scan_snd_lock_in_excitation_amplitude_enabled = RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude_enabled(self._context)
        self.linearization_enable = RootLuScanInstanceAttributeLinearization_enable(self._context)
        self.y_offset = RootLuScanInstanceAttributeY_offset(self._context)
        self.z_offset = RootLuScanInstanceAttributeZ_offset(self._context)
        self.xy_move_speed = RootLuScanInstanceAttributeXy_move_speed(self._context)
        self.snd_scan_snd_lock_in_excitation_amplitude = RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude(self._context)
        self.x_offset = RootLuScanInstanceAttributeX_offset(self._context)
        self.contour_data_channel = RootLuScanInstanceAttributeContour_data_channel(self._context)
        self.slow_points = RootLuScanInstanceAttributeSlow_points(self._context)
        self.line_z_offset = RootLuScanInstanceAttributeLine_z_offset(self._context)
        self.line_scanning = RootLuScanInstanceAttributeLine_scanning(self._context)
        self.linearization_smoothing_factor = RootLuScanInstanceAttributeLinearization_smoothing_factor(self._context)
        self.first_line_repetition = RootLuScanInstanceAttributeFirst_line_repetition(self._context)
        self.fast_points = RootLuScanInstanceAttributeFast_points(self._context)
        self.snd_scan_enable_kpfm = RootLuScanInstanceAttributeSnd_scan_enable_kpfm(self._context)
        self.z_move_speed = RootLuScanInstanceAttributeZ_move_speed(self._context)
        self.slow_increment = RootLuScanInstanceAttributeSlow_increment(self._context)
        self.snd_scan_force_modulation_amplitude = RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude(self._context)
        self.x_rotation = RootLuScanInstanceAttributeX_rotation(self._context)
        self.time_per_line = RootLuScanInstanceAttributeTime_per_line(self._context)
        self.contour_enabled = RootLuScanInstanceAttributeContour_enabled(self._context)
        self.readjust_lift_height = RootLuScanInstanceAttributeReadjust_lift_height(self._context)
        self.y_rotation = RootLuScanInstanceAttributeY_rotation(self._context)
        self.z_rotation = RootLuScanInstanceAttributeZ_rotation(self._context)
        self.snd_scan_dynamic_amplitude_enabled = RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude_enabled(self._context)
        self.auto_readjust_probe_enabled = RootLuScanInstanceAttributeAuto_readjust_probe_enabled(self._context)
        self.snd_scan_dynamic_amplitude = RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude(self._context)
        self.backward_fast_points = RootLuScanInstanceAttributeBackward_fast_points(self._context)
        self.slow_range = RootLuScanInstanceAttributeSlow_range(self._context)
        self.scan_direction_slow_axis = RootLuScanInstanceAttributeScan_direction_slow_axis(self._context)


class RootLuScanInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance'
        self.attribute = RootLuScanInstanceAttribute(self._context)
        self.trigger = RootLuScanInstanceTrigger(self._context)


class RootLuScan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan'
        self.instance = RootLuScanInstance(self._context)


class RootLuTestInstanceTriggerTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger.test'


class RootLuTestInstanceTriggerForce_all_dac_to_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger.force_all_dac_to_max'


class RootLuTestInstanceTriggerForce_all_dac_to_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger.force_all_dac_to_min'


class RootLuTestInstanceTriggerForce_all_dac_to_zero(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger.force_all_dac_to_zero'


class RootLuTestInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger'
        self.force_all_dac_to_zero = RootLuTestInstanceTriggerForce_all_dac_to_zero(self._context)
        self.force_all_dac_to_min = RootLuTestInstanceTriggerForce_all_dac_to_min(self._context)
        self.force_all_dac_to_max = RootLuTestInstanceTriggerForce_all_dac_to_max(self._context)
        self.test = RootLuTestInstanceTriggerTest(self._context)


class RootLuTestInstanceAttributeTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.attribute.test'


class RootLuTestInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.attribute'
        self.test = RootLuTestInstanceAttributeTest(self._context)


class RootLuTestInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance'
        self.attribute = RootLuTestInstanceAttribute(self._context)
        self.trigger = RootLuTestInstanceTrigger(self._context)


class RootLuTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test'
        self.instance = RootLuTestInstance(self._context)


class RootLuMainboard_relaysInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.trigger'


class RootLuMainboard_relaysInstanceAttributeSet_state_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.attribute.set_state_mask.enum'

    @property
    def hires_in_user4(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user4'))

    @hires_in_user4.setter
    def hires_in_user4(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user4', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.all', int(new_val))

    @property
    def hires_in_user2(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user2'))

    @hires_in_user2.setter
    def hires_in_user2(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user2', int(new_val))

    @property
    def hires_out_user4(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user4'))

    @hires_out_user4.setter
    def hires_out_user4(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user4', int(new_val))

    @property
    def hi_res_in6(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hi_res_in6'))

    @hi_res_in6.setter
    def hi_res_in6(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hi_res_in6', int(new_val))

    @property
    def hires_in_user3(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user3'))

    @hires_in_user3.setter
    def hires_in_user3(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user3', int(new_val))

    @property
    def dvi_pos_out_w(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.dvi_pos_out_w'))

    @dvi_pos_out_w.setter
    def dvi_pos_out_w(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.dvi_pos_out_w', int(new_val))

    @property
    def fast_out_user(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_out_user'))

    @fast_out_user.setter
    def fast_out_user(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_out_user', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.none', int(new_val))

    @property
    def hires_out_user3(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user3'))

    @hires_out_user3.setter
    def hires_out_user3(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user3', int(new_val))

    @property
    def hires_out_user2(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user2'))

    @hires_out_user2.setter
    def hires_out_user2(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user2', int(new_val))

    @property
    def hires_out_user1(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user1'))

    @hires_out_user1.setter
    def hires_out_user1(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user1', int(new_val))

    @property
    def hires_in_user1(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user1'))

    @hires_in_user1.setter
    def hires_in_user1(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user1', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_in_user', int(new_val))


class RootLuMainboard_relaysInstanceAttributeSet_state_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.attribute.set_state_mask'
        self.enum = RootLuMainboard_relaysInstanceAttributeSet_state_maskEnum(self._context)


class RootLuMainboard_relaysInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.attribute'
        self.set_state_mask = RootLuMainboard_relaysInstanceAttributeSet_state_mask(self._context)


class RootLuMainboard_relaysInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance'
        self.attribute = RootLuMainboard_relaysInstanceAttribute(self._context)
        self.trigger = RootLuMainboard_relaysInstanceTrigger(self._context)


class RootLuMainboard_relays(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays'
        self.instance = RootLuMainboard_relaysInstance(self._context)


class RootLuData_acquisitionInstanceTriggerBackground_sampler_stop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.background_sampler_stop'


class RootLuData_acquisitionInstanceTriggerAbort_all(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.abort_all'


class RootLuData_acquisitionInstanceTriggerBackground_sampler_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.background_sampler_start'


class RootLuData_acquisitionInstanceTriggerCapture_trim_data_storage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_trim_data_storage'


class RootLuData_acquisitionInstanceTriggerCapture_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_start'


class RootLuData_acquisitionInstanceTriggerSampler_init_phase_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_init_phase_mode'


class RootLuData_acquisitionInstanceTriggerSampler_prepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_prepare'


class RootLuData_acquisitionInstanceTriggerSampler_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_start'


class RootLuData_acquisitionInstanceTriggerBackground_capture_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.background_capture_start'


class RootLuData_acquisitionInstanceTriggerCapture_set_start_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_set_start_time'


class RootLuData_acquisitionInstanceTriggerSampler_trim_data_storage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_trim_data_storage'


class RootLuData_acquisitionInstanceTriggerCapture_prepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_prepare'


class RootLuData_acquisitionInstanceTriggerSampler_set_start_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_set_start_time'


class RootLuData_acquisitionInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger'
        self.sampler_set_start_time = RootLuData_acquisitionInstanceTriggerSampler_set_start_time(self._context)
        self.capture_prepare = RootLuData_acquisitionInstanceTriggerCapture_prepare(self._context)
        self.sampler_trim_data_storage = RootLuData_acquisitionInstanceTriggerSampler_trim_data_storage(self._context)
        self.capture_set_start_time = RootLuData_acquisitionInstanceTriggerCapture_set_start_time(self._context)
        self.background_capture_start = RootLuData_acquisitionInstanceTriggerBackground_capture_start(self._context)
        self.sampler_start = RootLuData_acquisitionInstanceTriggerSampler_start(self._context)
        self.sampler_prepare = RootLuData_acquisitionInstanceTriggerSampler_prepare(self._context)
        self.sampler_init_phase_mode = RootLuData_acquisitionInstanceTriggerSampler_init_phase_mode(self._context)
        self.capture_start = RootLuData_acquisitionInstanceTriggerCapture_start(self._context)
        self.capture_trim_data_storage = RootLuData_acquisitionInstanceTriggerCapture_trim_data_storage(self._context)
        self.background_sampler_start = RootLuData_acquisitionInstanceTriggerBackground_sampler_start(self._context)
        self.abort_all = RootLuData_acquisitionInstanceTriggerAbort_all(self._context)
        self.background_sampler_stop = RootLuData_acquisitionInstanceTriggerBackground_sampler_stop(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_sampling_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_sampling_rate'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vecEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_datapoints'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeNumber_of_capture_sets(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.number_of_capture_sets'


class RootLuData_acquisitionInstanceAttributeNumber_of_sampler_sets(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.number_of_sampler_sets'


class RootLuData_acquisitionInstanceAttributePhase_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_count'


class RootLuData_acquisitionInstanceAttributeSampler_data_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_data_rate'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum'

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_w_out', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_z_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer1_reference', int(new_val))

    @property
    def in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in2'))

    @in2.setter
    def in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in2', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_deflection', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_user', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vecEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_filter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum'

    @property
    def low_pass_20_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_k_hz'))

    @low_pass_20_k_hz.setter
    def low_pass_20_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_k_hz', int(new_val))

    @property
    def low_pass_5_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_hz'))

    @low_pass_5_hz.setter
    def low_pass_5_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_hz', int(new_val))

    @property
    def low_pass_200_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_200_hz'))

    @low_pass_200_hz.setter
    def low_pass_200_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_200_hz', int(new_val))

    @property
    def low_pass_500_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_500_hz'))

    @low_pass_500_hz.setter
    def low_pass_500_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_500_hz', int(new_val))

    @property
    def low_pass_20_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_hz'))

    @low_pass_20_hz.setter
    def low_pass_20_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_hz', int(new_val))

    @property
    def low_pass_50_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_hz'))

    @low_pass_50_hz.setter
    def low_pass_50_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_hz', int(new_val))

    @property
    def low_pass_100_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_k_hz'))

    @low_pass_100_k_hz.setter
    def low_pass_100_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_k_hz', int(new_val))

    @property
    def low_pass_50_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_k_hz'))

    @low_pass_50_k_hz.setter
    def low_pass_50_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_k_hz', int(new_val))

    @property
    def low_pass_1_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_1_k_hz'))

    @low_pass_1_k_hz.setter
    def low_pass_1_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_1_k_hz', int(new_val))

    @property
    def low_pass_100_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_hz'))

    @low_pass_100_hz.setter
    def low_pass_100_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_hz', int(new_val))

    @property
    def low_pass_10_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_k_hz'))

    @low_pass_10_k_hz.setter
    def low_pass_10_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_k_hz', int(new_val))

    @property
    def low_pass_10_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_hz'))

    @low_pass_10_hz.setter
    def low_pass_10_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_hz', int(new_val))

    @property
    def low_pass_5_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_k_hz'))

    @low_pass_5_k_hz.setter
    def low_pass_5_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_k_hz', int(new_val))

    @property
    def filter_userdefined(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.filter_userdefined'))

    @filter_userdefined.setter
    def filter_userdefined(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.filter_userdefined', int(new_val))

    @property
    def low_pass_2_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_2_k_hz'))

    @low_pass_2_k_hz.setter
    def low_pass_2_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_2_k_hz', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_filter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_mode'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_filter_modeEnum(self._context)


class RootLuData_acquisitionInstanceAttributePhase_sampler_end_datapoint_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_sampler_end_datapoint_vec'


class RootLuData_acquisitionInstanceAttributeSampler_filter_typeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum'

    @property
    def window_rectangular(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_rectangular'))

    @window_rectangular.setter
    def window_rectangular(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_rectangular', int(new_val))

    @property
    def window_hamming(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_hamming'))

    @window_hamming.setter
    def window_hamming(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_hamming', int(new_val))

    @property
    def window_nuttall(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_nuttall'))

    @window_nuttall.setter
    def window_nuttall(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_nuttall', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_filter_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_type'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_filter_typeEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_group_id'


class RootLuData_acquisitionInstanceAttributeSampler_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_datapoints'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_datapoints'


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributePhase_sampler_data_rate_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_sampler_data_rate_vec'


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_filter_cutoff(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_cutoff'


class RootLuData_acquisitionInstanceAttributeSampler_trigger_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum'

    @property
    def internal_continuous_timer(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.internal_continuous_timer'))

    @internal_continuous_timer.setter
    def internal_continuous_timer(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.internal_continuous_timer', int(new_val))

    @property
    def external_trigger(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.external_trigger'))

    @external_trigger.setter
    def external_trigger(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.external_trigger', int(new_val))

    @property
    def internal_timer(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.internal_timer'))

    @internal_timer.setter
    def internal_timer(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.internal_timer', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_trigger_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_trigger_mode'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_trigger_modeEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_channel_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_channel_mask'


class RootLuData_acquisitionInstanceAttributePhase_mode_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_mode_enabled'


class RootLuData_acquisitionInstanceAttributeCapture_fast_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_group_id'


class RootLuData_acquisitionInstanceAttributeSampler_filter_size(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_size'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_channel_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_channel_mask'


class RootLuData_acquisitionInstanceAttributeSampler_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_group_id'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum'

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_w_out', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_z_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer1_reference', int(new_val))

    @property
    def in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in2'))

    @in2.setter
    def in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in2', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_deflection', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_user', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeActive_sampler_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.active_sampler_set'


class RootLuData_acquisitionInstanceAttributeActive_capture_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.active_capture_set'


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributePhase_sampler_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_sampler_group_id'


class RootLuData_acquisitionInstanceAttributeSampler_auto_set_filter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_auto_set_filter_mode'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum'

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_w_out', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ort_excitation', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_z_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer1_reference', int(new_val))

    @property
    def in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in2'))

    @in2.setter
    def in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in2', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_deflection', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_user', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vecEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_channel_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_channel_mask'


class RootLuData_acquisitionInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute'
        self.sampler_channel_mask = RootLuData_acquisitionInstanceAttributeSampler_channel_mask(self._context)
        self.capture_fast_ch_input_vec = RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vec(self._context)
        self.capture_hi_res_ch0_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_input(self._context)
        self.sampler_auto_set_filter_mode = RootLuData_acquisitionInstanceAttributeSampler_auto_set_filter_mode(self._context)
        self.phase_sampler_group_id = RootLuData_acquisitionInstanceAttributePhase_sampler_group_id(self._context)
        self.sampler_hi_res_ch7_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_input(self._context)
        self.active_capture_set = RootLuData_acquisitionInstanceAttributeActive_capture_set(self._context)
        self.active_sampler_set = RootLuData_acquisitionInstanceAttributeActive_sampler_set(self._context)
        self.capture_fast_ch0_input = RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_input(self._context)
        self.capture_hi_res_ch5_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_input(self._context)
        self.sampler_group_id = RootLuData_acquisitionInstanceAttributeSampler_group_id(self._context)
        self.capture_hi_res_channel_mask = RootLuData_acquisitionInstanceAttributeCapture_hi_res_channel_mask(self._context)
        self.sampler_filter_size = RootLuData_acquisitionInstanceAttributeSampler_filter_size(self._context)
        self.capture_fast_group_id = RootLuData_acquisitionInstanceAttributeCapture_fast_group_id(self._context)
        self.phase_mode_enabled = RootLuData_acquisitionInstanceAttributePhase_mode_enabled(self._context)
        self.capture_fast_channel_mask = RootLuData_acquisitionInstanceAttributeCapture_fast_channel_mask(self._context)
        self.capture_hi_res_ch3_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_input(self._context)
        self.sampler_trigger_mode = RootLuData_acquisitionInstanceAttributeSampler_trigger_mode(self._context)
        self.sampler_filter_cutoff = RootLuData_acquisitionInstanceAttributeSampler_filter_cutoff(self._context)
        self.sampler_hi_res_ch6_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_input(self._context)
        self.phase_sampler_data_rate_vec = RootLuData_acquisitionInstanceAttributePhase_sampler_data_rate_vec(self._context)
        self.sampler_hi_res_ch5_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_input(self._context)
        self.capture_hi_res_ch2_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_input(self._context)
        self.sampler_hi_res_ch4_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_input(self._context)
        self.sampler_hi_res_ch3_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_input(self._context)
        self.sampler_hi_res_ch2_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_input(self._context)
        self.capture_hi_res_datapoints = RootLuData_acquisitionInstanceAttributeCapture_hi_res_datapoints(self._context)
        self.sampler_datapoints = RootLuData_acquisitionInstanceAttributeSampler_datapoints(self._context)
        self.capture_hi_res_group_id = RootLuData_acquisitionInstanceAttributeCapture_hi_res_group_id(self._context)
        self.sampler_hi_res_ch1_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_input(self._context)
        self.sampler_filter_type = RootLuData_acquisitionInstanceAttributeSampler_filter_type(self._context)
        self.phase_sampler_end_datapoint_vec = RootLuData_acquisitionInstanceAttributePhase_sampler_end_datapoint_vec(self._context)
        self.sampler_filter_mode = RootLuData_acquisitionInstanceAttributeSampler_filter_mode(self._context)
        self.sampler_hi_res_ch_input_vec = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vec(self._context)
        self.capture_fast_ch1_input = RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_input(self._context)
        self.capture_hi_res_ch6_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_input(self._context)
        self.sampler_data_rate = RootLuData_acquisitionInstanceAttributeSampler_data_rate(self._context)
        self.phase_count = RootLuData_acquisitionInstanceAttributePhase_count(self._context)
        self.number_of_sampler_sets = RootLuData_acquisitionInstanceAttributeNumber_of_sampler_sets(self._context)
        self.number_of_capture_sets = RootLuData_acquisitionInstanceAttributeNumber_of_capture_sets(self._context)
        self.sampler_hi_res_ch0_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_input(self._context)
        self.capture_hi_res_ch1_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_input(self._context)
        self.capture_fast_datapoints = RootLuData_acquisitionInstanceAttributeCapture_fast_datapoints(self._context)
        self.capture_hi_res_ch_input_vec = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vec(self._context)
        self.capture_hi_res_ch7_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_input(self._context)
        self.capture_fast_sampling_rate = RootLuData_acquisitionInstanceAttributeCapture_fast_sampling_rate(self._context)
        self.capture_hi_res_ch4_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_input(self._context)


class RootLuData_acquisitionInstanceBusyIs_sampling(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.busy.is_sampling'


class RootLuData_acquisitionInstanceBusyIs_capturing(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.busy.is_capturing'


class RootLuData_acquisitionInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.busy'
        self.is_capturing = RootLuData_acquisitionInstanceBusyIs_capturing(self._context)
        self.is_sampling = RootLuData_acquisitionInstanceBusyIs_sampling(self._context)


class RootLuData_acquisitionInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance'
        self.busy = RootLuData_acquisitionInstanceBusy(self._context)
        self.attribute = RootLuData_acquisitionInstanceAttribute(self._context)
        self.trigger = RootLuData_acquisitionInstanceTrigger(self._context)


class RootLuData_acquisition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition'
        self.instance = RootLuData_acquisitionInstance(self._context)


class RootLuTimestamperInstanceTriggerClear(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.trigger.clear'


class RootLuTimestamperInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.trigger.stop'


class RootLuTimestamperInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.trigger.start'


class RootLuTimestamperInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.trigger'
        self.start = RootLuTimestamperInstanceTriggerStart(self._context)
        self.stop = RootLuTimestamperInstanceTriggerStop(self._context)
        self.clear = RootLuTimestamperInstanceTriggerClear(self._context)


class RootLuTimestamperInstanceAttributeTrigger_eventEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.attribute.trigger_event.enum'

    @property
    def level(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_event.enum.level'))

    @level.setter
    def level(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_event.enum.level', int(new_val))

    @property
    def rising_edge(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_event.enum.rising_edge'))

    @rising_edge.setter
    def rising_edge(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_event.enum.rising_edge', int(new_val))

    @property
    def both_edges(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_event.enum.both_edges'))

    @both_edges.setter
    def both_edges(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_event.enum.both_edges', int(new_val))

    @property
    def inverse(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_event.enum.inverse'))

    @inverse.setter
    def inverse(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_event.enum.inverse', int(new_val))

    @property
    def falling_edge(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_event.enum.falling_edge'))

    @falling_edge.setter
    def falling_edge(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_event.enum.falling_edge', int(new_val))


class RootLuTimestamperInstanceAttributeTrigger_event(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.attribute.trigger_event'
        self.enum = RootLuTimestamperInstanceAttributeTrigger_eventEnum(self._context)


class RootLuTimestamperInstanceAttributeTimestamp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.attribute.timestamp'


class RootLuTimestamperInstanceAttributeTrigger_signalEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.attribute.trigger_signal.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_user4_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.soft_event0_true', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.comparator3_true', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def static_value(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.static_value'))

    @static_value.setter
    def static_value(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.static_value', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.data_capture_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def event_manager_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.event_manager_done'))

    @event_manager_done.setter
    def event_manager_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.event_manager_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ext_event0_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_planez_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.timestamper.instance.attribute.trigger_signal.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.timestamper.instance.attribute.trigger_signal.enum.mem_sig_gen_done', int(new_val))


class RootLuTimestamperInstanceAttributeTrigger_signal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.attribute.trigger_signal'
        self.enum = RootLuTimestamperInstanceAttributeTrigger_signalEnum(self._context)


class RootLuTimestamperInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance.attribute'
        self.trigger_signal = RootLuTimestamperInstanceAttributeTrigger_signal(self._context)
        self.timestamp = RootLuTimestamperInstanceAttributeTimestamp(self._context)
        self.trigger_event = RootLuTimestamperInstanceAttributeTrigger_event(self._context)


class RootLuTimestamperInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper.instance'
        self.attribute = RootLuTimestamperInstanceAttribute(self._context)
        self.trigger = RootLuTimestamperInstanceTrigger(self._context)


class RootLuTimestamper(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timestamper'
        self.instance = RootLuTimestamperInstance(self._context)


class RootLuAuto_alignmentInstanceTriggerStart_align(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_align'


class RootLuAuto_alignmentInstanceTriggerStart_optimization(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_optimization'


class RootLuAuto_alignmentInstanceTriggerAdjust_optics_to_environment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.adjust_optics_to_environment'


class RootLuAuto_alignmentInstanceTriggerStart_search_algorithm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_search_algorithm'


class RootLuAuto_alignmentInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.user_abort'


class RootLuAuto_alignmentInstanceTriggerStart_move_to_optical_center(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_move_to_optical_center'


class RootLuAuto_alignmentInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger'
        self.start_move_to_optical_center = RootLuAuto_alignmentInstanceTriggerStart_move_to_optical_center(self._context)
        self.user_abort = RootLuAuto_alignmentInstanceTriggerUser_abort(self._context)
        self.start_search_algorithm = RootLuAuto_alignmentInstanceTriggerStart_search_algorithm(self._context)
        self.adjust_optics_to_environment = RootLuAuto_alignmentInstanceTriggerAdjust_optics_to_environment(self._context)
        self.start_optimization = RootLuAuto_alignmentInstanceTriggerStart_optimization(self._context)
        self.start_align = RootLuAuto_alignmentInstanceTriggerStart_align(self._context)


class RootLuAuto_alignmentInstanceAttributePte_optical_center_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.pte_optical_center_y'


class RootLuAuto_alignmentInstanceAttributeReadout_optical_center_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.readout_optical_center_x'


class RootLuAuto_alignmentInstanceAttributeSearch_algorithmEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.search_algorithm.enum'

    @property
    def cantilever_between_two_reflecting_edges(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.cantilever_between_two_reflecting_edges'))

    @cantilever_between_two_reflecting_edges.setter
    def cantilever_between_two_reflecting_edges(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.cantilever_between_two_reflecting_edges', int(new_val))

    @property
    def rhombus_spiral(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.rhombus_spiral'))

    @rhombus_spiral.setter
    def rhombus_spiral(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.rhombus_spiral', int(new_val))

    @property
    def bottom_to_top_stepped(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.bottom_to_top_stepped'))

    @bottom_to_top_stepped.setter
    def bottom_to_top_stepped(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.bottom_to_top_stepped', int(new_val))

    @property
    def minimalistic(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.minimalistic'))

    @minimalistic.setter
    def minimalistic(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.minimalistic', int(new_val))

    @property
    def in_place(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.in_place'))

    @in_place.setter
    def in_place(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.in_place', int(new_val))


class RootLuAuto_alignmentInstanceAttributeSearch_algorithm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.search_algorithm'
        self.enum = RootLuAuto_alignmentInstanceAttributeSearch_algorithmEnum(self._context)


class RootLuAuto_alignmentInstanceAttributeLaser_position_shift_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.laser_position_shift_x'


class RootLuAuto_alignmentInstanceAttributeCurrent_optic_componentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.current_optic_component.enum'

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.all', int(new_val))

    @property
    def beam_shifter(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.beam_shifter'))

    @beam_shifter.setter
    def beam_shifter(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.beam_shifter', int(new_val))

    @property
    def readout(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.readout'))

    @readout.setter
    def readout(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.readout', int(new_val))

    @property
    def focus(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.focus'))

    @focus.setter
    def focus(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.focus', int(new_val))

    @property
    def pte(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.pte'))

    @pte.setter
    def pte(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.pte', int(new_val))

    @property
    def detector(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.detector'))

    @detector.setter
    def detector(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.detector', int(new_val))


class RootLuAuto_alignmentInstanceAttributeCurrent_optic_component(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.current_optic_component'
        self.enum = RootLuAuto_alignmentInstanceAttributeCurrent_optic_componentEnum(self._context)


class RootLuAuto_alignmentInstanceAttributeFocus_default_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.focus_default_position'


class RootLuAuto_alignmentInstanceAttributeAlign_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.align_state.enum'

    @property
    def aligned_successfully(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.aligned_successfully'))

    @aligned_successfully.setter
    def aligned_successfully(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.aligned_successfully', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.running', int(new_val))

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.idle', int(new_val))

    @property
    def failed(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.failed'))

    @failed.setter
    def failed(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.failed', int(new_val))


class RootLuAuto_alignmentInstanceAttributeAlign_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.align_state'
        self.enum = RootLuAuto_alignmentInstanceAttributeAlign_stateEnum(self._context)


class RootLuAuto_alignmentInstanceAttributePte_optical_center_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.pte_optical_center_x'


class RootLuAuto_alignmentInstanceAttributeReadout_optical_center_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.readout_optical_center_y'


class RootLuAuto_alignmentInstanceAttributeLaser_position_shift_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.laser_position_shift_y'


class RootLuAuto_alignmentInstanceAttributeComponent_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.component_state.enum'

    @property
    def idle_positioned(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_positioned'))

    @idle_positioned.setter
    def idle_positioned(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_positioned', int(new_val))

    @property
    def optimizing(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.optimizing'))

    @optimizing.setter
    def optimizing(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.optimizing', int(new_val))

    @property
    def idle_not_positioned(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_not_positioned'))

    @idle_not_positioned.setter
    def idle_not_positioned(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_not_positioned', int(new_val))

    @property
    def searching(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.searching'))

    @searching.setter
    def searching(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.searching', int(new_val))

    @property
    def idle_optimized(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_optimized'))

    @idle_optimized.setter
    def idle_optimized(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_optimized', int(new_val))


class RootLuAuto_alignmentInstanceAttributeComponent_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.component_state'
        self.enum = RootLuAuto_alignmentInstanceAttributeComponent_stateEnum(self._context)


class RootLuAuto_alignmentInstanceAttributeBeam_shifter_default_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.beam_shifter_default_position'


class RootLuAuto_alignmentInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute'
        self.beam_shifter_default_position = RootLuAuto_alignmentInstanceAttributeBeam_shifter_default_position(self._context)
        self.component_state = RootLuAuto_alignmentInstanceAttributeComponent_state(self._context)
        self.laser_position_shift_y = RootLuAuto_alignmentInstanceAttributeLaser_position_shift_y(self._context)
        self.readout_optical_center_y = RootLuAuto_alignmentInstanceAttributeReadout_optical_center_y(self._context)
        self.pte_optical_center_x = RootLuAuto_alignmentInstanceAttributePte_optical_center_x(self._context)
        self.align_state = RootLuAuto_alignmentInstanceAttributeAlign_state(self._context)
        self.focus_default_position = RootLuAuto_alignmentInstanceAttributeFocus_default_position(self._context)
        self.current_optic_component = RootLuAuto_alignmentInstanceAttributeCurrent_optic_component(self._context)
        self.laser_position_shift_x = RootLuAuto_alignmentInstanceAttributeLaser_position_shift_x(self._context)
        self.search_algorithm = RootLuAuto_alignmentInstanceAttributeSearch_algorithm(self._context)
        self.readout_optical_center_x = RootLuAuto_alignmentInstanceAttributeReadout_optical_center_x(self._context)
        self.pte_optical_center_y = RootLuAuto_alignmentInstanceAttributePte_optical_center_y(self._context)


class RootLuAuto_alignmentInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance'
        self.attribute = RootLuAuto_alignmentInstanceAttribute(self._context)
        self.trigger = RootLuAuto_alignmentInstanceTrigger(self._context)


class RootLuAuto_alignment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment'
        self.instance = RootLuAuto_alignmentInstance(self._context)


class RootLuMacro_cmdInstanceTriggerMove_to_abs_mo_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_abs_mo_pos'


class RootLuMacro_cmdInstanceTriggerStop_z_feedback(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.stop_z_feedback'


class RootLuMacro_cmdInstanceTriggerMove_to_stop_value_mo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_stop_value_mo'


class RootLuMacro_cmdInstanceTriggerMove_to_abs_xy_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_abs_xy_pos'


class RootLuMacro_cmdInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.user_abort'


class RootLuMacro_cmdInstanceTriggerUser_event(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.user_event'


class RootLuMacro_cmdInstanceTriggerMake_pause(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.make_pause'


class RootLuMacro_cmdInstanceTriggerWrite_i2_c_data(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.write_i2_c_data'


class RootLuMacro_cmdInstanceTriggerActivate_z_feedback(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.activate_z_feedback'


class RootLuMacro_cmdInstanceTriggerAuto_recalibrate_probe(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.auto_recalibrate_probe'


class RootLuMacro_cmdInstanceTriggerMove_to_rel_mo_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_rel_mo_pos'


class RootLuMacro_cmdInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger'
        self.move_to_rel_mo_pos = RootLuMacro_cmdInstanceTriggerMove_to_rel_mo_pos(self._context)
        self.auto_recalibrate_probe = RootLuMacro_cmdInstanceTriggerAuto_recalibrate_probe(self._context)
        self.activate_z_feedback = RootLuMacro_cmdInstanceTriggerActivate_z_feedback(self._context)
        self.write_i2_c_data = RootLuMacro_cmdInstanceTriggerWrite_i2_c_data(self._context)
        self.make_pause = RootLuMacro_cmdInstanceTriggerMake_pause(self._context)
        self.user_event = RootLuMacro_cmdInstanceTriggerUser_event(self._context)
        self.user_abort = RootLuMacro_cmdInstanceTriggerUser_abort(self._context)
        self.move_to_abs_xy_pos = RootLuMacro_cmdInstanceTriggerMove_to_abs_xy_pos(self._context)
        self.move_to_stop_value_mo = RootLuMacro_cmdInstanceTriggerMove_to_stop_value_mo(self._context)
        self.stop_z_feedback = RootLuMacro_cmdInstanceTriggerStop_z_feedback(self._context)
        self.move_to_abs_mo_pos = RootLuMacro_cmdInstanceTriggerMove_to_abs_mo_pos(self._context)


class RootLuMacro_cmdInstanceAttributeModulation_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.modulation_output.enum'

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.modulation_output.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.modulation_output.enum.position_z', int(new_val))

    @property
    def external_z(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.modulation_output.enum.external_z'))

    @external_z.setter
    def external_z(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.modulation_output.enum.external_z', int(new_val))

    @property
    def tip_voltage(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.modulation_output.enum.tip_voltage'))

    @tip_voltage.setter
    def tip_voltage(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.modulation_output.enum.tip_voltage', int(new_val))


class RootLuMacro_cmdInstanceAttributeModulation_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.modulation_output'
        self.enum = RootLuMacro_cmdInstanceAttributeModulation_outputEnum(self._context)


class RootLuMacro_cmdInstanceAttributeEnable_daq(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.enable_daq'


class RootLuMacro_cmdInstanceAttributeI2_c_address(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_address'


class RootLuMacro_cmdInstanceAttributeMo_move_stop_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum'

    @property
    def is_less_than(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_less_than'))

    @is_less_than.setter
    def is_less_than(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_less_than', int(new_val))

    @property
    def is_greater_than(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_greater_than'))

    @is_greater_than.setter
    def is_greater_than(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_greater_than', int(new_val))


class RootLuMacro_cmdInstanceAttributeMo_move_stop_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_mode'
        self.enum = RootLuMacro_cmdInstanceAttributeMo_move_stop_modeEnum(self._context)


class RootLuMacro_cmdInstanceAttributeSystem_abort_event_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.system_abort_event_mask'


class RootLuMacro_cmdInstanceAttributeI2_c_busEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_bus.enum'

    @property
    def aux(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.aux'))

    @aux.setter
    def aux(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.aux', int(new_val))

    @property
    def digital_io(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.digital_io'))

    @digital_io.setter
    def digital_io(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.digital_io', int(new_val))


class RootLuMacro_cmdInstanceAttributeI2_c_bus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_bus'
        self.enum = RootLuMacro_cmdInstanceAttributeI2_c_busEnum(self._context)


class RootLuMacro_cmdInstanceAttributeRelative_pos_mo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.relative_pos_mo'


class RootLuMacro_cmdInstanceAttributeI2_c_data(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_data'


class RootLuMacro_cmdInstanceAttributeActive_sampler_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.active_sampler_set'


class RootLuMacro_cmdInstanceAttributeI2_c_register(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_register'


class RootLuMacro_cmdInstanceAttributeAbsolute_y_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.absolute_y_pos'


class RootLuMacro_cmdInstanceAttributeTarget_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.target_output_channel'


class RootLuMacro_cmdInstanceAttributeUser_event_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.user_event_id'


class RootLuMacro_cmdInstanceAttributePause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.pause_time'


class RootLuMacro_cmdInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.xy_move_speed'


class RootLuMacro_cmdInstanceAttributeMo_move_stop_valueEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum'

    @property
    def z_on(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_on'))

    @z_on.setter
    def z_on(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_on', int(new_val))

    @property
    def z_off(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_off'))

    @z_off.setter
    def z_off(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_off', int(new_val))


class RootLuMacro_cmdInstanceAttributeMo_move_stop_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_value'
        self.enum = RootLuMacro_cmdInstanceAttributeMo_move_stop_valueEnum(self._context)


class RootLuMacro_cmdInstanceAttributeTarget_z_ctrl_output_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.target_z_ctrl_output_mode'


class RootLuMacro_cmdInstanceAttributeAbsolute_x_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.absolute_x_pos'


class RootLuMacro_cmdInstanceAttributeMo_move_stop_feedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_feedback_mode'


class RootLuMacro_cmdInstanceAttributeAbsolute_pos_mo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.absolute_pos_mo'


class RootLuMacro_cmdInstanceAttributeMo_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_speed'


class RootLuMacro_cmdInstanceAttributeEnable_daq_sync_end(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.enable_daq_sync_end'


class RootLuMacro_cmdInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute'
        self.enable_daq_sync_end = RootLuMacro_cmdInstanceAttributeEnable_daq_sync_end(self._context)
        self.mo_move_speed = RootLuMacro_cmdInstanceAttributeMo_move_speed(self._context)
        self.absolute_pos_mo = RootLuMacro_cmdInstanceAttributeAbsolute_pos_mo(self._context)
        self.mo_move_stop_feedback_mode = RootLuMacro_cmdInstanceAttributeMo_move_stop_feedback_mode(self._context)
        self.absolute_x_pos = RootLuMacro_cmdInstanceAttributeAbsolute_x_pos(self._context)
        self.target_z_ctrl_output_mode = RootLuMacro_cmdInstanceAttributeTarget_z_ctrl_output_mode(self._context)
        self.mo_move_stop_value = RootLuMacro_cmdInstanceAttributeMo_move_stop_value(self._context)
        self.xy_move_speed = RootLuMacro_cmdInstanceAttributeXy_move_speed(self._context)
        self.pause_time = RootLuMacro_cmdInstanceAttributePause_time(self._context)
        self.user_event_id = RootLuMacro_cmdInstanceAttributeUser_event_id(self._context)
        self.target_output_channel = RootLuMacro_cmdInstanceAttributeTarget_output_channel(self._context)
        self.absolute_y_pos = RootLuMacro_cmdInstanceAttributeAbsolute_y_pos(self._context)
        self.i2_c_register = RootLuMacro_cmdInstanceAttributeI2_c_register(self._context)
        self.active_sampler_set = RootLuMacro_cmdInstanceAttributeActive_sampler_set(self._context)
        self.i2_c_data = RootLuMacro_cmdInstanceAttributeI2_c_data(self._context)
        self.relative_pos_mo = RootLuMacro_cmdInstanceAttributeRelative_pos_mo(self._context)
        self.i2_c_bus = RootLuMacro_cmdInstanceAttributeI2_c_bus(self._context)
        self.system_abort_event_mask = RootLuMacro_cmdInstanceAttributeSystem_abort_event_mask(self._context)
        self.mo_move_stop_mode = RootLuMacro_cmdInstanceAttributeMo_move_stop_mode(self._context)
        self.i2_c_address = RootLuMacro_cmdInstanceAttributeI2_c_address(self._context)
        self.enable_daq = RootLuMacro_cmdInstanceAttributeEnable_daq(self._context)
        self.modulation_output = RootLuMacro_cmdInstanceAttributeModulation_output(self._context)


class RootLuMacro_cmdInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance'
        self.attribute = RootLuMacro_cmdInstanceAttribute(self._context)
        self.trigger = RootLuMacro_cmdInstanceTrigger(self._context)


class RootLuMacro_cmd(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd'
        self.instance = RootLuMacro_cmdInstance(self._context)


class RootLuTimerDbg1TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger.stop'


class RootLuTimerDbg1TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger.start'


class RootLuTimerDbg1TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger.abort'


class RootLuTimerDbg1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger'
        self.abort = RootLuTimerDbg1TriggerAbort(self._context)
        self.start = RootLuTimerDbg1TriggerStart(self._context)
        self.stop = RootLuTimerDbg1TriggerStop(self._context)


class RootLuTimerDbg1AttributeCounter_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_max'


class RootLuTimerDbg1AttributeModeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.mode.enum'

    @property
    def event_counter(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.mode.enum.event_counter'))

    @event_counter.setter
    def event_counter(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.mode.enum.event_counter', int(new_val))

    @property
    def delay_timer(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.mode.enum.delay_timer'))

    @delay_timer.setter
    def delay_timer(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.mode.enum.delay_timer', int(new_val))


class RootLuTimerDbg1AttributeMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.mode'
        self.enum = RootLuTimerDbg1AttributeModeEnum(self._context)


class RootLuTimerDbg1AttributeCounter_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_value'


class RootLuTimerDbg1AttributeCurrent_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.current_time'


class RootLuTimerDbg1AttributeDelay_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.delay_time'


class RootLuTimerDbg1AttributeCounter_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_input.enum'

    @property
    def digital_sync1(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync1'))

    @digital_sync1.setter
    def digital_sync1(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync1', int(new_val))

    @property
    def digital_sync2(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync2'))

    @digital_sync2.setter
    def digital_sync2(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync2', int(new_val))


class RootLuTimerDbg1AttributeCounter_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_input'
        self.enum = RootLuTimerDbg1AttributeCounter_inputEnum(self._context)


class RootLuTimerDbg1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute'
        self.counter_input = RootLuTimerDbg1AttributeCounter_input(self._context)
        self.delay_time = RootLuTimerDbg1AttributeDelay_time(self._context)
        self.current_time = RootLuTimerDbg1AttributeCurrent_time(self._context)
        self.counter_value = RootLuTimerDbg1AttributeCounter_value(self._context)
        self.mode = RootLuTimerDbg1AttributeMode(self._context)
        self.counter_max = RootLuTimerDbg1AttributeCounter_max(self._context)


class RootLuTimerDbg1BusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.busy.is_busy'


class RootLuTimerDbg1Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.busy'
        self.is_busy = RootLuTimerDbg1BusyIs_busy(self._context)


class RootLuTimerDbg1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1'
        self.busy = RootLuTimerDbg1Busy(self._context)
        self.attribute = RootLuTimerDbg1Attribute(self._context)
        self.trigger = RootLuTimerDbg1Trigger(self._context)


class RootLuTimerProc0TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger.stop'


class RootLuTimerProc0TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger.start'


class RootLuTimerProc0TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger.abort'


class RootLuTimerProc0Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger'
        self.abort = RootLuTimerProc0TriggerAbort(self._context)
        self.start = RootLuTimerProc0TriggerStart(self._context)
        self.stop = RootLuTimerProc0TriggerStop(self._context)


class RootLuTimerProc0AttributeCounter_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_max'


class RootLuTimerProc0AttributeModeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.mode.enum'

    @property
    def event_counter(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.mode.enum.event_counter'))

    @event_counter.setter
    def event_counter(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.mode.enum.event_counter', int(new_val))

    @property
    def delay_timer(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.mode.enum.delay_timer'))

    @delay_timer.setter
    def delay_timer(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.mode.enum.delay_timer', int(new_val))


class RootLuTimerProc0AttributeMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.mode'
        self.enum = RootLuTimerProc0AttributeModeEnum(self._context)


class RootLuTimerProc0AttributeCounter_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_value'


class RootLuTimerProc0AttributeCurrent_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.current_time'


class RootLuTimerProc0AttributeDelay_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.delay_time'


class RootLuTimerProc0AttributeCounter_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_input.enum'

    @property
    def digital_sync1(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync1'))

    @digital_sync1.setter
    def digital_sync1(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync1', int(new_val))

    @property
    def digital_sync2(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync2'))

    @digital_sync2.setter
    def digital_sync2(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync2', int(new_val))


class RootLuTimerProc0AttributeCounter_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_input'
        self.enum = RootLuTimerProc0AttributeCounter_inputEnum(self._context)


class RootLuTimerProc0Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute'
        self.counter_input = RootLuTimerProc0AttributeCounter_input(self._context)
        self.delay_time = RootLuTimerProc0AttributeDelay_time(self._context)
        self.current_time = RootLuTimerProc0AttributeCurrent_time(self._context)
        self.counter_value = RootLuTimerProc0AttributeCounter_value(self._context)
        self.mode = RootLuTimerProc0AttributeMode(self._context)
        self.counter_max = RootLuTimerProc0AttributeCounter_max(self._context)


class RootLuTimerProc0BusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.busy.is_busy'


class RootLuTimerProc0Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.busy'
        self.is_busy = RootLuTimerProc0BusyIs_busy(self._context)


class RootLuTimerProc0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0'
        self.busy = RootLuTimerProc0Busy(self._context)
        self.attribute = RootLuTimerProc0Attribute(self._context)
        self.trigger = RootLuTimerProc0Trigger(self._context)


class RootLuTimer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer'
        self.proc0 = RootLuTimerProc0(self._context)
        self.dbg1 = RootLuTimerDbg1(self._context)


class RootLuSystem_infraInstanceTriggerDetect_scan_head_lever_change(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.detect_scan_head_lever_change'


class RootLuSystem_infraInstanceTriggerSwitch_clock_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.switch_clock_source'


class RootLuSystem_infraInstanceTriggerDetect_scan_head_arrival_removal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.detect_scan_head_arrival_removal'


class RootLuSystem_infraInstanceTriggerDetect_limit_switch_status_info_change(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.detect_limit_switch_status_info_change'


class RootLuSystem_infraInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger'
        self.detect_limit_switch_status_info_change = RootLuSystem_infraInstanceTriggerDetect_limit_switch_status_info_change(self._context)
        self.detect_scan_head_arrival_removal = RootLuSystem_infraInstanceTriggerDetect_scan_head_arrival_removal(self._context)
        self.switch_clock_source = RootLuSystem_infraInstanceTriggerSwitch_clock_source(self._context)
        self.detect_scan_head_lever_change = RootLuSystem_infraInstanceTriggerDetect_scan_head_lever_change(self._context)


class RootLuSystem_infraInstanceAttributeMain_in2_gainEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_gain.enum'

    @property
    def gain16(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain16'))

    @gain16.setter
    def gain16(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain16', int(new_val))

    @property
    def gain4(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain4'))

    @gain4.setter
    def gain4(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain4', int(new_val))

    @property
    def gain1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain1'))

    @gain1.setter
    def gain1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain1', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in2_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_gain'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in2_gainEnum(self._context)


class RootLuSystem_infraInstanceAttributeDepreciated_0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.depreciated_0'


class RootLuSystem_infraInstanceAttributeHas_scanhead_tilt_detection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.has_scanhead_tilt_detection'


class RootLuSystem_infraInstanceAttributeLaser_power_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.laser_power_current'


class RootLuSystem_infraInstanceAttributeLaser_power_lock(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.laser_power_lock'


class RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum'

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.in_user3', int(new_val))

    @property
    def ana_gnd(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.ana_gnd'))

    @ana_gnd.setter
    def ana_gnd(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.ana_gnd', int(new_val))

    @property
    def tip_current(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.tip_current'))

    @tip_current.setter
    def tip_current(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.tip_current', int(new_val))


class RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input'
        self.enum = RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_inputEnum(self._context)


class RootLuSystem_infraInstanceAttributeDeflection_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.deflection_offset'


class RootLuSystem_infraInstanceAttributeCurrent_video_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_video_source.enum'

    @property
    def side_view(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_video_source.enum.side_view'))

    @side_view.setter
    def side_view(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_video_source.enum.side_view', int(new_val))

    @property
    def top_view(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_video_source.enum.top_view'))

    @top_view.setter
    def top_view(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_video_source.enum.top_view', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_video_source.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_video_source.enum.undefined', int(new_val))


class RootLuSystem_infraInstanceAttributeCurrent_video_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_video_source'
        self.enum = RootLuSystem_infraInstanceAttributeCurrent_video_sourceEnum(self._context)


class RootLuSystem_infraInstanceAttributeExtra_in1_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.extra_in1_input.enum'

    @property
    def ana_gnd(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.extra_in1_input.enum.ana_gnd'))

    @ana_gnd.setter
    def ana_gnd(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.extra_in1_input.enum.ana_gnd', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.extra_in1_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.extra_in1_input.enum.in_user1', int(new_val))


class RootLuSystem_infraInstanceAttributeExtra_in1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.extra_in1_input'
        self.enum = RootLuSystem_infraInstanceAttributeExtra_in1_inputEnum(self._context)


class RootLuSystem_infraInstanceAttributeEnable10_hz_update_sensor_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.enable10_hz_update_sensor_status'


class RootLuSystem_infraInstanceAttributeSensor_light(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.sensor_light'


class RootLuSystem_infraInstanceAttributeScan_head_typeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.scan_head_type.enum'

    @property
    def afsem(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.afsem'))

    @afsem.setter
    def afsem(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.afsem', int(new_val))

    @property
    def e_stm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.e_stm'))

    @e_stm.setter
    def e_stm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.e_stm', int(new_val))

    @property
    def dummy11(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy11'))

    @dummy11.setter
    def dummy11(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy11', int(new_val))

    @property
    def dummy7(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy7'))

    @dummy7.setter
    def dummy7(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy7', int(new_val))

    @property
    def dummy6(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy6'))

    @dummy6.setter
    def dummy6(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy6', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.unknown', int(new_val))

    @property
    def e_afm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.e_afm'))

    @e_afm.setter
    def e_afm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.e_afm', int(new_val))

    @property
    def semafm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.semafm'))

    @semafm.setter
    def semafm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.semafm', int(new_val))

    @property
    def p6(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.p6'))

    @p6.setter
    def p6(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.p6', int(new_val))

    @property
    def p6_mount(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.p6_mount'))

    @p6_mount.setter
    def p6_mount(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.p6_mount', int(new_val))

    @property
    def lens_afm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.lens_afm'))

    @lens_afm.setter
    def lens_afm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.lens_afm', int(new_val))

    @property
    def dummy5(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy5'))

    @dummy5.setter
    def dummy5(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy5', int(new_val))

    @property
    def nanite_afm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.nanite_afm'))

    @nanite_afm.setter
    def nanite_afm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.nanite_afm', int(new_val))

    @property
    def dummy10(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy10'))

    @dummy10.setter
    def dummy10(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy10', int(new_val))

    @property
    def dummy8(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy8'))

    @dummy8.setter
    def dummy8(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy8', int(new_val))

    @property
    def cytomass(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.cytomass'))

    @cytomass.setter
    def cytomass(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.cytomass', int(new_val))

    @property
    def flex_afm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.flex_afm'))

    @flex_afm.setter
    def flex_afm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.flex_afm', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.not_connected', int(new_val))

    @property
    def core_afm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.core_afm'))

    @core_afm.setter
    def core_afm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.core_afm', int(new_val))

    @property
    def dummy4(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy4'))

    @dummy4.setter
    def dummy4(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy4', int(new_val))

    @property
    def dummy3(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy3'))

    @dummy3.setter
    def dummy3(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.dummy3', int(new_val))

    @property
    def arac(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.scan_head_type.enum.arac'))

    @arac.setter
    def arac(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.scan_head_type.enum.arac', int(new_val))


class RootLuSystem_infraInstanceAttributeScan_head_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.scan_head_type'
        self.enum = RootLuSystem_infraInstanceAttributeScan_head_typeEnum(self._context)


class RootLuSystem_infraInstanceAttributeTarget_clock_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.target_clock_source.enum'

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.target_clock_source.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.target_clock_source.enum.internal', int(new_val))

    @property
    def external(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.target_clock_source.enum.external'))

    @external.setter
    def external(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.target_clock_source.enum.external', int(new_val))


class RootLuSystem_infraInstanceAttributeTarget_clock_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.target_clock_source'
        self.enum = RootLuSystem_infraInstanceAttributeTarget_clock_sourceEnum(self._context)


class RootLuSystem_infraInstanceAttributeMain_in1_couplingEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_coupling.enum'

    @property
    def dc_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.dc_coupling'))

    @dc_coupling.setter
    def dc_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.dc_coupling', int(new_val))

    @property
    def ac_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.ac_coupling'))

    @ac_coupling.setter
    def ac_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.ac_coupling', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in1_coupling(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_coupling'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in1_couplingEnum(self._context)


class RootLuSystem_infraInstanceAttributeAfm_sensor_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_status.enum'

    @property
    def ok(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.ok'))

    @ok.setter
    def ok(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.ok', int(new_val))

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.high', int(new_val))

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.low', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.undefined', int(new_val))

    @property
    def fail(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.fail'))

    @fail.setter
    def fail(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.fail', int(new_val))


class RootLuSystem_infraInstanceAttributeAfm_sensor_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_status'
        self.enum = RootLuSystem_infraInstanceAttributeAfm_sensor_statusEnum(self._context)


class RootLuSystem_infraInstanceAttributeTip_signal_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_signal_mode.enum'

    @property
    def current_sense_input(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.current_sense_input'))

    @current_sense_input.setter
    def current_sense_input(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.current_sense_input', int(new_val))

    @property
    def voltage_output(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.voltage_output'))

    @voltage_output.setter
    def voltage_output(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.voltage_output', int(new_val))

    @property
    def external_feedthrough(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.external_feedthrough'))

    @external_feedthrough.setter
    def external_feedthrough(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.external_feedthrough', int(new_val))


class RootLuSystem_infraInstanceAttributeTip_signal_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_signal_mode'
        self.enum = RootLuSystem_infraInstanceAttributeTip_signal_modeEnum(self._context)


class RootLuSystem_infraInstanceAttributeFriction_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.friction_normalized'


class RootLuSystem_infraInstanceAttributeMain_in2_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_input.enum'

    @property
    def user1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.user1'))

    @user1.setter
    def user1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.user1', int(new_val))

    @property
    def test_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_tip_voltage'))

    @test_tip_voltage.setter
    def test_tip_voltage(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_tip_voltage', int(new_val))

    @property
    def user3(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.user3'))

    @user3.setter
    def user3(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.user3', int(new_val))

    @property
    def tip_current(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.tip_current'))

    @tip_current.setter
    def tip_current(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.tip_current', int(new_val))

    @property
    def test_ana_gnd(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ana_gnd'))

    @test_ana_gnd.setter
    def test_ana_gnd(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ana_gnd', int(new_val))

    @property
    def deflection(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.deflection'))

    @deflection.setter
    def deflection(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.deflection', int(new_val))

    @property
    def user2(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.user2'))

    @user2.setter
    def user2(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.user2', int(new_val))

    @property
    def lateral(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.lateral'))

    @lateral.setter
    def lateral(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.lateral', int(new_val))

    @property
    def test_ref(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ref'))

    @test_ref.setter
    def test_ref(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ref', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in2_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_input'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in2_inputEnum(self._context)


class RootLuSystem_infraInstanceAttributeSensor_value_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.sensor_value_normalized'


class RootLuSystem_infraInstanceAttributeControl_laser_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.control_laser_power'


class RootLuSystem_infraInstanceAttributeMain_in1_gainEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_gain.enum'

    @property
    def gain16(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain16'))

    @gain16.setter
    def gain16(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain16', int(new_val))

    @property
    def gain4(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain4'))

    @gain4.setter
    def gain4(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain4', int(new_val))

    @property
    def gain1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain1'))

    @gain1.setter
    def gain1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain1', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in1_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_gain'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in1_gainEnum(self._context)


class RootLuSystem_infraInstanceAttributeHas_video_source_detection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.has_video_source_detection'


class RootLuSystem_infraInstanceAttributeApproach_motor_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_mode.enum'

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.undefined', int(new_val))

    @property
    def limit_switches(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.limit_switches'))

    @limit_switches.setter
    def limit_switches(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.limit_switches', int(new_val))

    @property
    def position_sensor(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.position_sensor'))

    @position_sensor.setter
    def position_sensor(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.position_sensor', int(new_val))


class RootLuSystem_infraInstanceAttributeApproach_motor_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_mode'
        self.enum = RootLuSystem_infraInstanceAttributeApproach_motor_modeEnum(self._context)


class RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_positionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum'

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.undefined', int(new_val))

    @property
    def open_pos(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.open_pos'))

    @open_pos.setter
    def open_pos(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.open_pos', int(new_val))

    @property
    def working_pos(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.working_pos'))

    @working_pos.setter
    def working_pos(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.working_pos', int(new_val))


class RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_scanhead_tilt_position'
        self.enum = RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_positionEnum(self._context)


class RootLuSystem_infraInstanceAttributeDepreciated_1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.depreciated_1'


class RootLuSystem_infraInstanceAttributeFast_out2_output_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum'

    @property
    def monitor2(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor2'))

    @monitor2.setter
    def monitor2(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor2', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.all', int(new_val))

    @property
    def monitor1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor1'))

    @monitor1.setter
    def monitor1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor1', int(new_val))

    @property
    def user_out1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out1'))

    @user_out1.setter
    def user_out1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out1', int(new_val))

    @property
    def user_out_b(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out_b'))

    @user_out_b.setter
    def user_out_b(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out_b', int(new_val))

    @property
    def tip_voltage_or_user_out_a(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.tip_voltage_or_user_out_a'))

    @tip_voltage_or_user_out_a.setter
    def tip_voltage_or_user_out_a(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.tip_voltage_or_user_out_a', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.none', int(new_val))


class RootLuSystem_infraInstanceAttributeFast_out2_output_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.fast_out2_output_mask'
        self.enum = RootLuSystem_infraInstanceAttributeFast_out2_output_maskEnum(self._context)


class RootLuSystem_infraInstanceAttributeInterface_box_typeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.interface_box_type.enum'

    @property
    def icxarac(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxarac'))

    @icxarac.setter
    def icxarac(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxarac', int(new_val))

    @property
    def icxp6(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxp6'))

    @icxp6.setter
    def icxp6(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxp6', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.unknown', int(new_val))

    @property
    def icxflex(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxflex'))

    @icxflex.setter
    def icxflex(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxflex', int(new_val))

    @property
    def i100(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100'))

    @i100.setter
    def i100(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.not_connected', int(new_val))

    @property
    def i100_integrated(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_integrated'))

    @i100_integrated.setter
    def i100_integrated(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_integrated', int(new_val))

    @property
    def icxcytomass(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxcytomass'))

    @icxcytomass.setter
    def icxcytomass(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxcytomass', int(new_val))

    @property
    def i100_afsem(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_afsem'))

    @i100_afsem.setter
    def i100_afsem(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_afsem', int(new_val))


class RootLuSystem_infraInstanceAttributeInterface_box_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.interface_box_type'
        self.enum = RootLuSystem_infraInstanceAttributeInterface_box_typeEnum(self._context)


class RootLuSystem_infraInstanceAttributeAfm_sensor_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_mode.enum'

    @property
    def laser_drive(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_drive'))

    @laser_drive.setter
    def laser_drive(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_drive', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.undefined', int(new_val))

    @property
    def laser_power(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_power'))

    @laser_power.setter
    def laser_power(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_power', int(new_val))

    @property
    def detector_intensity(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.detector_intensity'))

    @detector_intensity.setter
    def detector_intensity(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.detector_intensity', int(new_val))


class RootLuSystem_infraInstanceAttributeAfm_sensor_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_mode'
        self.enum = RootLuSystem_infraInstanceAttributeAfm_sensor_modeEnum(self._context)


class RootLuSystem_infraInstanceAttributeDepreciated_2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.depreciated_2'


class RootLuSystem_infraInstanceAttributeApproach_motor_status_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_status_normalized'


class RootLuSystem_infraInstanceAttributeMain_in2_couplingEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_coupling.enum'

    @property
    def dc_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.dc_coupling'))

    @dc_coupling.setter
    def dc_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.dc_coupling', int(new_val))

    @property
    def ac_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.ac_coupling'))

    @ac_coupling.setter
    def ac_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.ac_coupling', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in2_coupling(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_coupling'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in2_couplingEnum(self._context)


class RootLuSystem_infraInstanceAttributeController_temperature(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.controller_temperature'


class RootLuSystem_infraInstanceAttributeApproach_motor_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_position'


class RootLuSystem_infraInstanceAttributeLaser_power_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.laser_power_absolute'


class RootLuSystem_infraInstanceAttributeApproach_motor_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_status.enum'

    @property
    def dummy_0(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.dummy_0'))

    @dummy_0.setter
    def dummy_0(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.dummy_0', int(new_val))

    @property
    def error(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.error'))

    @error.setter
    def error(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.error', int(new_val))

    @property
    def in_range(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.in_range'))

    @in_range.setter
    def in_range(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.in_range', int(new_val))

    @property
    def min_in(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.min_in'))

    @min_in.setter
    def min_in(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.min_in', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.not_connected', int(new_val))

    @property
    def max_out(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.max_out'))

    @max_out.setter
    def max_out(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.max_out', int(new_val))


class RootLuSystem_infraInstanceAttributeApproach_motor_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_status'
        self.enum = RootLuSystem_infraInstanceAttributeApproach_motor_statusEnum(self._context)


class RootLuSystem_infraInstanceAttributeAfm_sensor_status_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_status_normalized'


class RootLuSystem_infraInstanceAttributeController_typeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.controller_type.enum'

    @property
    def c3000(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.c3000'))

    @c3000.setter
    def c3000(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.c3000', int(new_val))

    @property
    def c3000_i(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.c3000_i'))

    @c3000_i.setter
    def c3000_i(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.c3000_i', int(new_val))

    @property
    def core_afm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.core_afm'))

    @core_afm.setter
    def core_afm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.core_afm', int(new_val))

    @property
    def cx_rev0(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.cx_rev0'))

    @cx_rev0.setter
    def cx_rev0(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.cx_rev0', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.unknown', int(new_val))

    @property
    def cx_rev3(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.cx_rev3'))

    @cx_rev3.setter
    def cx_rev3(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.cx_rev3', int(new_val))


class RootLuSystem_infraInstanceAttributeController_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.controller_type'
        self.enum = RootLuSystem_infraInstanceAttributeController_typeEnum(self._context)


class RootLuSystem_infraInstanceAttributeCurrent_clock_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_clock_source.enum'

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_clock_source.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_clock_source.enum.internal', int(new_val))

    @property
    def external(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_clock_source.enum.external'))

    @external.setter
    def external(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_clock_source.enum.external', int(new_val))


class RootLuSystem_infraInstanceAttributeCurrent_clock_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_clock_source'
        self.enum = RootLuSystem_infraInstanceAttributeCurrent_clock_sourceEnum(self._context)


class RootLuSystem_infraInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute'
        self.current_clock_source = RootLuSystem_infraInstanceAttributeCurrent_clock_source(self._context)
        self.controller_type = RootLuSystem_infraInstanceAttributeController_type(self._context)
        self.afm_sensor_status_normalized = RootLuSystem_infraInstanceAttributeAfm_sensor_status_normalized(self._context)
        self.approach_motor_status = RootLuSystem_infraInstanceAttributeApproach_motor_status(self._context)
        self.laser_power_absolute = RootLuSystem_infraInstanceAttributeLaser_power_absolute(self._context)
        self.approach_motor_position = RootLuSystem_infraInstanceAttributeApproach_motor_position(self._context)
        self.controller_temperature = RootLuSystem_infraInstanceAttributeController_temperature(self._context)
        self.main_in2_coupling = RootLuSystem_infraInstanceAttributeMain_in2_coupling(self._context)
        self.approach_motor_status_normalized = RootLuSystem_infraInstanceAttributeApproach_motor_status_normalized(self._context)
        self.depreciated_2 = RootLuSystem_infraInstanceAttributeDepreciated_2(self._context)
        self.afm_sensor_mode = RootLuSystem_infraInstanceAttributeAfm_sensor_mode(self._context)
        self.interface_box_type = RootLuSystem_infraInstanceAttributeInterface_box_type(self._context)
        self.fast_out2_output_mask = RootLuSystem_infraInstanceAttributeFast_out2_output_mask(self._context)
        self.depreciated_1 = RootLuSystem_infraInstanceAttributeDepreciated_1(self._context)
        self.current_scanhead_tilt_position = RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_position(self._context)
        self.approach_motor_mode = RootLuSystem_infraInstanceAttributeApproach_motor_mode(self._context)
        self.has_video_source_detection = RootLuSystem_infraInstanceAttributeHas_video_source_detection(self._context)
        self.main_in1_gain = RootLuSystem_infraInstanceAttributeMain_in1_gain(self._context)
        self.control_laser_power = RootLuSystem_infraInstanceAttributeControl_laser_power(self._context)
        self.sensor_value_normalized = RootLuSystem_infraInstanceAttributeSensor_value_normalized(self._context)
        self.main_in2_input = RootLuSystem_infraInstanceAttributeMain_in2_input(self._context)
        self.friction_normalized = RootLuSystem_infraInstanceAttributeFriction_normalized(self._context)
        self.tip_signal_mode = RootLuSystem_infraInstanceAttributeTip_signal_mode(self._context)
        self.afm_sensor_status = RootLuSystem_infraInstanceAttributeAfm_sensor_status(self._context)
        self.main_in1_coupling = RootLuSystem_infraInstanceAttributeMain_in1_coupling(self._context)
        self.target_clock_source = RootLuSystem_infraInstanceAttributeTarget_clock_source(self._context)
        self.scan_head_type = RootLuSystem_infraInstanceAttributeScan_head_type(self._context)
        self.sensor_light = RootLuSystem_infraInstanceAttributeSensor_light(self._context)
        self.enable10_hz_update_sensor_status = RootLuSystem_infraInstanceAttributeEnable10_hz_update_sensor_status(self._context)
        self.extra_in1_input = RootLuSystem_infraInstanceAttributeExtra_in1_input(self._context)
        self.current_video_source = RootLuSystem_infraInstanceAttributeCurrent_video_source(self._context)
        self.deflection_offset = RootLuSystem_infraInstanceAttributeDeflection_offset(self._context)
        self.tip_current_or_in_user3_input = RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_input(self._context)
        self.laser_power_lock = RootLuSystem_infraInstanceAttributeLaser_power_lock(self._context)
        self.laser_power_current = RootLuSystem_infraInstanceAttributeLaser_power_current(self._context)
        self.has_scanhead_tilt_detection = RootLuSystem_infraInstanceAttributeHas_scanhead_tilt_detection(self._context)
        self.depreciated_0 = RootLuSystem_infraInstanceAttributeDepreciated_0(self._context)
        self.main_in2_gain = RootLuSystem_infraInstanceAttributeMain_in2_gain(self._context)


class RootLuSystem_infraInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance'
        self.attribute = RootLuSystem_infraInstanceAttribute(self._context)
        self.trigger = RootLuSystem_infraInstanceTrigger(self._context)


class RootLuSystem_infra(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra'
        self.instance = RootLuSystem_infraInstance(self._context)


class RootLuComp_dcInstanceTriggerApply_new_configuration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.apply_new_configuration'


class RootLuComp_dcInstanceTriggerStart_comp_dc_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.start_comp_dc_calibration'


class RootLuComp_dcInstanceTriggerApply_new_nonlinear_configuration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.apply_new_nonlinear_configuration'


class RootLuComp_dcInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.user_abort'


class RootLuComp_dcInstanceTriggerRead_current_configuration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.read_current_configuration'


class RootLuComp_dcInstanceTriggerReset_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.reset_calibration'


class RootLuComp_dcInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger'
        self.reset_calibration = RootLuComp_dcInstanceTriggerReset_calibration(self._context)
        self.read_current_configuration = RootLuComp_dcInstanceTriggerRead_current_configuration(self._context)
        self.user_abort = RootLuComp_dcInstanceTriggerUser_abort(self._context)
        self.apply_new_nonlinear_configuration = RootLuComp_dcInstanceTriggerApply_new_nonlinear_configuration(self._context)
        self.start_comp_dc_calibration = RootLuComp_dcInstanceTriggerStart_comp_dc_calibration(self._context)
        self.apply_new_configuration = RootLuComp_dcInstanceTriggerApply_new_configuration(self._context)


class RootLuComp_dcInstanceAttributeComp_dc_gain_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_gain_y'


class RootLuComp_dcInstanceAttributeComp_dc_gain_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_gain_x'


class RootLuComp_dcInstanceAttributeCoefficient_index(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.coefficient_index'


class RootLuComp_dcInstanceAttributeComp_dc_gain_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_gain_w'


class RootLuComp_dcInstanceAttributeComp_dc_gain_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_gain_z'


class RootLuComp_dcInstanceAttributeComp_dc_source_zEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_source_z.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.comp_dc.instance.attribute.comp_dc_source_z.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.comp_dc.instance.attribute.comp_dc_source_z.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.comp_dc.instance.attribute.comp_dc_source_z.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.comp_dc.instance.attribute.comp_dc_source_z.enum.output', int(new_val))


class RootLuComp_dcInstanceAttributeComp_dc_source_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_source_z'
        self.enum = RootLuComp_dcInstanceAttributeComp_dc_source_zEnum(self._context)


class RootLuComp_dcInstanceAttributeMove_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.move_time'


class RootLuComp_dcInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute'
        self.move_time = RootLuComp_dcInstanceAttributeMove_time(self._context)
        self.comp_dc_source_z = RootLuComp_dcInstanceAttributeComp_dc_source_z(self._context)
        self.comp_dc_gain_z = RootLuComp_dcInstanceAttributeComp_dc_gain_z(self._context)
        self.comp_dc_gain_w = RootLuComp_dcInstanceAttributeComp_dc_gain_w(self._context)
        self.coefficient_index = RootLuComp_dcInstanceAttributeCoefficient_index(self._context)
        self.comp_dc_gain_x = RootLuComp_dcInstanceAttributeComp_dc_gain_x(self._context)
        self.comp_dc_gain_y = RootLuComp_dcInstanceAttributeComp_dc_gain_y(self._context)


class RootLuComp_dcInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance'
        self.attribute = RootLuComp_dcInstanceAttribute(self._context)
        self.trigger = RootLuComp_dcInstanceTrigger(self._context)


class RootLuComp_dc(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc'
        self.instance = RootLuComp_dcInstance(self._context)


class RootLuAnalog_hi_res_inPosition_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.trigger'


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inPosition_zAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.current_input_value'


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_offset'


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inPosition_zAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inPosition_zAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.input_gain'


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_number'


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_gain'


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inPosition_zAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.input_offset'


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inPosition_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inPosition_zAttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inPosition_zAttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inPosition_zAttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inPosition_zAttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inPosition_zAttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inPosition_zAttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inPosition_zAttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inPosition_zAttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inPosition_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z'
        self.attribute = RootLuAnalog_hi_res_inPosition_zAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inPosition_zTrigger(self._context)


class RootLuAnalog_hi_res_inLateralTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.trigger'


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inLateralAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.current_input_value'


class RootLuAnalog_hi_res_inLateralAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inLateralAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_offset'


class RootLuAnalog_hi_res_inLateralAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inLateralAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inLateralAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inLateralAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.input_gain'


class RootLuAnalog_hi_res_inLateralAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_number'


class RootLuAnalog_hi_res_inLateralAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_gain'


class RootLuAnalog_hi_res_inLateralAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inLateralAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inLateralAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inLateralAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.input_offset'


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inLateralAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inLateralAttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inLateralAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inLateralAttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inLateralAttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inLateralAttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inLateralAttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inLateralAttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inLateralAttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inLateralAttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inLateral(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral'
        self.attribute = RootLuAnalog_hi_res_inLateralAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inLateralTrigger(self._context)


class RootLuAnalog_hi_res_inDetector_sumTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.trigger'


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inDetector_sumAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.current_input_value'


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_offset'


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.input_gain'


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_number'


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_gain'


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.input_offset'


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inDetector_sumAttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inDetector_sumAttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inDetector_sumAttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inDetector_sum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum'
        self.attribute = RootLuAnalog_hi_res_inDetector_sumAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inDetector_sumTrigger(self._context)


class RootLuAnalog_hi_res_inDeflectionTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.trigger'


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inDeflectionAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.current_input_value'


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_offset'


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inDeflectionAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inDeflectionAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.input_gain'


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_number'


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_gain'


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inDeflectionAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.input_offset'


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inDeflectionAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inDeflectionAttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inDeflectionAttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inDeflectionAttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inDeflectionAttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inDeflectionAttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inDeflectionAttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inDeflectionAttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inDeflectionAttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inDeflection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection'
        self.attribute = RootLuAnalog_hi_res_inDeflectionAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inDeflectionTrigger(self._context)


class RootLuAnalog_hi_res_inUser2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.trigger'


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser2AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser2AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser2AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser2AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser2AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.input_gain'


class RootLuAnalog_hi_res_inUser2AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_number'


class RootLuAnalog_hi_res_inUser2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inUser2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser2AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.input_offset'


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser2AttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser2AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser2AttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser2AttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser2AttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser2AttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser2AttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser2AttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser2AttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inUser2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2'
        self.attribute = RootLuAnalog_hi_res_inUser2Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inUser2Trigger(self._context)


class RootLuAnalog_hi_res_inTip_currentTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.trigger'


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inTip_currentAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.current_input_value'


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_offset'


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inTip_currentAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inTip_currentAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.input_gain'


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_number'


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_gain'


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inTip_currentAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.input_offset'


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inTip_currentAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inTip_currentAttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inTip_currentAttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inTip_currentAttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inTip_currentAttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inTip_currentAttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inTip_currentAttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inTip_currentAttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inTip_currentAttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inTip_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current'
        self.attribute = RootLuAnalog_hi_res_inTip_currentAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inTip_currentTrigger(self._context)


class RootLuAnalog_hi_res_inUser3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.trigger'


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser3AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser3AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser3AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser3AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser3AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser3AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser3AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.input_gain'


class RootLuAnalog_hi_res_inUser3AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_number'


class RootLuAnalog_hi_res_inUser3AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser3AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inUser3AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser3AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser3AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.input_offset'


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser3AttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser3AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser3AttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser3AttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser3AttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser3AttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser3AttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser3AttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser3AttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inUser3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3'
        self.attribute = RootLuAnalog_hi_res_inUser3Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inUser3Trigger(self._context)


class RootLuAnalog_hi_res_inPosition_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.trigger'


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inPosition_yAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.current_input_value'


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_offset'


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inPosition_yAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inPosition_yAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.input_gain'


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_number'


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_gain'


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inPosition_yAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.input_offset'


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inPosition_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inPosition_yAttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inPosition_yAttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inPosition_yAttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inPosition_yAttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inPosition_yAttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inPosition_yAttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inPosition_yAttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inPosition_yAttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inPosition_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y'
        self.attribute = RootLuAnalog_hi_res_inPosition_yAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inPosition_yTrigger(self._context)


class RootLuAnalog_hi_res_inUser4Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.trigger'


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser4AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser4AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser4AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser4AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser4AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser4AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser4AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.input_gain'


class RootLuAnalog_hi_res_inUser4AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_number'


class RootLuAnalog_hi_res_inUser4AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser4AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inUser4AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser4AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser4AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.input_offset'


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser4Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser4AttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser4AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser4AttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser4AttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser4AttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser4AttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser4AttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser4AttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser4AttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inUser4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4'
        self.attribute = RootLuAnalog_hi_res_inUser4Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inUser4Trigger(self._context)


class RootLuAnalog_hi_res_inPosition_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.trigger'


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inPosition_xAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.current_input_value'


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_offset'


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inPosition_xAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inPosition_xAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.input_gain'


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_number'


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_gain'


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inPosition_xAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.input_offset'


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inPosition_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inPosition_xAttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inPosition_xAttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inPosition_xAttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inPosition_xAttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inPosition_xAttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inPosition_xAttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inPosition_xAttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inPosition_xAttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inPosition_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x'
        self.attribute = RootLuAnalog_hi_res_inPosition_xAttribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inPosition_xTrigger(self._context)


class RootLuAnalog_hi_res_inUser1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.trigger'


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser1AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser1AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser1AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser1AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser1AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser1AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser1AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.input_gain'


class RootLuAnalog_hi_res_inUser1AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_number'


class RootLuAnalog_hi_res_inUser1AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser1AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inUser1AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser1AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser1AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.input_offset'


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser1AttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser1AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser1AttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser1AttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser1AttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser1AttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser1AttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser1AttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser1AttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inUser1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1'
        self.attribute = RootLuAnalog_hi_res_inUser1Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inUser1Trigger(self._context)


class RootLuAnalog_hi_res_inMain2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.trigger'


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inMain2AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.current_input_value'


class RootLuAnalog_hi_res_inMain2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inMain2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_offset'


class RootLuAnalog_hi_res_inMain2AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inMain2AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inMain2AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inMain2AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.input_gain'


class RootLuAnalog_hi_res_inMain2AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_number'


class RootLuAnalog_hi_res_inMain2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_gain'


class RootLuAnalog_hi_res_inMain2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inMain2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inMain2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inMain2AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.input_offset'


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inMain2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inMain2AttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inMain2AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inMain2AttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inMain2AttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inMain2AttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inMain2AttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inMain2AttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inMain2AttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inMain2AttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inMain2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2'
        self.attribute = RootLuAnalog_hi_res_inMain2Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inMain2Trigger(self._context)


class RootLuAnalog_hi_res_inIn6Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.trigger'


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inIn6AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.current_input_value'


class RootLuAnalog_hi_res_inIn6AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inIn6AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_offset'


class RootLuAnalog_hi_res_inIn6AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inIn6AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inIn6AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inIn6AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.input_gain'


class RootLuAnalog_hi_res_inIn6AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_number'


class RootLuAnalog_hi_res_inIn6AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_gain'


class RootLuAnalog_hi_res_inIn6AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_hi_res_inIn6AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inIn6AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inIn6AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.input_offset'


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_z_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_z_source.enum'

    @property
    def input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_z_source.enum.input'))

    @input.setter
    def input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_z_source.enum.input', int(new_val))

    @property
    def output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_z_source.enum.output'))

    @output.setter
    def output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_z_source.enum.output', int(new_val))


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_z_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_z_source'
        self.enum = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_z_sourceEnum(self._context)


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inIn6Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_z_source = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_z_source(self._context)
        self.input_offset = RootLuAnalog_hi_res_inIn6AttributeInput_offset(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inIn6AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inIn6AttributeCalib_gain(self._context)
        self.filter_number = RootLuAnalog_hi_res_inIn6AttributeFilter_number(self._context)
        self.input_gain = RootLuAnalog_hi_res_inIn6AttributeInput_gain(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inIn6AttributeFilter_mode(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inIn6AttributeCalib_offset(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_inIn6AttributeFilter_coeff_vec(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inIn6AttributeCurrent_input_value(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_hi_res_inIn6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6'
        self.attribute = RootLuAnalog_hi_res_inIn6Attribute(self._context)
        self.trigger = RootLuAnalog_hi_res_inIn6Trigger(self._context)


class RootLuAnalog_hi_res_in(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in'
        self.in6 = RootLuAnalog_hi_res_inIn6(self._context)
        self.main2 = RootLuAnalog_hi_res_inMain2(self._context)
        self.user1 = RootLuAnalog_hi_res_inUser1(self._context)
        self.position_x = RootLuAnalog_hi_res_inPosition_x(self._context)
        self.user4 = RootLuAnalog_hi_res_inUser4(self._context)
        self.position_y = RootLuAnalog_hi_res_inPosition_y(self._context)
        self.user3 = RootLuAnalog_hi_res_inUser3(self._context)
        self.tip_current = RootLuAnalog_hi_res_inTip_current(self._context)
        self.user2 = RootLuAnalog_hi_res_inUser2(self._context)
        self.deflection = RootLuAnalog_hi_res_inDeflection(self._context)
        self.detector_sum = RootLuAnalog_hi_res_inDetector_sum(self._context)
        self.lateral = RootLuAnalog_hi_res_inLateral(self._context)
        self.position_z = RootLuAnalog_hi_res_inPosition_z(self._context)


class RootLuDirect_motor_controlInstanceTriggerPosition_zero_axis(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.position_zero_axis'


class RootLuDirect_motor_controlInstanceTriggerCommit_transaction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.commit_transaction'


class RootLuDirect_motor_controlInstanceTriggerReset_transaction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.reset_transaction'


class RootLuDirect_motor_controlInstanceTriggerSearch_reference(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.search_reference'


class RootLuDirect_motor_controlInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.user_abort'


class RootLuDirect_motor_controlInstanceTriggerAdd_transaction_move(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.add_transaction_move'


class RootLuDirect_motor_controlInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger'
        self.add_transaction_move = RootLuDirect_motor_controlInstanceTriggerAdd_transaction_move(self._context)
        self.user_abort = RootLuDirect_motor_controlInstanceTriggerUser_abort(self._context)
        self.search_reference = RootLuDirect_motor_controlInstanceTriggerSearch_reference(self._context)
        self.reset_transaction = RootLuDirect_motor_controlInstanceTriggerReset_transaction(self._context)
        self.commit_transaction = RootLuDirect_motor_controlInstanceTriggerCommit_transaction(self._context)
        self.position_zero_axis = RootLuDirect_motor_controlInstanceTriggerPosition_zero_axis(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_speed_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_speed_factor'


class RootLuDirect_motor_controlInstanceAttributeCurrent_axisEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_axis.enum'

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.all', int(new_val))

    @property
    def y_axis(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.y_axis'))

    @y_axis.setter
    def y_axis(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.y_axis', int(new_val))

    @property
    def approach_2(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_2'))

    @approach_2.setter
    def approach_2(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_2', int(new_val))

    @property
    def approach_0(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_0'))

    @approach_0.setter
    def approach_0(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_0', int(new_val))

    @property
    def photothermal_excitation_spot_horz(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_horz'))

    @photothermal_excitation_spot_horz.setter
    def photothermal_excitation_spot_horz(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_horz', int(new_val))

    @property
    def lens_gimbal(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.lens_gimbal'))

    @lens_gimbal.setter
    def lens_gimbal(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.lens_gimbal', int(new_val))

    @property
    def beam_deflection_spot_horz(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_horz'))

    @beam_deflection_spot_horz.setter
    def beam_deflection_spot_horz(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_horz', int(new_val))

    @property
    def beam_deflection_spot_vert(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_vert'))

    @beam_deflection_spot_vert.setter
    def beam_deflection_spot_vert(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_vert', int(new_val))

    @property
    def approach_1(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_1'))

    @approach_1.setter
    def approach_1(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_1', int(new_val))

    @property
    def photothermal_excitation_spot_vert(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_vert'))

    @photothermal_excitation_spot_vert.setter
    def photothermal_excitation_spot_vert(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_vert', int(new_val))

    @property
    def photodiode_detector_vert(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_vert'))

    @photodiode_detector_vert.setter
    def photodiode_detector_vert(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_vert', int(new_val))

    @property
    def focus_cantilever_light_source(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.focus_cantilever_light_source'))

    @focus_cantilever_light_source.setter
    def focus_cantilever_light_source(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.focus_cantilever_light_source', int(new_val))

    @property
    def photodiode_detector_horz(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_horz'))

    @photodiode_detector_horz.setter
    def photodiode_detector_horz(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_horz', int(new_val))

    @property
    def approach(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach'))

    @approach.setter
    def approach(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach', int(new_val))

    @property
    def x_axis(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.x_axis'))

    @x_axis.setter
    def x_axis(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.x_axis', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeCurrent_axis(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_axis'
        self.enum = RootLuDirect_motor_controlInstanceAttributeCurrent_axisEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_position'


class RootLuDirect_motor_controlInstanceAttributeTransaction_move_destination(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.transaction_move_destination'


class RootLuDirect_motor_controlInstanceAttributeMove_adjust(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.move_adjust'


class RootLuDirect_motor_controlInstanceAttributeAxis_limit_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum'

    @property
    def in_upper_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_upper_limit'))

    @in_upper_limit.setter
    def in_upper_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_upper_limit', int(new_val))

    @property
    def in_lower_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_lower_limit'))

    @in_lower_limit.setter
    def in_lower_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_lower_limit', int(new_val))

    @property
    def in_no_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_no_limit'))

    @in_no_limit.setter
    def in_no_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_no_limit', int(new_val))

    @property
    def in_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_limit'))

    @in_limit.setter
    def in_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_limit', int(new_val))

    @property
    def in_both_limits(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_both_limits'))

    @in_both_limits.setter
    def in_both_limits(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_both_limits', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeAxis_limit_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_limit_status'
        self.enum = RootLuDirect_motor_controlInstanceAttributeAxis_limit_statusEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeTransaction_move_relativeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum'

    @property
    def relative(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.relative'))

    @relative.setter
    def relative(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.relative', int(new_val))

    @property
    def absolute(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.absolute'))

    @absolute.setter
    def absolute(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.absolute', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeTransaction_move_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.transaction_move_relative'
        self.enum = RootLuDirect_motor_controlInstanceAttributeTransaction_move_relativeEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_status.enum'

    @property
    def idle_unreferenced(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_unreferenced'))

    @idle_unreferenced.setter
    def idle_unreferenced(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_unreferenced', int(new_val))

    @property
    def idle_referenced(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_referenced'))

    @idle_referenced.setter
    def idle_referenced(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_referenced', int(new_val))

    @property
    def referencing(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.referencing'))

    @referencing.setter
    def referencing(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.referencing', int(new_val))

    @property
    def moving(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.moving'))

    @moving.setter
    def moving(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.moving', int(new_val))

    @property
    def not_mapped(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.not_mapped'))

    @not_mapped.setter
    def not_mapped(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.not_mapped', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeAxis_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_status'
        self.enum = RootLuDirect_motor_controlInstanceAttributeAxis_statusEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_last_reference_move_distance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_last_reference_move_distance'


class RootLuDirect_motor_controlInstanceAttributeLayout_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.layout_status.enum'

    @property
    def uninitialized(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.layout_status.enum.uninitialized'))

    @uninitialized.setter
    def uninitialized(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.layout_status.enum.uninitialized', int(new_val))

    @property
    def initialized(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.layout_status.enum.initialized'))

    @initialized.setter
    def initialized(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.layout_status.enum.initialized', int(new_val))

    @property
    def not_loaded(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.layout_status.enum.not_loaded'))

    @not_loaded.setter
    def not_loaded(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.layout_status.enum.not_loaded', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeLayout_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.layout_status'
        self.enum = RootLuDirect_motor_controlInstanceAttributeLayout_statusEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_max_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_max_speed'


class RootLuDirect_motor_controlInstanceAttributeCurrent_layoutEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_layout.enum'

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.all', int(new_val))

    @property
    def p6(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6'))

    @p6.setter
    def p6(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6', int(new_val))

    @property
    def core(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.core'))

    @core.setter
    def core(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.core', int(new_val))

    @property
    def dummy2(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy2'))

    @dummy2.setter
    def dummy2(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy2', int(new_val))

    @property
    def sim(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.sim'))

    @sim.setter
    def sim(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.sim', int(new_val))

    @property
    def p6_mount(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6_mount'))

    @p6_mount.setter
    def p6_mount(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6_mount', int(new_val))

    @property
    def dummy4(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy4'))

    @dummy4.setter
    def dummy4(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy4', int(new_val))

    @property
    def dummy3(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy3'))

    @dummy3.setter
    def dummy3(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy3', int(new_val))

    @property
    def arac(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.arac'))

    @arac.setter
    def arac(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.arac', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeCurrent_layout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_layout'
        self.enum = RootLuDirect_motor_controlInstanceAttributeCurrent_layoutEnum(self._context)


class RootLuDirect_motor_controlInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute'
        self.current_layout = RootLuDirect_motor_controlInstanceAttributeCurrent_layout(self._context)
        self.axis_max_speed = RootLuDirect_motor_controlInstanceAttributeAxis_max_speed(self._context)
        self.layout_status = RootLuDirect_motor_controlInstanceAttributeLayout_status(self._context)
        self.axis_last_reference_move_distance = RootLuDirect_motor_controlInstanceAttributeAxis_last_reference_move_distance(self._context)
        self.axis_status = RootLuDirect_motor_controlInstanceAttributeAxis_status(self._context)
        self.transaction_move_relative = RootLuDirect_motor_controlInstanceAttributeTransaction_move_relative(self._context)
        self.axis_limit_status = RootLuDirect_motor_controlInstanceAttributeAxis_limit_status(self._context)
        self.move_adjust = RootLuDirect_motor_controlInstanceAttributeMove_adjust(self._context)
        self.transaction_move_destination = RootLuDirect_motor_controlInstanceAttributeTransaction_move_destination(self._context)
        self.axis_position = RootLuDirect_motor_controlInstanceAttributeAxis_position(self._context)
        self.current_axis = RootLuDirect_motor_controlInstanceAttributeCurrent_axis(self._context)
        self.axis_speed_factor = RootLuDirect_motor_controlInstanceAttributeAxis_speed_factor(self._context)


class RootLuDirect_motor_controlInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance'
        self.attribute = RootLuDirect_motor_controlInstanceAttribute(self._context)
        self.trigger = RootLuDirect_motor_controlInstanceTrigger(self._context)


class RootLuDirect_motor_control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control'
        self.instance = RootLuDirect_motor_controlInstance(self._context)


class RootLuAnalog_fast_inUserTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.trigger'


class RootLuAnalog_fast_inUserAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_fast_inUserAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_gain'


class RootLuAnalog_fast_inUserAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_fast_inUserAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_inUserAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_inUserAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_offset'


class RootLuAnalog_fast_inUserAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.input_offset'


class RootLuAnalog_fast_inUserAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.input_gain'


class RootLuAnalog_fast_inUserAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.current_input_value'


class RootLuAnalog_fast_inUserAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_fast_inUserAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_fast_inUserAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_fast_inUserAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_fast_inUserAttributeCross_coupling_axis_id(self._context)
        self.current_input_value = RootLuAnalog_fast_inUserAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_fast_inUserAttributeInput_gain(self._context)
        self.input_offset = RootLuAnalog_fast_inUserAttributeInput_offset(self._context)
        self.calib_offset = RootLuAnalog_fast_inUserAttributeCalib_offset(self._context)
        self.calib_polarity = RootLuAnalog_fast_inUserAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_fast_inUserAttributeCalib_gain(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_fast_inUserAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_fast_inUser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user'
        self.attribute = RootLuAnalog_fast_inUserAttribute(self._context)
        self.trigger = RootLuAnalog_fast_inUserTrigger(self._context)


class RootLuAnalog_fast_inCh2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.trigger'


class RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_fast_inCh2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_gain'


class RootLuAnalog_fast_inCh2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_fast_inCh2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_inCh2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_inCh2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_offset'


class RootLuAnalog_fast_inCh2AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.input_offset'


class RootLuAnalog_fast_inCh2AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.input_gain'


class RootLuAnalog_fast_inCh2AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.current_input_value'


class RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_fast_inCh2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_id(self._context)
        self.current_input_value = RootLuAnalog_fast_inCh2AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_fast_inCh2AttributeInput_gain(self._context)
        self.input_offset = RootLuAnalog_fast_inCh2AttributeInput_offset(self._context)
        self.calib_offset = RootLuAnalog_fast_inCh2AttributeCalib_offset(self._context)
        self.calib_polarity = RootLuAnalog_fast_inCh2AttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_fast_inCh2AttributeCalib_gain(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_fast_inCh2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2'
        self.attribute = RootLuAnalog_fast_inCh2Attribute(self._context)
        self.trigger = RootLuAnalog_fast_inCh2Trigger(self._context)


class RootLuAnalog_fast_inDeflectionTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.trigger'


class RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_fast_inDeflectionAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_gain'


class RootLuAnalog_fast_inDeflectionAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum'

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.negative', int(new_val))

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.positive', int(new_val))


class RootLuAnalog_fast_inDeflectionAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_inDeflectionAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_inDeflectionAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_offset'


class RootLuAnalog_fast_inDeflectionAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.input_offset'


class RootLuAnalog_fast_inDeflectionAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.input_gain'


class RootLuAnalog_fast_inDeflectionAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.current_input_value'


class RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum'

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_w(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_w'))

    @position_w.setter
    def position_w(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_w', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))


class RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_fast_inDeflectionAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute'
        self.cross_coupling_axis_id = RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_id(self._context)
        self.current_input_value = RootLuAnalog_fast_inDeflectionAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_fast_inDeflectionAttributeInput_gain(self._context)
        self.input_offset = RootLuAnalog_fast_inDeflectionAttributeInput_offset(self._context)
        self.calib_offset = RootLuAnalog_fast_inDeflectionAttributeCalib_offset(self._context)
        self.calib_polarity = RootLuAnalog_fast_inDeflectionAttributeCalib_polarity(self._context)
        self.calib_gain = RootLuAnalog_fast_inDeflectionAttributeCalib_gain(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_coefficient_vec(self._context)


class RootLuAnalog_fast_inDeflection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection'
        self.attribute = RootLuAnalog_fast_inDeflectionAttribute(self._context)
        self.trigger = RootLuAnalog_fast_inDeflectionTrigger(self._context)


class RootLuAnalog_fast_in(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in'
        self.deflection = RootLuAnalog_fast_inDeflection(self._context)
        self.ch2 = RootLuAnalog_fast_inCh2(self._context)
        self.user = RootLuAnalog_fast_inUser(self._context)


class RootLuMemory_signal_genInstanceTriggerEnable_preset_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.enable_preset_value'


class RootLuMemory_signal_genInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.start'


class RootLuMemory_signal_genInstanceTriggerGenerate_noise_data(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.generate_noise_data'


class RootLuMemory_signal_genInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.stop'


class RootLuMemory_signal_genInstanceTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.prepare'


class RootLuMemory_signal_genInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.abort'


class RootLuMemory_signal_genInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger'
        self.abort = RootLuMemory_signal_genInstanceTriggerAbort(self._context)
        self.prepare = RootLuMemory_signal_genInstanceTriggerPrepare(self._context)
        self.stop = RootLuMemory_signal_genInstanceTriggerStop(self._context)
        self.generate_noise_data = RootLuMemory_signal_genInstanceTriggerGenerate_noise_data(self._context)
        self.start = RootLuMemory_signal_genInstanceTriggerStart(self._context)
        self.enable_preset_value = RootLuMemory_signal_genInstanceTriggerEnable_preset_value(self._context)


class RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.first_datapoint_value_vec'


class RootLuMemory_signal_genInstanceAttributeOffset_value_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.offset_value_binary_vec'


class RootLuMemory_signal_genInstanceAttributeUnder_run(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.under_run'


class RootLuMemory_signal_genInstanceAttributeLinear_interpolationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.disabled', int(new_val))


class RootLuMemory_signal_genInstanceAttributeLinear_interpolation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.linear_interpolation'
        self.enum = RootLuMemory_signal_genInstanceAttributeLinear_interpolationEnum(self._context)


class RootLuMemory_signal_genInstanceAttributeEnd_reached(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.end_reached'


class RootLuMemory_signal_genInstanceAttributeOffset_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.offset_value_vec'


class RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.last_datapoint_value_vec'


class RootLuMemory_signal_genInstanceAttributeSweep_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.sweep_time'


class RootLuMemory_signal_genInstanceAttributeOutput_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.output_binary_vec'


class RootLuMemory_signal_genInstanceAttributeJoinEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.join.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.join.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.join.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.join.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.join.enum.disabled', int(new_val))


class RootLuMemory_signal_genInstanceAttributeJoin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.join'
        self.enum = RootLuMemory_signal_genInstanceAttributeJoinEnum(self._context)


class RootLuMemory_signal_genInstanceAttributeOutput_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.output_vec'


class RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.first_datapoint_value_binary_vec'


class RootLuMemory_signal_genInstanceAttributeData_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.data_group_id'


class RootLuMemory_signal_genInstanceAttributeNoise_amplitude_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.noise_amplitude_vec'


class RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.last_datapoint_value_binary_vec'


class RootLuMemory_signal_genInstanceAttributeNoise_amplitude_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.noise_amplitude_binary_vec'


class RootLuMemory_signal_genInstanceAttributeCurrent_datapoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.current_datapoint'


class RootLuMemory_signal_genInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute'
        self.current_datapoint = RootLuMemory_signal_genInstanceAttributeCurrent_datapoint(self._context)
        self.noise_amplitude_binary_vec = RootLuMemory_signal_genInstanceAttributeNoise_amplitude_binary_vec(self._context)
        self.last_datapoint_value_binary_vec = RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_binary_vec(self._context)
        self.noise_amplitude_vec = RootLuMemory_signal_genInstanceAttributeNoise_amplitude_vec(self._context)
        self.data_group_id = RootLuMemory_signal_genInstanceAttributeData_group_id(self._context)
        self.first_datapoint_value_binary_vec = RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_binary_vec(self._context)
        self.output_vec = RootLuMemory_signal_genInstanceAttributeOutput_vec(self._context)
        self.join = RootLuMemory_signal_genInstanceAttributeJoin(self._context)
        self.output_binary_vec = RootLuMemory_signal_genInstanceAttributeOutput_binary_vec(self._context)
        self.sweep_time = RootLuMemory_signal_genInstanceAttributeSweep_time(self._context)
        self.last_datapoint_value_vec = RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_vec(self._context)
        self.offset_value_vec = RootLuMemory_signal_genInstanceAttributeOffset_value_vec(self._context)
        self.end_reached = RootLuMemory_signal_genInstanceAttributeEnd_reached(self._context)
        self.linear_interpolation = RootLuMemory_signal_genInstanceAttributeLinear_interpolation(self._context)
        self.under_run = RootLuMemory_signal_genInstanceAttributeUnder_run(self._context)
        self.offset_value_binary_vec = RootLuMemory_signal_genInstanceAttributeOffset_value_binary_vec(self._context)
        self.first_datapoint_value_vec = RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_vec(self._context)


class RootLuMemory_signal_genInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.busy.is_busy'


class RootLuMemory_signal_genInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.busy'
        self.is_busy = RootLuMemory_signal_genInstanceBusyIs_busy(self._context)


class RootLuMemory_signal_genInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance'
        self.busy = RootLuMemory_signal_genInstanceBusy(self._context)
        self.attribute = RootLuMemory_signal_genInstanceAttribute(self._context)
        self.trigger = RootLuMemory_signal_genInstanceTrigger(self._context)


class RootLuMemory_signal_gen(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen'
        self.instance = RootLuMemory_signal_genInstance(self._context)


class RootLuApproachInstanceTriggerStart_approach_motor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_approach_motor'


class RootLuApproachInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.user_abort'


class RootLuApproachInstanceTriggerWithdraw_step(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.withdraw_step'


class RootLuApproachInstanceTriggerStart_pre_approach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_pre_approach'


class RootLuApproachInstanceTriggerStart_adjust_tip_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_adjust_tip_pos'


class RootLuApproachInstanceTriggerUser_done(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.user_done'


class RootLuApproachInstanceTriggerStart_approach_steps(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_approach_steps'


class RootLuApproachInstanceTriggerStart_approach_afm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_approach_afm'


class RootLuApproachInstanceTriggerStart_approach_fsa(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_approach_fsa'


class RootLuApproachInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger'
        self.start_approach_fsa = RootLuApproachInstanceTriggerStart_approach_fsa(self._context)
        self.start_approach_afm = RootLuApproachInstanceTriggerStart_approach_afm(self._context)
        self.start_approach_steps = RootLuApproachInstanceTriggerStart_approach_steps(self._context)
        self.user_done = RootLuApproachInstanceTriggerUser_done(self._context)
        self.start_adjust_tip_pos = RootLuApproachInstanceTriggerStart_adjust_tip_pos(self._context)
        self.start_pre_approach = RootLuApproachInstanceTriggerStart_pre_approach(self._context)
        self.withdraw_step = RootLuApproachInstanceTriggerWithdraw_step(self._context)
        self.user_abort = RootLuApproachInstanceTriggerUser_abort(self._context)
        self.start_approach_motor = RootLuApproachInstanceTriggerStart_approach_motor(self._context)


class RootLuApproachInstanceAttributeMotor_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.motor_source.enum'

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.motor_source.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.motor_source.enum.internal', int(new_val))

    @property
    def external(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.motor_source.enum.external'))

    @external.setter
    def external(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.motor_source.enum.external', int(new_val))


class RootLuApproachInstanceAttributeMotor_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.motor_source'
        self.enum = RootLuApproachInstanceAttributeMotor_sourceEnum(self._context)


class RootLuApproachInstanceAttributeStepper_directionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.stepper_direction.enum'

    @property
    def forward(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.stepper_direction.enum.forward'))

    @forward.setter
    def forward(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.stepper_direction.enum.forward', int(new_val))

    @property
    def backward(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.stepper_direction.enum.backward'))

    @backward.setter
    def backward(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.stepper_direction.enum.backward', int(new_val))


class RootLuApproachInstanceAttributeStepper_direction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.stepper_direction'
        self.enum = RootLuApproachInstanceAttributeStepper_directionEnum(self._context)


class RootLuApproachInstanceAttributeEnable_pre_approach_xycl_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.enable_pre_approach_xycl_calibration'


class RootLuApproachInstanceAttributeRetract_tip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.retract_tip'


class RootLuApproachInstanceAttributeStep_by_step_fine_step_size_percentage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_fine_step_size_percentage'


class RootLuApproachInstanceAttributeStep_by_step_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_time'


class RootLuApproachInstanceAttributeAfm_approach_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.afm_approach_mode.enum'

    @property
    def step_by_step(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.afm_approach_mode.enum.step_by_step'))

    @step_by_step.setter
    def step_by_step(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.afm_approach_mode.enum.step_by_step', int(new_val))

    @property
    def continuous(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.afm_approach_mode.enum.continuous'))

    @continuous.setter
    def continuous(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.afm_approach_mode.enum.continuous', int(new_val))


class RootLuApproachInstanceAttributeAfm_approach_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.afm_approach_mode'
        self.enum = RootLuApproachInstanceAttributeAfm_approach_modeEnum(self._context)


class RootLuApproachInstanceAttributeStep_by_step_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_mode.enum'

    @property
    def not_controlled(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.step_by_step_mode.enum.not_controlled'))

    @not_controlled.setter
    def not_controlled(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.step_by_step_mode.enum.not_controlled', int(new_val))

    @property
    def tip_position_ignored(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.step_by_step_mode.enum.tip_position_ignored'))

    @tip_position_ignored.setter
    def tip_position_ignored(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.step_by_step_mode.enum.tip_position_ignored', int(new_val))

    @property
    def position_controlled(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.step_by_step_mode.enum.position_controlled'))

    @position_controlled.setter
    def position_controlled(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.step_by_step_mode.enum.position_controlled', int(new_val))


class RootLuApproachInstanceAttributeStep_by_step_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_mode'
        self.enum = RootLuApproachInstanceAttributeStep_by_step_modeEnum(self._context)


class RootLuApproachInstanceAttributeStep_period(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_period'


class RootLuApproachInstanceAttributeStep_by_step_coarse_step_size_percentage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_coarse_step_size_percentage'


class RootLuApproachInstanceAttributeApproach_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_speed'


class RootLuApproachInstanceAttributeApproach_pos_error(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_pos_error'


class RootLuApproachInstanceAttributeCurrent_z_stage_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.current_z_stage_pos'


class RootLuApproachInstanceAttributeApproach_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_status.enum'

    @property
    def timeout(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.timeout'))

    @timeout.setter
    def timeout(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.timeout', int(new_val))

    @property
    def move_to_home_position(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.move_to_home_position'))

    @move_to_home_position.setter
    def move_to_home_position(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.move_to_home_position', int(new_val))

    @property
    def cancel_dialog(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.cancel_dialog'))

    @cancel_dialog.setter
    def cancel_dialog(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.cancel_dialog', int(new_val))

    @property
    def calibration_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.calibration_failed'))

    @calibration_failed.setter
    def calibration_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.calibration_failed', int(new_val))

    @property
    def home_position_reached(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.home_position_reached'))

    @home_position_reached.setter
    def home_position_reached(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.home_position_reached', int(new_val))

    @property
    def limit_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.limit_failed'))

    @limit_failed.setter
    def limit_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.limit_failed', int(new_val))

    @property
    def move_toward(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.move_toward'))

    @move_toward.setter
    def move_toward(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.move_toward', int(new_val))

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.idle', int(new_val))

    @property
    def max_out(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.max_out'))

    @max_out.setter
    def max_out(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.max_out', int(new_val))

    @property
    def approach_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.approach_done'))

    @approach_done.setter
    def approach_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.approach_done', int(new_val))

    @property
    def user_abort(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.user_abort'))

    @user_abort.setter
    def user_abort(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.user_abort', int(new_val))

    @property
    def initializing(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.initializing'))

    @initializing.setter
    def initializing(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.initializing', int(new_val))

    @property
    def approaching(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.approaching'))

    @approaching.setter
    def approaching(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.approaching', int(new_val))

    @property
    def sensor_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.sensor_failed'))

    @sensor_failed.setter
    def sensor_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.sensor_failed', int(new_val))

    @property
    def process_dialog(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.process_dialog'))

    @process_dialog.setter
    def process_dialog(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.process_dialog', int(new_val))

    @property
    def approach_aborted(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.approach_aborted'))

    @approach_aborted.setter
    def approach_aborted(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.approach_aborted', int(new_val))

    @property
    def adjusting_tip_pos(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.adjusting_tip_pos'))

    @adjusting_tip_pos.setter
    def adjusting_tip_pos(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.adjusting_tip_pos', int(new_val))

    @property
    def move_away(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.move_away'))

    @move_away.setter
    def move_away(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.move_away', int(new_val))

    @property
    def init_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.init_done'))

    @init_done.setter
    def init_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.init_done', int(new_val))


class RootLuApproachInstanceAttributeApproach_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_status'
        self.enum = RootLuApproachInstanceAttributeApproach_statusEnum(self._context)


class RootLuApproachInstanceAttributeWithdraw_step_distance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.withdraw_step_distance'


class RootLuApproachInstanceAttributeApproach_steps(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_steps'


class RootLuApproachInstanceAttributeWithdraw_step_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.withdraw_step_speed'


class RootLuApproachInstanceAttributeApproach_motor_status_externalEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_motor_status_external.enum'

    @property
    def dummy_0(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_motor_status_external.enum.dummy_0'))

    @dummy_0.setter
    def dummy_0(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_motor_status_external.enum.dummy_0', int(new_val))

    @property
    def error(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_motor_status_external.enum.error'))

    @error.setter
    def error(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_motor_status_external.enum.error', int(new_val))

    @property
    def in_range(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_motor_status_external.enum.in_range'))

    @in_range.setter
    def in_range(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_motor_status_external.enum.in_range', int(new_val))

    @property
    def min_in(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_motor_status_external.enum.min_in'))

    @min_in.setter
    def min_in(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_motor_status_external.enum.min_in', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_motor_status_external.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_motor_status_external.enum.not_connected', int(new_val))

    @property
    def max_out(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_motor_status_external.enum.max_out'))

    @max_out.setter
    def max_out(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_motor_status_external.enum.max_out', int(new_val))


class RootLuApproachInstanceAttributeApproach_motor_status_external(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_motor_status_external'
        self.enum = RootLuApproachInstanceAttributeApproach_motor_status_externalEnum(self._context)


class RootLuApproachInstanceAttributeStep_by_step_slope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_slope'


class RootLuApproachInstanceAttributeWithdraw_steps(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.withdraw_steps'


class RootLuApproachInstanceAttributeGentle_approach_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.gentle_approach_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.gentle_approach_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.gentle_approach_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.gentle_approach_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.gentle_approach_enable.enum.disabled', int(new_val))


class RootLuApproachInstanceAttributeGentle_approach_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.gentle_approach_enable'
        self.enum = RootLuApproachInstanceAttributeGentle_approach_enableEnum(self._context)


class RootLuApproachInstanceAttributeRelease_tip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.release_tip'


class RootLuApproachInstanceAttributeApproach_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_result.enum'

    @property
    def approach_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.approach_done'))

    @approach_done.setter
    def approach_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.approach_done', int(new_val))

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.no_error', int(new_val))

    @property
    def limit_switch_error(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.limit_switch_error'))

    @limit_switch_error.setter
    def limit_switch_error(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.limit_switch_error', int(new_val))

    @property
    def no_axis(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.no_axis'))

    @no_axis.setter
    def no_axis(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.no_axis', int(new_val))

    @property
    def tip_pos_adjust_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_done'))

    @tip_pos_adjust_done.setter
    def tip_pos_adjust_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_done', int(new_val))

    @property
    def user_abort(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.user_abort'))

    @user_abort.setter
    def user_abort(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.user_abort', int(new_val))

    @property
    def park_position(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.park_position'))

    @park_position.setter
    def park_position(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.park_position', int(new_val))

    @property
    def tip_pos_adjust_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_failed'))

    @tip_pos_adjust_failed.setter
    def tip_pos_adjust_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_failed', int(new_val))

    @property
    def timeout(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.timeout'))

    @timeout.setter
    def timeout(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.timeout', int(new_val))

    @property
    def sensor_error(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.sensor_error'))

    @sensor_error.setter
    def sensor_error(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.sensor_error', int(new_val))

    @property
    def end_of_travel(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.end_of_travel'))

    @end_of_travel.setter
    def end_of_travel(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.end_of_travel', int(new_val))


class RootLuApproachInstanceAttributeApproach_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_result'
        self.enum = RootLuApproachInstanceAttributeApproach_resultEnum(self._context)


class RootLuApproachInstanceAttributeApproach_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_pos'


class RootLuApproachInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute'
        self.approach_pos = RootLuApproachInstanceAttributeApproach_pos(self._context)
        self.approach_result = RootLuApproachInstanceAttributeApproach_result(self._context)
        self.release_tip = RootLuApproachInstanceAttributeRelease_tip(self._context)
        self.gentle_approach_enable = RootLuApproachInstanceAttributeGentle_approach_enable(self._context)
        self.withdraw_steps = RootLuApproachInstanceAttributeWithdraw_steps(self._context)
        self.step_by_step_slope = RootLuApproachInstanceAttributeStep_by_step_slope(self._context)
        self.approach_motor_status_external = RootLuApproachInstanceAttributeApproach_motor_status_external(self._context)
        self.withdraw_step_speed = RootLuApproachInstanceAttributeWithdraw_step_speed(self._context)
        self.approach_steps = RootLuApproachInstanceAttributeApproach_steps(self._context)
        self.withdraw_step_distance = RootLuApproachInstanceAttributeWithdraw_step_distance(self._context)
        self.approach_status = RootLuApproachInstanceAttributeApproach_status(self._context)
        self.current_z_stage_pos = RootLuApproachInstanceAttributeCurrent_z_stage_pos(self._context)
        self.approach_pos_error = RootLuApproachInstanceAttributeApproach_pos_error(self._context)
        self.approach_speed = RootLuApproachInstanceAttributeApproach_speed(self._context)
        self.step_by_step_coarse_step_size_percentage = RootLuApproachInstanceAttributeStep_by_step_coarse_step_size_percentage(self._context)
        self.step_period = RootLuApproachInstanceAttributeStep_period(self._context)
        self.step_by_step_mode = RootLuApproachInstanceAttributeStep_by_step_mode(self._context)
        self.afm_approach_mode = RootLuApproachInstanceAttributeAfm_approach_mode(self._context)
        self.step_by_step_time = RootLuApproachInstanceAttributeStep_by_step_time(self._context)
        self.step_by_step_fine_step_size_percentage = RootLuApproachInstanceAttributeStep_by_step_fine_step_size_percentage(self._context)
        self.retract_tip = RootLuApproachInstanceAttributeRetract_tip(self._context)
        self.enable_pre_approach_xycl_calibration = RootLuApproachInstanceAttributeEnable_pre_approach_xycl_calibration(self._context)
        self.stepper_direction = RootLuApproachInstanceAttributeStepper_direction(self._context)
        self.motor_source = RootLuApproachInstanceAttributeMotor_source(self._context)


class RootLuApproachInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance'
        self.attribute = RootLuApproachInstanceAttribute(self._context)
        self.trigger = RootLuApproachInstanceTrigger(self._context)


class RootLuApproach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach'
        self.instance = RootLuApproachInstance(self._context)


class RootLuFrequency_sweep_genInstanceTriggerStart_set_reference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.start_set_reference_amplitude'


class RootLuFrequency_sweep_genInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.user_abort'


class RootLuFrequency_sweep_genInstanceTriggerStart_set_sensor_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.start_set_sensor_amplitude'


class RootLuFrequency_sweep_genInstanceTriggerStart_frequency_sweep(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.start_frequency_sweep'


class RootLuFrequency_sweep_genInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger'
        self.start_frequency_sweep = RootLuFrequency_sweep_genInstanceTriggerStart_frequency_sweep(self._context)
        self.start_set_sensor_amplitude = RootLuFrequency_sweep_genInstanceTriggerStart_set_sensor_amplitude(self._context)
        self.user_abort = RootLuFrequency_sweep_genInstanceTriggerUser_abort(self._context)
        self.start_set_reference_amplitude = RootLuFrequency_sweep_genInstanceTriggerStart_set_reference_amplitude(self._context)


class RootLuFrequency_sweep_genInstanceAttributeSensor_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.sensor_amplitude'


class RootLuFrequency_sweep_genInstanceAttributeReference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.reference_amplitude'


class RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_noEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum'

    @property
    def inst2(self) -> int:
        return int(self._context.get('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst2'))

    @inst2.setter
    def inst2(self, new_val:int):
        self._context.set('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst2', int(new_val))

    @property
    def inst1(self) -> int:
        return int(self._context.get('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst1'))

    @inst1.setter
    def inst1(self, new_val:int):
        self._context.set('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst1', int(new_val))


class RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_no(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no'
        self.enum = RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_noEnum(self._context)


class RootLuFrequency_sweep_genInstanceAttributeEnd_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.end_frequency'


class RootLuFrequency_sweep_genInstanceAttributeStart_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.start_frequency'


class RootLuFrequency_sweep_genInstanceAttributeData_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.data_group_id'


class RootLuFrequency_sweep_genInstanceAttributeSweep_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.sweep_amplitude'


class RootLuFrequency_sweep_genInstanceAttributeData_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.data_points'


class RootLuFrequency_sweep_genInstanceAttributeStep_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.step_time'


class RootLuFrequency_sweep_genInstanceAttributeSettle_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.settle_time'


class RootLuFrequency_sweep_genInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute'
        self.settle_time = RootLuFrequency_sweep_genInstanceAttributeSettle_time(self._context)
        self.step_time = RootLuFrequency_sweep_genInstanceAttributeStep_time(self._context)
        self.data_points = RootLuFrequency_sweep_genInstanceAttributeData_points(self._context)
        self.sweep_amplitude = RootLuFrequency_sweep_genInstanceAttributeSweep_amplitude(self._context)
        self.data_group_id = RootLuFrequency_sweep_genInstanceAttributeData_group_id(self._context)
        self.start_frequency = RootLuFrequency_sweep_genInstanceAttributeStart_frequency(self._context)
        self.end_frequency = RootLuFrequency_sweep_genInstanceAttributeEnd_frequency(self._context)
        self.lu_sig_analyzer_inst_no = RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_no(self._context)
        self.reference_amplitude = RootLuFrequency_sweep_genInstanceAttributeReference_amplitude(self._context)
        self.sensor_amplitude = RootLuFrequency_sweep_genInstanceAttributeSensor_amplitude(self._context)


class RootLuFrequency_sweep_genInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance'
        self.attribute = RootLuFrequency_sweep_genInstanceAttribute(self._context)
        self.trigger = RootLuFrequency_sweep_genInstanceTrigger(self._context)


class RootLuFrequency_sweep_gen(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen'
        self.instance = RootLuFrequency_sweep_genInstance(self._context)


class RootLuIsostageInstanceTriggerClear_event_counter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.clear_event_counter'


class RootLuIsostageInstanceTriggerUpdate_settings(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.update_settings'


class RootLuIsostageInstanceTriggerSetup_event_counter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.setup_event_counter'


class RootLuIsostageInstanceTriggerTest_connection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.test_connection'


class RootLuIsostageInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger'
        self.test_connection = RootLuIsostageInstanceTriggerTest_connection(self._context)
        self.setup_event_counter = RootLuIsostageInstanceTriggerSetup_event_counter(self._context)
        self.update_settings = RootLuIsostageInstanceTriggerUpdate_settings(self._context)
        self.clear_event_counter = RootLuIsostageInstanceTriggerClear_event_counter(self._context)


class RootLuIsostageInstanceAttributeIsolation_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.isolation_mode.enum'

    @property
    def off_or_defined_by_user_switch(self) -> int:
        return int(self._context.get('root.lu.isostage.instance.attribute.isolation_mode.enum.off_or_defined_by_user_switch'))

    @off_or_defined_by_user_switch.setter
    def off_or_defined_by_user_switch(self, new_val:int):
        self._context.set('root.lu.isostage.instance.attribute.isolation_mode.enum.off_or_defined_by_user_switch', int(new_val))

    @property
    def active(self) -> int:
        return int(self._context.get('root.lu.isostage.instance.attribute.isolation_mode.enum.active'))

    @active.setter
    def active(self, new_val:int):
        self._context.set('root.lu.isostage.instance.attribute.isolation_mode.enum.active', int(new_val))


class RootLuIsostageInstanceAttributeIsolation_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.isolation_mode'
        self.enum = RootLuIsostageInstanceAttributeIsolation_modeEnum(self._context)


class RootLuIsostageInstanceAttributeEvent_counter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.event_counter'


class RootLuIsostageInstanceAttributeIs_connected(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.is_connected'


class RootLuIsostageInstanceAttributeOverload_sensitivity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.overload_sensitivity'


class RootLuIsostageInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute'
        self.overload_sensitivity = RootLuIsostageInstanceAttributeOverload_sensitivity(self._context)
        self.is_connected = RootLuIsostageInstanceAttributeIs_connected(self._context)
        self.event_counter = RootLuIsostageInstanceAttributeEvent_counter(self._context)
        self.isolation_mode = RootLuIsostageInstanceAttributeIsolation_mode(self._context)


class RootLuIsostageInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance'
        self.attribute = RootLuIsostageInstanceAttribute(self._context)
        self.trigger = RootLuIsostageInstanceTrigger(self._context)


class RootLuIsostage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage'
        self.instance = RootLuIsostageInstance(self._context)


class RootLuComparatorComparator2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.trigger'


class RootLuComparatorComparator2AttributeFilter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.filter_enable.enum.disabled', int(new_val))


class RootLuComparatorComparator2AttributeFilter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.filter_enable'
        self.enum = RootLuComparatorComparator2AttributeFilter_enableEnum(self._context)


class RootLuComparatorComparator2AttributeSourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.source.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuComparatorComparator2AttributeSource(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.source'
        self.enum = RootLuComparatorComparator2AttributeSourceEnum(self._context)


class RootLuComparatorComparator2AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.polarity.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_higher_than', int(new_val))


class RootLuComparatorComparator2AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.polarity'
        self.enum = RootLuComparatorComparator2AttributePolarityEnum(self._context)


class RootLuComparatorComparator2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.filter_coeff_vec'


class RootLuComparatorComparator2AttributeLevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.level'


class RootLuComparatorComparator2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute'
        self.level = RootLuComparatorComparator2AttributeLevel(self._context)
        self.filter_coeff_vec = RootLuComparatorComparator2AttributeFilter_coeff_vec(self._context)
        self.polarity = RootLuComparatorComparator2AttributePolarity(self._context)
        self.source = RootLuComparatorComparator2AttributeSource(self._context)
        self.filter_enable = RootLuComparatorComparator2AttributeFilter_enable(self._context)


class RootLuComparatorComparator2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2'
        self.attribute = RootLuComparatorComparator2Attribute(self._context)
        self.trigger = RootLuComparatorComparator2Trigger(self._context)


class RootLuComparatorComparator3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.trigger'


class RootLuComparatorComparator3AttributeFilter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.filter_enable.enum.disabled', int(new_val))


class RootLuComparatorComparator3AttributeFilter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.filter_enable'
        self.enum = RootLuComparatorComparator3AttributeFilter_enableEnum(self._context)


class RootLuComparatorComparator3AttributeSourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.source.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuComparatorComparator3AttributeSource(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.source'
        self.enum = RootLuComparatorComparator3AttributeSourceEnum(self._context)


class RootLuComparatorComparator3AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.polarity.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_higher_than', int(new_val))


class RootLuComparatorComparator3AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.polarity'
        self.enum = RootLuComparatorComparator3AttributePolarityEnum(self._context)


class RootLuComparatorComparator3AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.filter_coeff_vec'


class RootLuComparatorComparator3AttributeLevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.level'


class RootLuComparatorComparator3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute'
        self.level = RootLuComparatorComparator3AttributeLevel(self._context)
        self.filter_coeff_vec = RootLuComparatorComparator3AttributeFilter_coeff_vec(self._context)
        self.polarity = RootLuComparatorComparator3AttributePolarity(self._context)
        self.source = RootLuComparatorComparator3AttributeSource(self._context)
        self.filter_enable = RootLuComparatorComparator3AttributeFilter_enable(self._context)


class RootLuComparatorComparator3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3'
        self.attribute = RootLuComparatorComparator3Attribute(self._context)
        self.trigger = RootLuComparatorComparator3Trigger(self._context)


class RootLuComparatorComparator1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.trigger'


class RootLuComparatorComparator1AttributeFilter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.filter_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.filter_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.filter_enable.enum.disabled', int(new_val))


class RootLuComparatorComparator1AttributeFilter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.filter_enable'
        self.enum = RootLuComparatorComparator1AttributeFilter_enableEnum(self._context)


class RootLuComparatorComparator1AttributeSourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.source.enum'

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.static', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_user4', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_deflection', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def ramp_gen_position_w(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_w'))

    @ramp_gen_position_w.setter
    def ramp_gen_position_w(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_w', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_y', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_x', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_test', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.fast_in_user', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user2_out', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_approach', int(new_val))

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_x_out', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_amplitude', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_y', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_y_out', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_detector_sum', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.fast_in2', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_phase', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_sum', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_baseline', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_position_z', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_amplitude', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_tip_current', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_y', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_phase', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_x', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out8', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user1_out', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_pid_command', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_x', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user4', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user3', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user1', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user2', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_z', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_amplitude_reduction', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_position_x', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_delta_f', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in6', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_lateral', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_nominal', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_position_y', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.gen_test_dynamic', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_excitation', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_reference', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_in', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_error', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_w_out', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_z', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_x', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_x', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.fast_in_deflection', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_delta_f', int(new_val))


class RootLuComparatorComparator1AttributeSource(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.source'
        self.enum = RootLuComparatorComparator1AttributeSourceEnum(self._context)


class RootLuComparatorComparator1AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.polarity.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_higher_than', int(new_val))


class RootLuComparatorComparator1AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.polarity'
        self.enum = RootLuComparatorComparator1AttributePolarityEnum(self._context)


class RootLuComparatorComparator1AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.filter_coeff_vec'


class RootLuComparatorComparator1AttributeLevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.level'


class RootLuComparatorComparator1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute'
        self.level = RootLuComparatorComparator1AttributeLevel(self._context)
        self.filter_coeff_vec = RootLuComparatorComparator1AttributeFilter_coeff_vec(self._context)
        self.polarity = RootLuComparatorComparator1AttributePolarity(self._context)
        self.source = RootLuComparatorComparator1AttributeSource(self._context)
        self.filter_enable = RootLuComparatorComparator1AttributeFilter_enable(self._context)


class RootLuComparatorComparator1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1'
        self.attribute = RootLuComparatorComparator1Attribute(self._context)
        self.trigger = RootLuComparatorComparator1Trigger(self._context)


class RootLuComparator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator'
        self.comparator1 = RootLuComparatorComparator1(self._context)
        self.comparator3 = RootLuComparatorComparator3(self._context)
        self.comparator2 = RootLuComparatorComparator2(self._context)


class RootLuDigi_user_ioInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.trigger'


class RootLuDigi_user_ioInstanceAttributeDigi_out1_event_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_user4_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event0_true', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator3_true', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def static_value(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.static_value'))

    @static_value.setter
    def static_value(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.static_value', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_capture_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def event_manager_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.event_manager_done'))

    @event_manager_done.setter
    def event_manager_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.event_manager_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event0_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_planez_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.mem_sig_gen_done', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_event_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_event_source'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_event_sourceEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.disabled', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_enable'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_enableEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_level.enum'

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.high', int(new_val))

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.low', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_pulseEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum'

    @property
    def t20_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t20_ms'))

    @t20_ms.setter
    def t20_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t20_ms', int(new_val))

    @property
    def t5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_us'))

    @t5_us.setter
    def t5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_us', int(new_val))

    @property
    def t0_5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t0_5_us'))

    @t0_5_us.setter
    def t0_5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t0_5_us', int(new_val))

    @property
    def t50_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t50_us'))

    @t50_us.setter
    def t50_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t50_us', int(new_val))

    @property
    def t5_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_ms'))

    @t5_ms.setter
    def t5_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_ms', int(new_val))

    @property
    def t500_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t500_us'))

    @t500_us.setter
    def t500_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t500_us', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_pulse(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_pulse'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_pulseEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_level.enum'

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.high', int(new_val))

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.low', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_event_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum'

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_user4_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event1_true', int(new_val))

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator1_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_proc0_done', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event0_true', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator3_true', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def static_value(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.static_value'))

    @static_value.setter
    def static_value(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.static_value', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_capture_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def event_manager_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.event_manager_done'))

    @event_manager_done.setter
    def event_manager_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.event_manager_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_sampling_done', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_positionw_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positionw_done'))

    @ramp_gen_positionw_done.setter
    def ramp_gen_positionw_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positionw_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator2_true', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event0_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_planez_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_test_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_approach_done', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event1_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.mem_sig_gen_done', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_event_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_event_source'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_event_sourceEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_pulseEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum'

    @property
    def t20_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t20_ms'))

    @t20_ms.setter
    def t20_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t20_ms', int(new_val))

    @property
    def t5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_us'))

    @t5_us.setter
    def t5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_us', int(new_val))

    @property
    def t0_5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t0_5_us'))

    @t0_5_us.setter
    def t0_5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t0_5_us', int(new_val))

    @property
    def t50_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t50_us'))

    @t50_us.setter
    def t50_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t50_us', int(new_val))

    @property
    def t5_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_ms'))

    @t5_ms.setter
    def t5_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_ms', int(new_val))

    @property
    def t500_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t500_us'))

    @t500_us.setter
    def t500_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t500_us', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_pulse(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_pulse'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_pulseEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum'

    @property
    def event_rising_and_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_and_falling_edge_pulse'))

    @event_rising_and_falling_edge_pulse.setter
    def event_rising_and_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_and_falling_edge_pulse', int(new_val))

    @property
    def event_rising_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_edge_pulse'))

    @event_rising_edge_pulse.setter
    def event_rising_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_edge_pulse', int(new_val))

    @property
    def event_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_level'))

    @event_level.setter
    def event_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_level', int(new_val))

    @property
    def static_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.static_level'))

    @static_level.setter
    def static_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.static_level', int(new_val))

    @property
    def event_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_falling_edge_pulse'))

    @event_falling_edge_pulse.setter
    def event_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_falling_edge_pulse', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_mode'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_modeEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum'

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.disabled', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_enable'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_enableEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum'

    @property
    def event_rising_and_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_and_falling_edge_pulse'))

    @event_rising_and_falling_edge_pulse.setter
    def event_rising_and_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_and_falling_edge_pulse', int(new_val))

    @property
    def event_rising_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_edge_pulse'))

    @event_rising_edge_pulse.setter
    def event_rising_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_edge_pulse', int(new_val))

    @property
    def event_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_level'))

    @event_level.setter
    def event_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_level', int(new_val))

    @property
    def static_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.static_level'))

    @static_level.setter
    def static_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.static_level', int(new_val))

    @property
    def event_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_falling_edge_pulse'))

    @event_falling_edge_pulse.setter
    def event_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_falling_edge_pulse', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_mode'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_modeEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_in2_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in2_level.enum'

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.high', int(new_val))

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.low', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_in2_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in2_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_in2_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_in1_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in1_level.enum'

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.high', int(new_val))

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.low', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_in1_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in1_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_in1_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute'
        self.digi_in1_level = RootLuDigi_user_ioInstanceAttributeDigi_in1_level(self._context)
        self.digi_in2_level = RootLuDigi_user_ioInstanceAttributeDigi_in2_level(self._context)
        self.digi_out1_mode = RootLuDigi_user_ioInstanceAttributeDigi_out1_mode(self._context)
        self.digi_out1_enable = RootLuDigi_user_ioInstanceAttributeDigi_out1_enable(self._context)
        self.digi_out2_mode = RootLuDigi_user_ioInstanceAttributeDigi_out2_mode(self._context)
        self.digi_out2_pulse = RootLuDigi_user_ioInstanceAttributeDigi_out2_pulse(self._context)
        self.digi_out2_event_source = RootLuDigi_user_ioInstanceAttributeDigi_out2_event_source(self._context)
        self.digi_out2_level = RootLuDigi_user_ioInstanceAttributeDigi_out2_level(self._context)
        self.digi_out1_pulse = RootLuDigi_user_ioInstanceAttributeDigi_out1_pulse(self._context)
        self.digi_out1_level = RootLuDigi_user_ioInstanceAttributeDigi_out1_level(self._context)
        self.digi_out2_enable = RootLuDigi_user_ioInstanceAttributeDigi_out2_enable(self._context)
        self.digi_out1_event_source = RootLuDigi_user_ioInstanceAttributeDigi_out1_event_source(self._context)


class RootLuDigi_user_ioInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance'
        self.attribute = RootLuDigi_user_ioInstanceAttribute(self._context)
        self.trigger = RootLuDigi_user_ioInstanceTrigger(self._context)


class RootLuDigi_user_io(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io'
        self.instance = RootLuDigi_user_ioInstance(self._context)


class RootLuCantilever_propertiesInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.trigger'


class RootLuCantilever_propertiesInstanceAttributeQ_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.q_factor'


class RootLuCantilever_propertiesInstanceAttributeShapeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.shape.enum'

    @property
    def triangular(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.shape.enum.triangular'))

    @triangular.setter
    def triangular(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.shape.enum.triangular', int(new_val))

    @property
    def rectangular(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.shape.enum.rectangular'))

    @rectangular.setter
    def rectangular(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.shape.enum.rectangular', int(new_val))


class RootLuCantilever_propertiesInstanceAttributeShape(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.shape'
        self.enum = RootLuCantilever_propertiesInstanceAttributeShapeEnum(self._context)


class RootLuCantilever_propertiesInstanceAttributeSpring_constant(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.spring_constant'


class RootLuCantilever_propertiesInstanceAttributeTip_radius(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.tip_radius'


class RootLuCantilever_propertiesInstanceAttributeDeflection_sensitivity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.deflection_sensitivity'


class RootLuCantilever_propertiesInstanceAttributeLength(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.length'


class RootLuCantilever_propertiesInstanceAttributeTip_half_angle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.tip_half_angle'


class RootLuCantilever_propertiesInstanceAttributeWidth(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.width'


class RootLuCantilever_propertiesInstanceAttributeAlign_strategyEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.align_strategy.enum'

    @property
    def standard(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.standard'))

    @standard.setter
    def standard(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.standard', int(new_val))

    @property
    def search_for_reflecting_edges(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.search_for_reflecting_edges'))

    @search_for_reflecting_edges.setter
    def search_for_reflecting_edges(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.search_for_reflecting_edges', int(new_val))


class RootLuCantilever_propertiesInstanceAttributeAlign_strategy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.align_strategy'
        self.enum = RootLuCantilever_propertiesInstanceAttributeAlign_strategyEnum(self._context)


class RootLuCantilever_propertiesInstanceAttributeResonance_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.resonance_frequency'


class RootLuCantilever_propertiesInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute'
        self.resonance_frequency = RootLuCantilever_propertiesInstanceAttributeResonance_frequency(self._context)
        self.align_strategy = RootLuCantilever_propertiesInstanceAttributeAlign_strategy(self._context)
        self.width = RootLuCantilever_propertiesInstanceAttributeWidth(self._context)
        self.tip_half_angle = RootLuCantilever_propertiesInstanceAttributeTip_half_angle(self._context)
        self.length = RootLuCantilever_propertiesInstanceAttributeLength(self._context)
        self.deflection_sensitivity = RootLuCantilever_propertiesInstanceAttributeDeflection_sensitivity(self._context)
        self.tip_radius = RootLuCantilever_propertiesInstanceAttributeTip_radius(self._context)
        self.spring_constant = RootLuCantilever_propertiesInstanceAttributeSpring_constant(self._context)
        self.shape = RootLuCantilever_propertiesInstanceAttributeShape(self._context)
        self.q_factor = RootLuCantilever_propertiesInstanceAttributeQ_factor(self._context)


class RootLuCantilever_propertiesInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance'
        self.attribute = RootLuCantilever_propertiesInstanceAttribute(self._context)
        self.trigger = RootLuCantilever_propertiesInstanceTrigger(self._context)


class RootLuCantilever_properties(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties'
        self.instance = RootLuCantilever_propertiesInstance(self._context)


class RootLu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu'
        self.cantilever_properties = RootLuCantilever_properties(self._context)
        self.digi_user_io = RootLuDigi_user_io(self._context)
        self.comparator = RootLuComparator(self._context)
        self.isostage = RootLuIsostage(self._context)
        self.frequency_sweep_gen = RootLuFrequency_sweep_gen(self._context)
        self.approach = RootLuApproach(self._context)
        self.memory_signal_gen = RootLuMemory_signal_gen(self._context)
        self.analog_fast_in = RootLuAnalog_fast_in(self._context)
        self.direct_motor_control = RootLuDirect_motor_control(self._context)
        self.analog_hi_res_in = RootLuAnalog_hi_res_in(self._context)
        self.comp_dc = RootLuComp_dc(self._context)
        self.system_infra = RootLuSystem_infra(self._context)
        self.timer = RootLuTimer(self._context)
        self.macro_cmd = RootLuMacro_cmd(self._context)
        self.auto_alignment = RootLuAuto_alignment(self._context)
        self.timestamper = RootLuTimestamper(self._context)
        self.data_acquisition = RootLuData_acquisition(self._context)
        self.mainboard_relays = RootLuMainboard_relays(self._context)
        self.test = RootLuTest(self._context)
        self.scan = RootLuScan(self._context)
        self.hv_amplifier = RootLuHv_amplifier(self._context)
        self.z_controller_ex = RootLuZ_controller_ex(self._context)
        self.analog_fast_out = RootLuAnalog_fast_out(self._context)
        self.thermal_tuning = RootLuThermal_tuning(self._context)
        self.system = RootLuSystem(self._context)
        self.position_control = RootLuPosition_control(self._context)
        self.signal_analyzer = RootLuSignal_analyzer(self._context)
        self.rescan = RootLuRescan(self._context)
        self.spec = RootLuSpec(self._context)
        self.ramp_generator = RootLuRamp_generator(self._context)
        self.scanhead = RootLuScanhead(self._context)
        self.analog_hi_res_out = RootLuAnalog_hi_res_out(self._context)
        self.sensor_control = RootLuSensor_control(self._context)
        self.sequencer = RootLuSequencer(self._context)
        self.oscilloscope = RootLuOscilloscope(self._context)
        self.pid_controller = RootLuPid_controller(self._context)
        self.ort = RootLuOrt(self._context)
        self.event_manager = RootLuEvent_manager(self._context)
        self.litho = RootLuLitho(self._context)

    def load_lu_interface_shared(self, *args, **kwargs) -> Any:
        return self._context.call('root.lu.load_lu_interface_shared', *args, **kwargs)


class RootTestTabel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.test.tabel'


class RootTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.test'
        self.tabel = RootTestTabel(self._context)

    def func(self, *args, **kwargs) -> Any:
        return self._context.call('root.test.func', *args, **kwargs)

    @property
    def num_f(self) -> float:
        return float(self._context.get('root.test.num_f'))

    @num_f.setter
    def num_f(self, new_val:float):
        self._context.set('root.test.num_f', float(new_val))

    @property
    def num_i(self) -> int:
        return int(self._context.get('root.test.num_i'))

    @num_i.setter
    def num_i(self, new_val:int):
        self._context.set('root.test.num_i', int(new_val))

    @property
    def bool(self) -> bool:
        return bool(self._context.get('root.test.bool'))

    @bool.setter
    def bool(self, new_val:bool):
        self._context.set('root.test.bool', bool(new_val))

    @property
    def str(self) -> str:
        return str(self._context.get('root.test.str'))

    @str.setter
    def str(self, new_val:str):
        self._context.set('root.test.str', str(new_val))


class RootSession(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.session'

    @property
    def current_connection(self) -> str:
        return str(self._context.get('root.session.current_connection'))

    @current_connection.setter
    def current_connection(self, new_val:str):
        self._context.set('root.session.current_connection', str(new_val))

    @property
    def name(self) -> str:
        return str(self._context.get('root.session.name'))

    @name.setter
    def name(self, new_val:str):
        self._context.set('root.session.name', str(new_val))

    def select_main(self, *args, **kwargs) -> Any:
        return self._context.call('root.session.select_main', *args, **kwargs)

    def select(self, *args, **kwargs) -> Any:
        return self._context.call('root.session.select', *args, **kwargs)

    def list(self, *args, **kwargs) -> Any:
        return self._context.call('root.session.list', *args, **kwargs)


class RootCoreHw_modules(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.hw_modules'


class RootCoreScript_server(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.script_server'


class RootCoreI2c(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.i2c'


class RootCoreStorage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.storage'

    def open_file(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.storage.open_file', *args, **kwargs)

    def is_file_open(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.storage.is_file_open', *args, **kwargs)


class RootCoreSpm_controller_discovery(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.spm_controller_discovery'


class RootCoreStageSignal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.stage.signal'


class RootCoreStage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.stage'
        self.signal = RootCoreStageSignal(self._context)

    def stages(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.stage.stages', *args, **kwargs)

    def delete_instance(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.stage.delete_instance', *args, **kwargs)

    def instances(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.stage.instances', *args, **kwargs)

    def remove_stage(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.stage.remove_stage', *args, **kwargs)

    def add_stage(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.stage.add_stage', *args, **kwargs)

    def init_stages(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.stage.init_stages', *args, **kwargs)

    def create_instance(self, *args, **kwargs) -> Any:
        return self._context.call('root.core.stage.create_instance', *args, **kwargs)


class RootCoreHwm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.hwm'


class RootCoreCamera(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.camera'


class RootCoreVshi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.vshi'


class RootCoreSpm_probes_database(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.spm_probes_database'


class RootCoreOptions_store(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.options_store'


class RootCore(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core'
        self.options_store = RootCoreOptions_store(self._context)
        self.spm_probes_database = RootCoreSpm_probes_database(self._context)
        self.vshi = RootCoreVshi(self._context)
        self.camera = RootCoreCamera(self._context)
        self.hwm = RootCoreHwm(self._context)
        self.stage = RootCoreStage(self._context)
        self.spm_controller_discovery = RootCoreSpm_controller_discovery(self._context)
        self.storage = RootCoreStorage(self._context)
        self.i2c = RootCoreI2c(self._context)
        self.script_server = RootCoreScript_server(self._context)
        self.hw_modules = RootCoreHw_modules(self._context)


class RootUtil(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.util'

    def deep_copy(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.deep_copy', *args, **kwargs)

    def make_property(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.make_property', *args, **kwargs)

    def list_table_functions(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.list_table_functions', *args, **kwargs)

    def to_snake_case(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.to_snake_case', *args, **kwargs)

    def to_string(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.to_string', *args, **kwargs)

    def filter_string_array_begin(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.filter_string_array_begin', *args, **kwargs)

    def table_append(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.table_append', *args, **kwargs)

    def array_concat(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.array_concat', *args, **kwargs)

    def list_table_elements(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.list_table_elements', *args, **kwargs)

    def prequire(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.prequire', *args, **kwargs)

    def num_table_invert(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.num_table_invert', *args, **kwargs)

    def list_table_tables(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.list_table_tables', *args, **kwargs)

    def list_table_vars(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.list_table_vars', *args, **kwargs)

    def list_table_all(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.list_table_all', *args, **kwargs)

    def deep_compare(self, *args, **kwargs) -> Any:
        return self._context.call('root.util.deep_compare', *args, **kwargs)


class RootWorkflowCantilever_browser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.cantilever_browser'


class RootWorkflowHardware_detection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.hardware_detection'


class RootWorkflowParameters(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.parameters'


class RootWorkflowManager(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.manager'

    @property
    def session_name(self) -> str:
        return str(self._context.get('root.workflow.manager.session_name'))

    @session_name.setter
    def session_name(self, new_val:str):
        self._context.set('root.workflow.manager.session_name', str(new_val))


class RootWorkflowApplication_updater(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.application_updater'


class RootWorkflowCamera(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.camera'

    def get_exposure_auto(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.get_exposure_auto', *args, **kwargs)

    def get_gain_auto(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.get_gain_auto', *args, **kwargs)

    def focus_idle(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.focus_idle', *args, **kwargs)

    def get_gain(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.get_gain', *args, **kwargs)

    def get_exposure(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.get_exposure', *args, **kwargs)

    def has_illumination(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.has_illumination', *args, **kwargs)

    def move_focus_up_for_duration(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.move_focus_up_for_duration', *args, **kwargs)

    def has_exposure_auto(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.has_exposure_auto', *args, **kwargs)

    def set_illumination(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.set_illumination', *args, **kwargs)

    def has_gain_auto(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.has_gain_auto', *args, **kwargs)

    def get_focus(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.get_focus', *args, **kwargs)

    def is_connected(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.is_connected', *args, **kwargs)

    def get_illumination(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.get_illumination', *args, **kwargs)

    def set_resolution(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.set_resolution', *args, **kwargs)

    def set_exposure_auto(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.set_exposure_auto', *args, **kwargs)

    def has_focus(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.has_focus', *args, **kwargs)

    def set_gain(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.set_gain', *args, **kwargs)

    def save_current_frame_to_file(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.save_current_frame_to_file', *args, **kwargs)

    def camera_list(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.camera_list', *args, **kwargs)

    def set_exposure(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.set_exposure', *args, **kwargs)

    def resolution_list(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.resolution_list', *args, **kwargs)

    def move_focus_down_for_duration(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.move_focus_down_for_duration', *args, **kwargs)

    def move_focus_by_distance(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.move_focus_by_distance', *args, **kwargs)

    def set_gain_auto(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.set_gain_auto', *args, **kwargs)

    def get_resolution(self, *args, **kwargs) -> Any:
        return self._context.call('root.workflow.camera.get_resolution', *args, **kwargs)


class RootWorkflow(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow'
        self.camera = RootWorkflowCamera(self._context)
        self.application_updater = RootWorkflowApplication_updater(self._context)
        self.manager = RootWorkflowManager(self._context)
        self.parameters = RootWorkflowParameters(self._context)
        self.hardware_detection = RootWorkflowHardware_detection(self._context)
        self.cantilever_browser = RootWorkflowCantilever_browser(self._context)


class Root(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root'
        self.workflow = RootWorkflow(self._context)
        self.util = RootUtil(self._context)
        self.core = RootCore(self._context)
        self.session = RootSession(self._context)
        self.test = RootTest(self._context)
        self.lu = RootLu(self._context)
        self.version = RootVersion(self._context)

    def log_fatal(self, *args, **kwargs) -> Any:
        return self._context.call('root.log_fatal', *args, **kwargs)

    def log_info(self, *args, **kwargs) -> Any:
        return self._context.call('root.log_info', *args, **kwargs)

    def log_warn(self, *args, **kwargs) -> Any:
        return self._context.call('root.log_warn', *args, **kwargs)

    def log_error(self, *args, **kwargs) -> Any:
        return self._context.call('root.log_error', *args, **kwargs)

    @property
    def init_complete(self) -> bool:
        return bool(self._context.get('root.init_complete'))

    @init_complete.setter
    def init_complete(self, new_val:bool):
        self._context.set('root.init_complete', bool(new_val))

    def log_debug(self, *args, **kwargs) -> Any:
        return self._context.call('root.log_debug', *args, **kwargs)



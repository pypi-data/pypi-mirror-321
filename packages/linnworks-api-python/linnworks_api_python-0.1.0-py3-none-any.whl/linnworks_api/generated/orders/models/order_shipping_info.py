# coding: utf-8

"""
    Orders API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: orders
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OrderShippingInfo(BaseModel):
    """
    OrderShippingInfo
    """ # noqa: E501
    vendor: Optional[StrictStr] = Field(default=None, alias="Vendor")
    postal_service_id: Optional[StrictStr] = Field(default=None, alias="PostalServiceId")
    postal_service_name: Optional[StrictStr] = Field(default=None, alias="PostalServiceName")
    total_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TotalWeight")
    item_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ItemWeight")
    package_category_id: Optional[StrictStr] = Field(default=None, alias="PackageCategoryId")
    package_category: Optional[StrictStr] = Field(default=None, alias="PackageCategory")
    package_type_id: Optional[StrictStr] = Field(default=None, alias="PackageTypeId")
    package_type: Optional[StrictStr] = Field(default=None, alias="PackageType")
    postage_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PostageCost")
    postage_cost_ex_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PostageCostExTax")
    tracking_number: Optional[StrictStr] = Field(default=None, alias="TrackingNumber")
    manual_adjust: Optional[StrictBool] = Field(default=None, alias="ManualAdjust")
    __properties: ClassVar[List[str]] = ["Vendor", "PostalServiceId", "PostalServiceName", "TotalWeight", "ItemWeight", "PackageCategoryId", "PackageCategory", "PackageTypeId", "PackageType", "PostageCost", "PostageCostExTax", "TrackingNumber", "ManualAdjust"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderShippingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderShippingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Vendor": obj.get("Vendor"),
            "PostalServiceId": obj.get("PostalServiceId"),
            "PostalServiceName": obj.get("PostalServiceName"),
            "TotalWeight": obj.get("TotalWeight"),
            "ItemWeight": obj.get("ItemWeight"),
            "PackageCategoryId": obj.get("PackageCategoryId"),
            "PackageCategory": obj.get("PackageCategory"),
            "PackageTypeId": obj.get("PackageTypeId"),
            "PackageType": obj.get("PackageType"),
            "PostageCost": obj.get("PostageCost"),
            "PostageCostExTax": obj.get("PostageCostExTax"),
            "TrackingNumber": obj.get("TrackingNumber"),
            "ManualAdjust": obj.get("ManualAdjust")
        })
        return _obj



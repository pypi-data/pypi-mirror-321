# coding: utf-8

"""
    Inventory API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: inventory
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CountryRegion(BaseModel):
    """
    CountryRegion
    """ # noqa: E501
    pk_region_row_id: Optional[StrictInt] = Field(default=None, alias="pkRegionRowId")
    region_code: Optional[StrictStr] = Field(default=None, alias="RegionCode")
    region_name: Optional[StrictStr] = Field(default=None, alias="RegionName")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TaxRate")
    fk_country_id: Optional[StrictStr] = Field(default=None, alias="fkCountryId")
    replace_with: Optional[StrictStr] = Field(default=None, alias="ReplaceWith")
    is_home_region: Optional[StrictBool] = Field(default=None, alias="IsHomeRegion")
    tags_count: Optional[StrictInt] = Field(default=None, alias="TagsCount")
    __properties: ClassVar[List[str]] = ["pkRegionRowId", "RegionCode", "RegionName", "TaxRate", "fkCountryId", "ReplaceWith", "IsHomeRegion", "TagsCount"]

    @field_validator('replace_with')
    def replace_with_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['None', 'Name', 'Code']):
            raise ValueError("must be one of enum values ('None', 'Name', 'Code')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CountryRegion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CountryRegion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkRegionRowId": obj.get("pkRegionRowId"),
            "RegionCode": obj.get("RegionCode"),
            "RegionName": obj.get("RegionName"),
            "TaxRate": obj.get("TaxRate"),
            "fkCountryId": obj.get("fkCountryId"),
            "ReplaceWith": obj.get("ReplaceWith"),
            "IsHomeRegion": obj.get("IsHomeRegion"),
            "TagsCount": obj.get("TagsCount")
        })
        return _obj



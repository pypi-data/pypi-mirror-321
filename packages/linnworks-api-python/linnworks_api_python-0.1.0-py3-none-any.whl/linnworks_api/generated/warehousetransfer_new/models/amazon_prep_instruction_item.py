# coding: utf-8

"""
    Warehouse Transfer

    Warehouse Transfer v1

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from linnworks_api.generated.warehousetransfer_new.models.prep_owners import PrepOwners
from linnworks_api.generated.warehousetransfer_new.models.sku_prep_instruction import SkuPrepInstruction
from typing import Optional, Set
from typing_extensions import Self

class AmazonPrepInstructionItem(BaseModel):
    """
    AmazonPrepInstructionItem
    """ # noqa: E501
    prep_instruction: Optional[SkuPrepInstruction] = Field(default=None, alias="prepInstruction")
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    currency_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="currencyValue")
    prep_owner: Optional[PrepOwners] = Field(default=None, alias="prepOwner")
    __properties: ClassVar[List[str]] = ["prepInstruction", "currencyCode", "currencyValue", "prepOwner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AmazonPrepInstructionItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['currencyCode'] = None

        # set to None if currency_value (nullable) is None
        # and model_fields_set contains the field
        if self.currency_value is None and "currency_value" in self.model_fields_set:
            _dict['currencyValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AmazonPrepInstructionItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prepInstruction": obj.get("prepInstruction"),
            "currencyCode": obj.get("currencyCode"),
            "currencyValue": obj.get("currencyValue"),
            "prepOwner": obj.get("prepOwner")
        })
        return _obj



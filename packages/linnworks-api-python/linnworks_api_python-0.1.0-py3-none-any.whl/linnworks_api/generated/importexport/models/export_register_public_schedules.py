# coding: utf-8

"""
    Import and Export API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: importexport
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from linnworks_api.generated.importexport.models.schedule import Schedule
from typing import Optional, Set
from typing_extensions import Self

class ExportRegisterPublicSchedules(BaseModel):
    """
    ExportRegisterPublicSchedules
    """ # noqa: E501
    last_query_executed: Optional[datetime] = Field(default=None, alias="LastQueryExecuted")
    id: Optional[StrictInt] = Field(default=None, alias="Id")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    friendly_name: Optional[StrictStr] = Field(default=None, alias="FriendlyName")
    executing: Optional[StrictBool] = Field(default=None, alias="Executing")
    started: Optional[datetime] = Field(default=None, alias="Started")
    completed: Optional[datetime] = Field(default=None, alias="Completed")
    is_queued: Optional[StrictBool] = Field(default=None, alias="IsQueued")
    enabled: Optional[StrictBool] = Field(default=None, alias="Enabled")
    just_once: Optional[StrictBool] = Field(default=None, alias="justOnce")
    schedules: Optional[List[Schedule]] = Field(default=None, alias="Schedules")
    last_export_status: Optional[StrictBool] = Field(default=None, alias="LastExportStatus")
    is_new: Optional[StrictBool] = Field(default=None, alias="IsNew")
    all_schedules_disabled: Optional[StrictBool] = Field(default=None, alias="AllSchedulesDisabled")
    time_zone_offset: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TimeZoneOffset")
    next_schedule: Optional[datetime] = Field(default=None, alias="NextSchedule")
    __properties: ClassVar[List[str]] = ["LastQueryExecuted", "Id", "Type", "FriendlyName", "Executing", "Started", "Completed", "IsQueued", "Enabled", "justOnce", "Schedules", "LastExportStatus", "IsNew", "AllSchedulesDisabled", "TimeZoneOffset", "NextSchedule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportRegisterPublicSchedules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_new",
            "all_schedules_disabled",
            "next_schedule",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schedules (list)
        _items = []
        if self.schedules:
            for _item_schedules in self.schedules:
                if _item_schedules:
                    _items.append(_item_schedules.to_dict())
            _dict['Schedules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportRegisterPublicSchedules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LastQueryExecuted": obj.get("LastQueryExecuted"),
            "Id": obj.get("Id"),
            "Type": obj.get("Type"),
            "FriendlyName": obj.get("FriendlyName"),
            "Executing": obj.get("Executing"),
            "Started": obj.get("Started"),
            "Completed": obj.get("Completed"),
            "IsQueued": obj.get("IsQueued"),
            "Enabled": obj.get("Enabled"),
            "justOnce": obj.get("justOnce"),
            "Schedules": [Schedule.from_dict(_item) for _item in obj["Schedules"]] if obj.get("Schedules") is not None else None,
            "LastExportStatus": obj.get("LastExportStatus"),
            "IsNew": obj.get("IsNew"),
            "AllSchedulesDisabled": obj.get("AllSchedulesDisabled"),
            "TimeZoneOffset": obj.get("TimeZoneOffset"),
            "NextSchedule": obj.get("NextSchedule")
        })
        return _obj



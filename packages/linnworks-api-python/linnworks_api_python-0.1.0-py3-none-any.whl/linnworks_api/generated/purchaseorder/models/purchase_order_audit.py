# coding: utf-8

"""
    Purchase Orders API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: purchaseorder
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PurchaseOrderAudit(BaseModel):
    """
    PurchaseOrderAudit
    """ # noqa: E501
    pk_purchase_audit_trail_id: Optional[StrictStr] = Field(default=None, alias="pkPurchaseAuditTrailId")
    audit_trail_date_time_stamp: Optional[datetime] = Field(default=None, alias="AuditTrailDateTimeStamp")
    fk_purchase_id: Optional[StrictStr] = Field(default=None, alias="fkPurchaseId")
    audit_trail_type: Optional[StrictStr] = Field(default=None, alias="AuditTrailType")
    audit_trail_tag: Optional[StrictStr] = Field(default=None, alias="AuditTrailTag")
    audit_trail_note: Optional[StrictStr] = Field(default=None, alias="AuditTrailNote")
    user_name: Optional[StrictStr] = Field(default=None, alias="UserName")
    audit_trail_date: Optional[StrictStr] = Field(default=None, alias="AuditTrailDate")
    audit_trail_time: Optional[StrictStr] = Field(default=None, alias="AuditTrailTime")
    __properties: ClassVar[List[str]] = ["pkPurchaseAuditTrailId", "AuditTrailDateTimeStamp", "fkPurchaseId", "AuditTrailType", "AuditTrailTag", "AuditTrailNote", "UserName", "AuditTrailDate", "AuditTrailTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseOrderAudit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "audit_trail_date",
            "audit_trail_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseOrderAudit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkPurchaseAuditTrailId": obj.get("pkPurchaseAuditTrailId"),
            "AuditTrailDateTimeStamp": obj.get("AuditTrailDateTimeStamp"),
            "fkPurchaseId": obj.get("fkPurchaseId"),
            "AuditTrailType": obj.get("AuditTrailType"),
            "AuditTrailTag": obj.get("AuditTrailTag"),
            "AuditTrailNote": obj.get("AuditTrailNote"),
            "UserName": obj.get("UserName"),
            "AuditTrailDate": obj.get("AuditTrailDate"),
            "AuditTrailTime": obj.get("AuditTrailTime")
        })
        return _obj



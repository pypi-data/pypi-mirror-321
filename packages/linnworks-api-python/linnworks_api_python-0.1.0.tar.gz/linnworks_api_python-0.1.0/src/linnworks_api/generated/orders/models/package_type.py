# coding: utf-8

"""
    Orders API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: orders
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PackageType(BaseModel):
    """
    PackageType
    """ # noqa: E501
    package_type_id: Optional[StrictStr] = Field(default=None, alias="PackageTypeId")
    package_group_id: Optional[StrictStr] = Field(default=None, alias="PackageGroupId")
    package_title: Optional[StrictStr] = Field(default=None, alias="PackageTitle")
    from_gramms: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FromGramms")
    to_gramms: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ToGramms")
    packaging_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PackagingWeight")
    packaging_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PackagingCapacity")
    rowguid: Optional[StrictStr] = Field(default=None, alias="Rowguid")
    width: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Width")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Height")
    depth: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Depth")
    __properties: ClassVar[List[str]] = ["PackageTypeId", "PackageGroupId", "PackageTitle", "FromGramms", "ToGramms", "PackagingWeight", "PackagingCapacity", "Rowguid", "Width", "Height", "Depth"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PackageTypeId": obj.get("PackageTypeId"),
            "PackageGroupId": obj.get("PackageGroupId"),
            "PackageTitle": obj.get("PackageTitle"),
            "FromGramms": obj.get("FromGramms"),
            "ToGramms": obj.get("ToGramms"),
            "PackagingWeight": obj.get("PackagingWeight"),
            "PackagingCapacity": obj.get("PackagingCapacity"),
            "Rowguid": obj.get("Rowguid"),
            "Width": obj.get("Width"),
            "Height": obj.get("Height"),
            "Depth": obj.get("Depth")
        })
        return _obj



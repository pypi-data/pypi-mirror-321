# coding: utf-8

"""
    Shipping service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: shippingservice
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FileUploadItem(BaseModel):
    """
    FileUploadItem
    """ # noqa: E501
    encoded_file: Optional[StrictStr] = Field(default=None, alias="EncodedFile")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    doc_type: Optional[StrictStr] = Field(default=None, alias="DocType")
    expiration_date: Optional[StrictStr] = Field(default=None, alias="ExpirationDate")
    doc_usage_type: Optional[StrictStr] = Field(default=None, alias="DocUsageType")
    order_id: Optional[StrictStr] = Field(default=None, alias="OrderId")
    account_id: Optional[StrictStr] = Field(default=None, alias="AccountId")
    vendor: Optional[StrictStr] = Field(default=None, alias="Vendor")
    __properties: ClassVar[List[str]] = ["EncodedFile", "Name", "DocType", "ExpirationDate", "DocUsageType", "OrderId", "AccountId", "Vendor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileUploadItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileUploadItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EncodedFile": obj.get("EncodedFile"),
            "Name": obj.get("Name"),
            "DocType": obj.get("DocType"),
            "ExpirationDate": obj.get("ExpirationDate"),
            "DocUsageType": obj.get("DocUsageType"),
            "OrderId": obj.get("OrderId"),
            "AccountId": obj.get("AccountId"),
            "Vendor": obj.get("Vendor")
        })
        return _obj



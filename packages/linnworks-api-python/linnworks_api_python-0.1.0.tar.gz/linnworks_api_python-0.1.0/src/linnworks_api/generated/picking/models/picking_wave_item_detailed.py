# coding: utf-8

"""
    Picking API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: picking
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from linnworks_api.generated.picking.models.picking_wave_item_tote import PickingWaveItemTote
from typing import Optional, Set
from typing_extensions import Self

class PickingWaveItemDetailed(BaseModel):
    """
    PickingWaveItemDetailed
    """ # noqa: E501
    sort_order: Optional[StrictInt] = Field(default=None, description="Sort order", alias="SortOrder")
    to_pick_quantity: Optional[StrictInt] = Field(default=None, description="Quantity to pick", alias="ToPickQuantity")
    totid: Optional[StrictInt] = Field(default=None, description="ToT Id", alias="TOTId")
    tray_tag: Optional[StrictStr] = Field(default=None, description="Tray tag", alias="TrayTag")
    picking_tag: Optional[StrictStr] = Field(default=None, description="Picking tag", alias="PickingTag")
    picking_wave_items_row_id: Optional[StrictInt] = Field(default=None, description="Pickwave item row id", alias="PickingWaveItemsRowId")
    picking_wave_id: Optional[StrictInt] = Field(default=None, description="Pickwave id", alias="PickingWaveId")
    picked_quantity: Optional[StrictInt] = Field(default=None, description="Quatity picked", alias="PickedQuantity")
    item_state: Optional[StrictStr] = Field(default=None, description="Pickwave item state", alias="ItemState")
    totes: Optional[List[PickingWaveItemTote]] = Field(default=None, description="Collection of pickwave item totes.", alias="Totes")
    batch_inventory_id: Optional[StrictInt] = Field(default=None, alias="BatchInventoryId")
    order_id: Optional[StrictInt] = Field(default=None, alias="OrderId")
    order_item_row_id: Optional[StrictStr] = Field(default=None, alias="OrderItemRowId")
    stock_item_id: Optional[StrictStr] = Field(default=None, alias="StockItemId")
    order_sort_order: Optional[StrictInt] = Field(default=None, alias="OrderSortOrder")
    __properties: ClassVar[List[str]] = ["SortOrder", "ToPickQuantity", "TOTId", "TrayTag", "PickingTag", "PickingWaveItemsRowId", "PickingWaveId", "PickedQuantity", "ItemState", "Totes", "BatchInventoryId", "OrderId", "OrderItemRowId", "StockItemId", "OrderSortOrder"]

    @field_validator('item_state')
    def item_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Normal', 'OrderStateInvalid', 'Abandonned', 'DeletedFromOrder']):
            raise ValueError("must be one of enum values ('Normal', 'OrderStateInvalid', 'Abandonned', 'DeletedFromOrder')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PickingWaveItemDetailed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in totes (list)
        _items = []
        if self.totes:
            for _item_totes in self.totes:
                if _item_totes:
                    _items.append(_item_totes.to_dict())
            _dict['Totes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PickingWaveItemDetailed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SortOrder": obj.get("SortOrder"),
            "ToPickQuantity": obj.get("ToPickQuantity"),
            "TOTId": obj.get("TOTId"),
            "TrayTag": obj.get("TrayTag"),
            "PickingTag": obj.get("PickingTag"),
            "PickingWaveItemsRowId": obj.get("PickingWaveItemsRowId"),
            "PickingWaveId": obj.get("PickingWaveId"),
            "PickedQuantity": obj.get("PickedQuantity"),
            "ItemState": obj.get("ItemState"),
            "Totes": [PickingWaveItemTote.from_dict(_item) for _item in obj["Totes"]] if obj.get("Totes") is not None else None,
            "BatchInventoryId": obj.get("BatchInventoryId"),
            "OrderId": obj.get("OrderId"),
            "OrderItemRowId": obj.get("OrderItemRowId"),
            "StockItemId": obj.get("StockItemId"),
            "OrderSortOrder": obj.get("OrderSortOrder")
        })
        return _obj



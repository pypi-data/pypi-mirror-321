# coding: utf-8

"""
    Processed Orders API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: processedorders
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OrderItemReturnInfoBatched(BaseModel):
    """
    OrderItemReturnInfoBatched
    """ # noqa: E501
    order_item_batch_id: Optional[StrictInt] = Field(default=None, alias="OrderItemBatchId")
    batch_inventory_id: Optional[StrictInt] = Field(default=None, alias="BatchInventoryId")
    batch_number: Optional[StrictStr] = Field(default=None, alias="BatchNumber")
    despatch_unit_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DespatchUnitValue")
    order_id: Optional[StrictStr] = Field(default=None, alias="OrderId")
    fk_order_item_row_id: Optional[StrictStr] = Field(default=None, alias="fkOrderItemRowId")
    parent_row_id: Optional[StrictStr] = Field(default=None, alias="ParentRowId")
    returnable_qty: Optional[StrictInt] = Field(default=None, alias="ReturnableQty")
    order_qty: Optional[StrictInt] = Field(default=None, alias="OrderQty")
    returned_qty: Optional[StrictInt] = Field(default=None, alias="ReturnedQty")
    sku: Optional[StrictStr] = Field(default=None, alias="SKU")
    item_title: Optional[StrictStr] = Field(default=None, alias="ItemTitle")
    unit_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="UnitValue")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TaxRate")
    tax_cost_inclusive: Optional[StrictBool] = Field(default=None, alias="TaxCostInclusive")
    currency: Optional[StrictStr] = Field(default=None, alias="Currency")
    is_composite_parent: Optional[StrictBool] = Field(default=None, alias="IsCompositeParent")
    is_partial_composite_return: Optional[StrictBool] = Field(default=None, alias="IsPartialCompositeReturn")
    parent_ratio: Optional[StrictInt] = Field(default=None, alias="ParentRatio")
    pk_stock_item_id: Optional[StrictStr] = Field(default=None, alias="pkStockItemId")
    resent_qty: Optional[StrictInt] = Field(default=None, alias="ResentQty")
    fk_refund_row_id: Optional[StrictStr] = Field(default=None, alias="fkRefundRowId")
    __properties: ClassVar[List[str]] = ["OrderItemBatchId", "BatchInventoryId", "BatchNumber", "DespatchUnitValue", "OrderId", "fkOrderItemRowId", "ParentRowId", "ReturnableQty", "OrderQty", "ReturnedQty", "SKU", "ItemTitle", "UnitValue", "TaxRate", "TaxCostInclusive", "Currency", "IsCompositeParent", "IsPartialCompositeReturn", "ParentRatio", "pkStockItemId", "ResentQty", "fkRefundRowId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderItemReturnInfoBatched from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "order_id",
            "returnable_qty",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderItemReturnInfoBatched from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "OrderItemBatchId": obj.get("OrderItemBatchId"),
            "BatchInventoryId": obj.get("BatchInventoryId"),
            "BatchNumber": obj.get("BatchNumber"),
            "DespatchUnitValue": obj.get("DespatchUnitValue"),
            "OrderId": obj.get("OrderId"),
            "fkOrderItemRowId": obj.get("fkOrderItemRowId"),
            "ParentRowId": obj.get("ParentRowId"),
            "ReturnableQty": obj.get("ReturnableQty"),
            "OrderQty": obj.get("OrderQty"),
            "ReturnedQty": obj.get("ReturnedQty"),
            "SKU": obj.get("SKU"),
            "ItemTitle": obj.get("ItemTitle"),
            "UnitValue": obj.get("UnitValue"),
            "TaxRate": obj.get("TaxRate"),
            "TaxCostInclusive": obj.get("TaxCostInclusive"),
            "Currency": obj.get("Currency"),
            "IsCompositeParent": obj.get("IsCompositeParent"),
            "IsPartialCompositeReturn": obj.get("IsPartialCompositeReturn"),
            "ParentRatio": obj.get("ParentRatio"),
            "pkStockItemId": obj.get("pkStockItemId"),
            "ResentQty": obj.get("ResentQty"),
            "fkRefundRowId": obj.get("fkRefundRowId")
        })
        return _obj



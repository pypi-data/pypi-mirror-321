# coding: utf-8

"""
    Purchase Orders API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: purchaseorder
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PurchaseItemFound(BaseModel):
    """
    PurchaseItemFound
    """ # noqa: E501
    pk_stock_item_id: Optional[StrictStr] = Field(default=None, alias="pkStockItemId")
    item_number: Optional[StrictStr] = Field(default=None, alias="ItemNumber")
    item_title: Optional[StrictStr] = Field(default=None, alias="ItemTitle")
    inventory_tracking_type: Optional[StrictInt] = Field(default=None, alias="InventoryTrackingType")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TaxRate")
    purchase_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PurchasePrice")
    known_purchase_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KnownPurchasePrice")
    supplier_code: Optional[StrictStr] = Field(default=None, alias="SupplierCode")
    supplier_barcode: Optional[StrictStr] = Field(default=None, alias="SupplierBarcode")
    fk_supplier_id: Optional[StrictStr] = Field(default=None, alias="fkSupplierId")
    supplier_min_order_qty: Optional[StrictInt] = Field(default=None, alias="SupplierMinOrderQty")
    supplier_pack_size: Optional[StrictInt] = Field(default=None, alias="SupplierPackSize")
    contains_composites: Optional[StrictBool] = Field(default=None, alias="ContainsComposites")
    stock_item_int_id: Optional[StrictInt] = Field(default=None, alias="StockItemIntId")
    fk_stock_location_id: Optional[StrictStr] = Field(default=None, alias="fkStockLocationId")
    __properties: ClassVar[List[str]] = ["pkStockItemId", "ItemNumber", "ItemTitle", "InventoryTrackingType", "TaxRate", "PurchasePrice", "KnownPurchasePrice", "SupplierCode", "SupplierBarcode", "fkSupplierId", "SupplierMinOrderQty", "SupplierPackSize", "ContainsComposites", "StockItemIntId", "fkStockLocationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PurchaseItemFound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PurchaseItemFound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkStockItemId": obj.get("pkStockItemId"),
            "ItemNumber": obj.get("ItemNumber"),
            "ItemTitle": obj.get("ItemTitle"),
            "InventoryTrackingType": obj.get("InventoryTrackingType"),
            "TaxRate": obj.get("TaxRate"),
            "PurchasePrice": obj.get("PurchasePrice"),
            "KnownPurchasePrice": obj.get("KnownPurchasePrice"),
            "SupplierCode": obj.get("SupplierCode"),
            "SupplierBarcode": obj.get("SupplierBarcode"),
            "fkSupplierId": obj.get("fkSupplierId"),
            "SupplierMinOrderQty": obj.get("SupplierMinOrderQty"),
            "SupplierPackSize": obj.get("SupplierPackSize"),
            "ContainsComposites": obj.get("ContainsComposites"),
            "StockItemIntId": obj.get("StockItemIntId"),
            "fkStockLocationId": obj.get("fkStockLocationId")
        })
        return _obj



Root:
        ('package' name=ID ';')?
        component*=Component
;

Component:  Workflow | AssembledWorkflow | Experiment;

Workflow:
    'workflow' name=ID '{'
        elements*=Element
    '}'
;

// Note: StartAndEndEvent has to be come BEFORE StartEvent in the next line
Element: Node | Data | ConfigureTask | ConfigureData |  StartAndEndEvent | StartEvent | EndEvent | TaskLink | ConditionLink | DataLink | GroupTask | Comment;

Node:
    DefineTask | Operator
;

StartAndEndEvent:
    'START'
    '->'
    (nodes=[Node] '->')+
    'END'
    ';'
;

StartEvent:
    'START'
    ('->' nodes+=[Node])+
    ';'
;

EndEvent:
    (nodes=[Node] '->')+
    'END'
    ';'
;

TaskLink:
    initial_node=[Node]
    ('->' nodes+=[Node])+
    ';'
;

ConfigureTask:
    'configure task' alias=[DefineTask] '{'
        ('param' parameters=ID ('=' values=INT | STRING | FLOAT | BOOL | "null")* ';')*
        ('implementation' filename=STRING';' | 'subworkflow' subworkflow=STRING';')?
        (subtasks=ConfigureTask)*
    '}';

DefineTask: 'define task' name=ID ';';

ConfigureData:
    'configure data' alias=[Data] '{'
        'path' path=STRING';'
    '}';

Operator: 'define operator' name=ID ';';

Data: 'define data' name=ID '[''data=' data*=[Value][','] '];'  | 'define input data' name=ID ';' | 'define output data' name=ID ';' ;

Value: STRING | INT | FLOAT | BOOL | "null";

DataLink:
    firstData=[Data] '-->' secondNode=[Node] '.' secondData1=ID ';' |
    firstNode=[Node] '.' firstData2=ID '-->' secondNode=[Node] '.' secondData2=ID ';' |
    firstNode=[Node] '.' firstData3=ID '-->' secondData=[Data] ';'
;

ConditionLink: from_node=[Node] '->' condition=STRING '?' if_node=[Node]  ':' else_node=[Node] '->' continuation_Node=[Node] ';';

GroupTask:  'group' name=ID '{' node+=[Node]* '};' ;

AssembledWorkflow:
    'workflow' name=ID 'from' parent_workflow=[Workflow] '{'
        (tasks=ConfigureTask)*
    '}';

Experiment:
    'experiment' name=ID '{'
        (intent='intent' intent_name=ID ';')?
        (control=Control)*
        experimentNode*=ExperimentNode
    '}';

ExperimentNode: SpaceConfig | ExperimentControlTask | ExperimentControlInteraction ;

ExperimentControlTask:
    'task' name=ID '{'
        ('implementation' implementation=STRING';' | 'subworkflow' subworkflow=STRING';')?
    '}';

ExperimentControlInteraction:
    'interaction' name=ID '{'
        ('implementation' implementation=STRING';' | 'subworkflow' subworkflow=STRING';')?
    '}';

SpaceConfig:
    'space' name=ID 'of' assembled_workflow=[AssembledWorkflow] '{'
        'strategy' strategy_name=Strategy ';'
        ('runs' '=' runs=INT ';')?
        (vps=VP)*
        (tasks=ESpaceTaskConfiguration)*
    '}'|
    'space' name=ID 'of' assembled_workflow=[Workflow] '{'
        'strategy' strategy_name=Strategy ';'
    '}';

Strategy: 'gridsearch' |  'randomsearch' | 'singlerun';


VP:
    'param' vp_name=ID '=' vp_values=VP_value
;

VP_value: ENUM | RANGE;

ENUM:
    'enum(' values+=INT [','] ')' ';' |
    'enum(' values+=STRING [','] ')' ';'
;

RANGE:
    'range(' minimum=INT ',' maximum=INT ')' ';' |
    'range(' minimum=INT ',' maximum=INT',' step=INT ');'

;


ESpaceTaskConfiguration:
    'configure task' task=[DefineTask] '{'
         (config=ParameterConfiguration)*
    '}';


ParameterConfiguration: 'param' param_name=ID '=' vp=ID ';';

Control:
        'control' '{'
               (expNode=[ExperimentNode]';')?
               explink*=ExpLink
        '}';

ExpLink:  RegularExpLink | ConditionalExpLink;

RegularExpLinkOLD:
    initial_space='START' '->' start=[ExperimentNode] ';' |
    'START' '->' start=[ExperimentNode]  '->' 'END' ';' |
    initial_space=[ExperimentNode] '->' (spaces=[ExperimentNode])+ ';' |
    initial_space=[ExperimentNode] '->' (spaces=[ExperimentNode] '->')+ 'END' ';'
;

RegularExpLink:
    'START' '->' (nodes+=ExperimentControlNode '->')+ 'END' ';' |
    'START' ('->' start_nodes+=ExperimentControlNode)+ ';' |
    (end_nodes+=ExperimentControlNode '->')+ 'END' ';' |
    first_node=ExperimentControlNode ('->' rest_nodes+=ExperimentControlNode)+ ';'
;

ConditionalExpLink:
    from_node=ExperimentControlNode '?->' to_node=ExperimentControlNode '{' 'condition' condition=STRING '}' ';'
;

ExperimentControlNode:
    single_node=[ExperimentNode] |
    '(' single_node=[ExperimentNode] ')' |
    '(' first_node=[ExperimentNode] ('||' rest_nodes+=[ExperimentNode])+ ')'
;

Comment: /\/\/.*$/;

import asyncio
import re
from typing import Optional

import httpx
from pydantic import BaseModel
import typer

from uv_secure.package_info.dependency_file_parser import Dependency


class Vulnerability(BaseModel):
    id: str
    details: str
    fixed_in: Optional[list[str]] = None
    aliases: Optional[list[str]] = None
    link: Optional[str] = None
    source: Optional[str] = None
    summary: Optional[str] = None
    withdrawn: Optional[str] = None


def _canonicalize_name(name: str) -> str:
    """Converts a package name to its canonical form for PyPI URLs"""
    return re.sub(r"[_.]+", "-", name).lower()


async def _download_package_vulnerabilities(
    client: httpx.AsyncClient, dependency: Dependency
) -> tuple[Dependency, list[Vulnerability]]:
    """Queries the PyPi JSON API for vulnerabilities of a given dependency."""
    canonical_name = _canonicalize_name(dependency.name)
    url = f"https://pypi.org/pypi/{canonical_name}/{dependency.version}/json"
    try:
        response = await client.get(url)
        if response.status_code == 200:
            data = response.json()
            vulnerabilities = [
                Vulnerability(**v) for v in data.get("vulnerabilities", [])
            ]
            return dependency, vulnerabilities
        typer.echo(
            f"Warning: Could not fetch data for {dependency.name}=={dependency.version}"
        )
    except httpx.RequestError as e:
        typer.echo(f"Error fetching {dependency.name}=={dependency.version}: {e}")
    return dependency, []


async def download_vulnerabilities(
    dependencies: list[Dependency],
) -> list[tuple[Dependency, list[Vulnerability]]]:
    """Fetch vulnerabilities for all dependencies concurrently."""
    async with httpx.AsyncClient(timeout=10) as client:
        tasks = [_download_package_vulnerabilities(client, dep) for dep in dependencies]
        return await asyncio.gather(*tasks)

{
  "eK": {
    "type": "function",
    "description": "Loops through every K element as an array",
    "input": "Any valid equation",
    "new scope": "True",
    "output": "Will output an array of whatever value is in it",
    "K": "Any number, optional",
    "I": "The iteration number / what element is being looked at",
    "example": "e1(x == 5 ? x : 0)",
    "example-explanation": "This creates an array of every element that equals 5 and 0's everywhere else"
  },
  "oK": {
    "type": "function",
    "description": "Offsets the input array of the scope by K",
    "input": "Any array or string",
    "new scope": "False",
    "output": "Will output the offset array or string",
    "K": "Any number",
    "I": "The K Value",
    "example": "o1(e1(x))",
    "example-explanation": "This will go through every element and return an array with every element except the first"
  },
  "iK": {
    "type": "function",
    "description": "Gets the Kth element of x of the scope",
    "input": "Any array or string, will default to x if nothing is provided",
    "new scope": "False",
    "output": "Will output the indexed array or string",
    "K": "Any number within length of x",
    "I": "The K Value",
    "example": "i0(x)",
    "example-explanation": "This is the first element of the array"
  },
  "r": {
    "type": "function",
    "description": "Reverses the array",
    "input": "Any valid array or string",
    "new scope": "False",
    "output": "Will output the reversed array or string",
    "K": "None",
    "I": "Same",
    "example": "i0(r(x))",
    "example-explanation": "This will look at the last element because it is looking at the first element of the reversed array"
  },
  "sK": {
    "type": "function",
    "description": "Selects the first K elements of x of the scope",
    "input": "Any valid array or string",
    "new scope": "False",
    "output": "Will output the array or string with the selected elements",
    "K": "Any number",
    "I": "The K value",
    "example": "s3(x)",
    "example-explanation": "This will only go take the first three elements of x"
  },
  "sc": {
    "type": "function",
    "description": "Sets an array inside to the x scope",
    "input": "Any array",
    "new scope": "True",
    "output": "Will output the second parameter",
    "K": "None",
    "I": "Same",
    "example": "sx(e1(1), x)",
    "example-explanation": "It will output an array of 1's with the length of the original array"
  },
  "l": {
    "type": "function",
    "description": "Runs a function repeatedly on every element of the array",
    "input": "Any array",
    "new scope": "False",
    "output": "Will output the result of the function repeated on every element",
    "K": "None",
    "I": "Iteration starting at 0",
    "example": "l(y+z)",
    "example-explanation": "This will add every element together i.e. the first and second element are added, then the third to that, ..."
  },
  "ar": {
    "type": "function",
    "description": "Creates an array with the provided elements",
    "input": "Comma separated values",
    "new scope": "False",
    "output": "Will output an array containing every element",
    "K": "How many times the value in the array will be repeated. Optional",
    "I": "The index of each element in the new array",
    "example": "ar2(I, I)",
    "example-explanation": "Will create an array of [0, 1, 2, 3] because each I represents its spot in the 4 length array"
  },
  "cv": {
    "type": "function",
    "description": "Converts a value provided if possible. Can't convert certain strings and arrays to numbers",
    "input": "A base value (number, string, bool, or array)",
    "new scope": "False",
    "output": "Will output the input converted to the type if possible",
    "K": "The type that you want to convert",
    "I": "The same index",
    "example": "cv{tb}(0)",
    "example-explanation": "Will convert the number into a bool, which in this case is false"
  },
  "srt": {
    "type": "function",
    "description": "Sorts the scope array",
    "input": "Any valid equation",
    "new scope": "True",
    "output": "Will output the value of whatever it returns",
    "K": "Nothing",
    "I": "Same index",
    "example": "srt(x)",
    "example-explanation": "This will return the sorted array"
  },
  "re": {
    "type": "function",
    "description": "Runs a regex function on a string and gives a value based on K",
    "input": "A regex expression, comma, text to search",
    "new scope": "False",
    "output": "Will output either the count, if a value exists, or the index",
    "K": "The info from the regex search: # for count, @ for index, _ for existence. K can be the operator or a string literal",
    "I": "The same index",
    "example": "re#(\".all\", \"Y'all ball and we fall\") ",
    "example-explanation": "Will run regex search to find how many times the pattern occurs which is 3. ('all, ball, and fall)"
  },

  "a~=b": {
    "type": "operator",
    "description": "Checks if a is of type b",
    "input": "A value on the left and a type constant on the right",
    "new scope": "False",
    "output": "Will output a boolean",
    "a": "anything",
    "b": "any type constant",
    "example": "i0()~=tn",
    "example-explanation": "Will check if the first index of the current array in scope is a number"
  },
  "b_a": {
    "type": "operator",
    "description": "Returns a boolean on whether b is in the a array",
    "input": "An array on the right and a value on the left",
    "new scope": "False",
    "output": "Will output the boolean of whether it is contained",
    "a": "any array",
    "b": "any value",
    "example": "x_T",
    "example-explanation": "Will find if True is in the array x"
  },
  "b#a": {
    "type": "operator",
    "description": "Returns a count on how many b are in the a array",
    "input": "An array on the right and a value on the left",
    "new scope": "False",
    "output": "Will output the count of how many b there are in a",
    "a": "any array",
    "b": "any value",
    "example": "x#T",
    "example-explanation": "Will find the number of True's in the array x"
  },
  "b@a": {
    "type": "operator",
    "description": "Returns where element b is in array a",
    "input": "An array on the right and a value on the left",
    "new scope": "False",
    "output": "Will output the index of where b is first in a",
    "a": "any array",
    "b": "any value",
    "example": "x@T",
    "example-explanation": "Will find the first index of True in the array x"
  },
  "a>>b": {
    "type": "operator",
    "description": "Returns array a with every instance of b removed",
    "input": "An array on the left and a value on the right",
    "new scope": "False",
    "output": "Will output the array with b removed",
    "a": "any array",
    "b": "any value",
    "example": "e1(x==5? I)>>N",
    "example-explanation": "Will find every index of 5 in an array which leads to an array like [Null, Null, 2, Null, 4]. >> will skim the N's, giving [2, 4]"
  },
  "a?b:c": {
    "type": "operator",
    "description": "Returns b if a is true otherwise c. Use parenthesis for nested if statements.",
    "input": "A boolean as a, and two expressions that return as b and c",
    "new scope": "False",
    "output": "Outputs b or c",
    "a": "any boolean",
    "b": "any value",
    "c": "any value or blank if : is not provided",
    "example": "x#T"
  },

  "x": {
    "type": "constant",
    "description": "Represents the array of the scope",
    "input": "None",
    "new scope": "False",
    "output": "An array",
    "example": "e1(x == 1 ? x : 0)"
  },
  "tK": {
    "type": "constant",
    "description": "Represents a type",
    "input": "None",
    "new scope": "False",
    "output": "The type represented by k",
    "K": "Can be N, B, S, A, for number, bool, string, array",
    "example": "tI"
  },
  "T": {
    "type": "constant",
    "description": "Represents true",
    "input": "None",
    "new scope": "False",
    "output": "True",
    "example": "x_T"
  },
  "F": {
    "type": "constant",
    "description": "Represents false",
    "input": "None",
    "new scope": "False",
    "output": "False",
    "example": "x_F"
  },
  "L": {
    "type": "constant",
    "description": "Represents length of x of scope",
    "input": "None",
    "new scope": "False",
    "output": "A number",
    "example": "v0(x) < L"
  },
  "I": {
    "type": "constant",
    "description": "Represents the index where x appears in the scope above",
    "input": "None",
    "new scope": "False",
    "output": "A number",
    "example": "v0(x) < I"
  },
  "N": {
    "type": "constant",
    "description": "Represents null",
    "input": "None",
    "new scope": "False",
    "output": "A number",
    "example": "e1(x == 'H' ? x : N)"
  },
  "Other expressions": [
    "== != > < >= <=", "\"strings\"", "Numbers", "+, -, *, /, %, ^, //", "&|!"
  ],

  "{} and ()": {
    "purpose": "Curly brackets and parenthesis allow you to prioritize certain code to run first.",
    "explanation": "For example, 4+5*3 = 19 but (4+5)*3 = 27. Curly brackets are available to enclose function parameters. Look at cv func for example."
  },

  "Basic Uses": {
    "Splice of List from A to B": "oA(sB(X))",
    "Reverse a List": "r(x)",
    "Get elements that follow condition A": "e1(A ? x)",
    "Check if an element A is at all in array of arrays of arrays": "T_e1(e1(A_x)) ? T : F",
    "Find index of last element that is equal to A": "r(A@x)",
    "Get the index where element matches A": "e1(A_x ? I)",
    "Sum a List": "l(a+b)",
    "Check which elements are floats or integers": "e1(x // 1 == x ? T : F)",
    "Find the largest element in an array": "l(b>a?b:a)) OR i0(srt(x))",
    "Find the longest array in an array of arrays": "sc(e1(L), l(b>a?b:a))",
    "Alternative": "sc(ar(0) + x, l(sc(b, L) > a ? sc(b, L) : a))",
    "Find the most common element": "l(b#x > a#x ? b:a)",
    "Find how many times a regex pattern R occurs in a list of strings": "sc(e1(re#(R, x)), l(a+b))"
  }
}
"""
This type stub file was generated by pyright.
"""

from typing import Generic, Self, TYPE_CHECKING, TypeVar
from tree_sitter import Node as TSNode
from codegen.utils.codemod.codemod_writer_decorators import apidoc
from graph_sitter.core.autocommit import reader
from graph_sitter.core.expressions.builtin import Builtin
from graph_sitter.core.expressions.expression import Expression
from graph_sitter.core.interfaces.editable import Editable
from graph_sitter.core.node_id_factory import NodeId
from graph_sitter.core.symbol_groups.collection import Collection
from graph_sitter.codebase.codebase_graph import CodebaseGraph

if TYPE_CHECKING:
    ...
Parent = TypeVar("Parent", bound="Expression")
@apidoc
class String(Expression[Parent], Builtin, Generic[Parent]):
    """GraphSitter representation of String.

    Attributes:
        content: The content of the string
        expressions: embedded expressions in the string, only applicable for templated or formatted strings
    """
    content: str
    content_nodes: Collection[Expression[Editable], Self]
    expressions: list[Expression[Editable]]
    def __init__(self, ts_node: TSNode, file_node_id: NodeId, G: CodebaseGraph, parent: Parent) -> None:
        ...
    
    @reader
    def __eq__(self, other: object) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    
    @property
    @reader
    def with_quotes(self) -> str:
        """Retrieves the string representation with quotation marks.

        Returns:
            str: The string value with its surrounding quotation marks.
        """
        ...
    



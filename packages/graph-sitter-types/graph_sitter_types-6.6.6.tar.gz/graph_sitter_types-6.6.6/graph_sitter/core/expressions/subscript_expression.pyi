"""
This type stub file was generated by pyright.
"""

from typing import Generic, TYPE_CHECKING, TypeVar
from codegen.utils.codemod.codemod_writer_decorators import apidoc, noapidoc
from graph_sitter.core.autocommit import writer
from graph_sitter.core.expressions.expression import Expression
from graph_sitter.core.interfaces.chainable import Chainable
from graph_sitter.core.interfaces.resolvable import Resolvable

if TYPE_CHECKING:
    ...
Object = TypeVar("Object", bound="Chainable")
Index = TypeVar("Index", bound="Expression")
Parent = TypeVar("Parent", bound="Expression")
@apidoc
class SubscriptExpression(Expression[Parent], Resolvable[Parent], Generic[Object, Index, Parent]):
    """Indexing onto an object (Aka using brackets on an object)

    Examples:
     A[]
    """
    object: Object
    indices: list[Index]
    def __init__(self, ts_node, file_node_id, G, parent: Parent) -> None:
        ...
    
    @writer
    @noapidoc
    def rename_if_matching(self, old: str, new: str) -> None:
        ...
    



# -*- coding: utf-8 -*-
"""
Uses PLINK2 to extract variants based on chromosome
and genomic coordinates, given a gene from the
GENCODE v26 database, the same one used for the GTEx v8 data.

@author: ronnieli 
"""

import pandas as pd
import os
import subprocess

def extract_eqtl_genotypes(gene_list, pfile_path=os.path.join(os.getcwd(), 'genotypes'), 
                           window=10_000, genotype_format='binary', plink_cmd='plink2'):
    
    '''
    Extracts candidate eQTL genotypes for a list of genes using PLINK2
    Inputs:
        - gene_list: a list of genes
        - pfile_path: path to the PLINK2 .pgen, .psam, and .pvar files (no file extension).
            Default is genotypes.pgen/.psam/.pvar in the current working directory
        - window: cis window to extract eQTLs. Default is 10,000 base pairs
        - genotype_format: "binary" (0,1 under a dominant model) or "additive" (0,1,2)
        - plink_cmd: the path to the PLINK2 command
    Returns:
        - a pandas DataFrame with extracted and encoded genotypes
    '''
    
    url = 'https://github.com/ronnieli0114/MTClass/raw/refs/heads/main/data/gtex_genes.tsv.gz'
    gene_info = pd.read_csv(url, sep='\t', header=0, index_col='gene_name')

    all_gts = []
    
    for gene in gene_list:
        
        if not gene in gene_info.index.tolist():
            print(f'{gene} not found in metadata. skipping')
            continue

        metadata = gene_info.loc[gene,:]
        chrom = metadata['#CHROM'].replace('chr','')
        start = int(metadata['start']) - window
        end = int(metadata['end']) + window
        gene_id = metadata['gene_id']
        if start < 1:   # no negative genomic coordinates
            start = 1

        out_dir = os.getcwd()
        out_name = os.path.join(out_dir, gene)
        entire_cmd = [plink_cmd, '--pfile', pfile_path, '--chr', chrom, 
                      '--maf', '0.05', '--mind', '0.1', '--geno', '0.1',
                      '--from-bp', str(start), '--to-bp', str(end), 
                      '--recode', 'vcf', '--out', out_name, 
                      '--memory', '9000000']
        
        process = subprocess.Popen(entire_cmd)
        process.communicate()
        
        if process.returncode == 0:
            print(f'extracted variants for gene {gene}', flush=True)
    
            # read the file
            gts = pd.read_csv(os.path.join(out_dir, f"{gene}.vcf"), sep='\t', header=6)
            gts['gene_name'] = gene 
            gts['gene_id'] = gene_id
            discard_cols = ['POS','REF','ALT','QUAL','FILTER','INFO','FORMAT']
            gts = gts.loc[:,[col for col in gts.columns if col not in discard_cols]]
            gts.set_index(['#CHROM','gene_name','gene_id','ID'], inplace=True)
            gts.columns = list(map(lambda x: x.split('_')[0], gts.columns))
            gts = gts.reset_index()
            
            # replace genotypes with binary values
            if genotype_format == 'binary':
                gts.replace(to_replace={'0/0':0, '0/1':1, '1/1':1, './.':9}, inplace=True)
            elif genotype_format == 'additive':
                gts.replace(to_replace={'0/0':0, '0/1':1, '1/1':2, './.':9}, inplace=True)
            else:
                raise ValueError('genotype_format must be "binary" or "additive"')
                      
            # remove files generated by PLINK
            os.remove(os.path.join(out_dir, f'{gene}.log'))
            os.remove(os.path.join(out_dir, f'{gene}.vcf'))
            if os.path.exists(os.path.join(out_dir, f'{gene}.mindrem.id')):
                os.remove(os.path.join(out_dir, f'{gene}.mindrem.id'))
            
            all_gts.append(gts.copy())
        
        else:
            print(f'extracting variants failed for gene {gene}', flush=True)
            print(process.stderr)
            os.remove(os.path.join(out_dir, f'{gene}.log'))
            continue
        
    final_df = pd.concat(all_gts)
    return final_df
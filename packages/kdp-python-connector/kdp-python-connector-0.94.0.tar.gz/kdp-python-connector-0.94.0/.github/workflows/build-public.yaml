name: KDP Python Connector Build (public)

on:
  push:
  repository_dispatch:
    types: [ build-connector, build-public-connector ]


env:
  VERSION: ${{ github.event.client_payload.version || '0.56.dev5' }}
  PACKAGE_NAME: kdp-python-connector
  CODE_ARTIFACT_DOMAIN: kdp
  CODE_ARTIFACT_REPO: kdp-python-connector
  CODE_ARTIFACT_URL: https://us-west-2.console.aws.amazon.com/codesuite/codeartifact/d/365668498277/kdp/r/kdp-python-connector/p/pypi/kdp-python-connector/versions?region=us-west-2&package-versions-meta=eyJmIjp7fSwicyI6e30sIm4iOjIwLCJpIjowfQ
  BRANCH_REF: ${{ github.event.client_payload.pythonConnectorRef || github.ref_name || 'main' }}
  PYTHON_CLIENT_VERSION: ${{ github.event.client_payload.pythonClientVersion }}
  PYTHON_CLIENT_CODE_ARTIFACT_REPO: kdp-api-python-client
  PYTHON_CLIENT_PACKAGE_NAME: kdp-api-python-client


jobs:
  build_public_connector:
    name: Build Public Connector
    runs-on: self-hosted-aws-x86

    strategy:
      matrix:
        python-version: [ '3.9.x' ]

    steps:
      - name: Clear repository
        run: sudo rm -fr $GITHUB_WORKSPACE && mkdir $GITHUB_WORKSPACE

      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_REF }}
          fetch-depth: 0

      - name: Echo Payload
        run: echo "Starting Build of Public Connector with VERSION $VERSION BRANCH $BRANCH_REF"

      - name: Update Python Connector Version Number in pyproject.toml
        run: |
          OLD_VERSION=`cat pyproject.toml | grep ^version | cut -d '"' -f 2`
          OLD_VERSION="\"$OLD_VERSION\""          
          NEW_VERSION="\"${{ env.VERSION }}\""
          echo "Updating OLD_VERSION: $OLD_VERSION to NEW_VERSION: $NEW_VERSION in pyproject.toml"          
          sed -i "s+version = $OLD_VERSION+version = $NEW_VERSION+g" pyproject.toml

      - name: Update Python Client Version in Dependencies in pyproject.toml
        if: ${{ env.PYTHON_CLIENT_VERSION != null || env.PYTHON_CLIENT_VERSION != '' }}
        run: |
          OLD_CLIENT_VERSION=`cat pyproject.toml | grep -F kdp-api-python-client | egrep -o "([0-9]{1,}\.)+[0-9]{1,}"`
          echo "Updating python client OLD_CLIENT_VERSION: $OLD_CLIENT_VERSION to NEW_CLIENT_VERSION: ${{ env.PYTHON_CLIENT_VERSION }} in pyproject.toml"
          sed -i "s+kdp-api-python-client ~= $OLD_CLIENT_VERSION+kdp-api-python-client ~= ${{ env.PYTHON_CLIENT_VERSION }}+g" pyproject.toml 

      - name: Update Python Client Version to use pyproject.toml version if it was not provided
        if: ${{ env.PYTHON_CLIENT_VERSION == null || env.PYTHON_CLIENT_VERSION == '' }}
        run: |
          PREVIOUS_CLIENT_VERSION=`cat pyproject.toml | grep -F kdp-api-python-client | egrep -o "([0-9]{1,}\.)+[0-9]{1,}"`
          echo "PYTHON_CLIENT_VERSION not provided, setting to PREVIOUS_CLIENT_VERSION: $PREVIOUS_CLIENT_VERSION from pyproject.toml"
          echo "PYTHON_CLIENT_VERSION=$PREVIOUS_CLIENT_VERSION" >> $GITHUB_ENV   

      - name: Show python project toml file content after updates
        run: |
          cat pyproject.toml

      - name: Remove and create new requirements.txt
        run: |
          rm requirements.txt
          echo pandas == 1.4.2 > requirements.txt
          echo numpy == 1.22.4 >> requirements.txt
          echo wheel == 0.44.0 >> requirements.txt

      - name: Show file content
        run: |
          cat requirements.txt

      - name: reset pip config to default
        run: |
          pip config list
          pip config --user set global.index-url https://pypi.org/simple
          pip config list    

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: install required dependencies for python client
        run: |
          python -m pip install --force-reinstall --user --upgrade python-dateutil urllib3==2.0.7 pydantic typing-extensions    

      - name: Install kdp-api-python-client package from AWS code artifact
        run: |
          aws codeartifact login --tool pip --domain ${{ env.CODE_ARTIFACT_DOMAIN }} --repository ${{ env.PYTHON_CLIENT_CODE_ARTIFACT_REPO }}
          pip install --no-cache-dir ${{ env.PYTHON_CLIENT_PACKAGE_NAME }}==${{ env.PYTHON_CLIENT_VERSION }}
          pip config list
          pip config --user set global.index-url https://pypi.org/simple
          pip config list          

      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade build    
          pip install twine

      - name: Install Python Connector
        id: install-python-connector
        run: |
          pip install -r requirements.txt
          python -m build --no-isolation
          python -m pip install .
          cd test/; python -m unittest          

      - name: List package versions
        run: |
          aws codeartifact login --tool pip --domain ${{ env.CODE_ARTIFACT_DOMAIN }} --repository ${{ env.PYTHON_CLIENT_CODE_ARTIFACT_REPO }}
          aws codeartifact list-package-versions --domain ${{ env.CODE_ARTIFACT_DOMAIN }} \
          --repository ${{ env.CODE_ARTIFACT_REPO }} --format pypi --package kdp-python-connector
        continue-on-error: true

      - name: Delete pre-existing package of the same version
        if: ${{ matrix.python-version == '3.9.x' }}
        run: |
          aws codeartifact delete-package-versions --domain ${{ env.CODE_ARTIFACT_DOMAIN }} \
          --repository ${{ env.CODE_ARTIFACT_REPO }} --format pypi \
          --package ${{ env.PACKAGE_NAME }} --versions ${{ env.VERSION }}
        continue-on-error: true

      - name: reset pip config to default
        run: |
          pip config list
          pip config --user set global.index-url https://pypi.org/simple
          pip config list      

      - name: Build and publish
        if: ${{ matrix.python-version == '3.9.x' }}
        run: |
          export TWINE_USERNAME=aws
          export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain ${{ env.CODE_ARTIFACT_DOMAIN }} --query authorizationToken --output text`
          export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ env.CODE_ARTIFACT_DOMAIN }} --repository ${{ env.CODE_ARTIFACT_REPO }} --format pypi --query repositoryEndpoint --output text`
          twine upload dist/*

      - name: Add logging to markdown
        if: always()
        run: |
          echo '<h4>Build Settings for python version: ${{ matrix.python-version }}</h4>' >> $GITHUB_STEP_SUMMARY
          echo '<a href="${{ env.CODE_ARTIFACT_URL }}">PYTHON-CONNECTOR AWS CODE ARTIFACT REPO</a>' >> $GITHUB_STEP_SUMMARY
          echo '<br />VERSION: ${{ env.VERSION }} <br />' >> $GITHUB_STEP_SUMMARY
          echo 'PYTHON CONNECTOR BRANCH_NAME: ${{ env.BRANCH_REF }} <br />' >> $GITHUB_STEP_SUMMARY          

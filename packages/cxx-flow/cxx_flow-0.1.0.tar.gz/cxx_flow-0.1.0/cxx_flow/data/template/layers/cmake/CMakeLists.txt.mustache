# Copyright (c) {{COPY.YEAR}} {{COPY.HOLDER}}
# This file is licensed under {{COPY.LICENSE}} license (see LICENSE for details)

cmake_minimum_required (VERSION {{CMAKE_VERSION}})
project ({{PROJECT.NAME}}
  VERSION 0.1.0
  DESCRIPTION "{{PROJECT.DESCRIPTION}}"
  LANGUAGES CXX)

set(PROJECT_VERSION_STABILITY "-alpha.0") # "", or "-alpha", or "-beta", or "-rc.5"
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
  message(STATUS "{{PROJECT.NAME}}: Standalone")
  set({{NAME_PREFIX}}_STANDALONE ON)
  set_property(GLOBAL PROPERTY USE_FOLDERS ON)

  # Standalone will be compiled with C++23 to suppport char8_t,
  # clients need at least 17 to compile (for string_view for instance).
  set(STANDARD 23 CACHE BOOL "Tweak the required standard")
  set(CMAKE_CXX_STANDARD ${STANDARD})
  set(CMAKE_CXX_STANDARD_REQUIRED OFF)
  set(CMAKE_CXX_EXTENSIONS OFF)

  find_package(Python3 COMPONENTS Interpreter REQUIRED)
{{#with_conan}}

  include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
  conan_basic_setup(TARGETS)
{{/with_conan}}
else()
  message(STATUS "{{PROJECT.NAME}}: Subdir")
  set({{NAME_PREFIX}}_STANDALONE OFF)
endif()

set({{NAME_PREFIX}}_TESTING {{${}}{{NAME_PREFIX}}_STANDALONE} CACHE BOOL "Compile and/or run self-tests")
set({{NAME_PREFIX}}_INSTALL {{${}}{{NAME_PREFIX}}_STANDALONE} CACHE BOOL "Install the {{#cmake.application}}application{{/cmake.application}}{{#cmake.library}}library{{/cmake.library}}")
{{#use_tool_coveralls}}

set(COVERALLS_PREFIX {{NAME_PREFIX}}_)
list(APPEND {{NAME_PREFIX}}_COVERALLS_DIRS
  {{INCLUDEDIR}}
  {{SRCDIR}}
)

include(tools/coveralls/Coveralls.cmake)

if ({{NAME_PREFIX}}_COVERALLS AND NOT {{NAME_PREFIX}}_TESTING)
  message(FATAL_ERROR "Coveralls are useless without -D{{NAME_PREFIX}}_TESTING=ON")
endif()
{{/use_tool_coveralls}}
{{#with_platform}}

find_package(PkgConfig)
{{#platform}}
pkg_check_modules({{link}}{{^link}}{{name}}{{/link}} REQUIRED IMPORTED_TARGET {{link}}{{^link}}{{name}}{{/link}})
{{/platform}}
{{/with_platform}}
{{#with_github}}

add_subdirectory(external)
{{/with_github}}
{{#with_tool}}

add_subdirectory(tools)
{{/with_tool}}

# See <https://github.com/lefticus/cppbestpractices/blob/v1.0.0/02-Use_the_Tools_Available.md#compilers>
if (MSVC)
  set({{NAME_PREFIX}}_ADDITIONAL_WALL_FLAGS
      /permissive-
      /Zc:__cplusplus
      /W4
      /w14242
      /w14254
      /w14263
      /w14265
      /w14287
      /we4289
      /w14296
      /w14311
      /w14545
      /w14546
      /w14547
      /w14549
      /w14555
      /w14619
      /w14640
      /w14826
      /w14905
      /w14906
      /w14928
      /w14946)
else()
  set({{NAME_PREFIX}}_ADDITIONAL_WALL_FLAGS
      -Wall -Wextra
      -Wnon-virtual-dtor
      -Wold-style-cast
      -Wcast-align
      -Wunused
      -Woverloaded-virtual
      -Wpedantic
      -Wconversion
      -Wsign-conversion
      -Wnull-dereference
      -Wdouble-promotion
      -Wformat=2
  )
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    list(APPEND {{NAME_PREFIX}}_ADDITIONAL_WALL_FLAGS -fcolor-diagnostics) # -Wlifetime
  else()
    list(APPEND {{NAME_PREFIX}}_ADDITIONAL_WALL_FLAGS
      -fdiagnostics-color
      -Wmisleading-indentation
      -Wduplicated-cond
      -Wduplicated-branches
      -Wlogical-op
      -Wuseless-cast
      )
  endif()
endif()
{{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!
  !!               dirinfo.hh.in generation
  !!               use_lib_lngs
  !!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}}
{{#use_lib_lngs}}

set(SHARE_DIR share/{{PROJECT.NAME}}-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})
{{/use_lib_lngs}}

{{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!
  !!               dirinfo.hh.in generation
  !!               use_lib_lngs
  !!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}}
{{#use_lib_lngs}}
configure_file({{SRCDIR}}/dirinfo{{EXT.hxx}}.in {{SRCDIR}}/dirinfo{{EXT.hxx}} @ONLY)
{{/use_lib_lngs}}
configure_file({{SRCDIR}}/version{{EXT.hxx}}.in {{INCLUDEDIR}}/version{{EXT.hxx}} @ONLY)
{{#use_lib_lngs}}
set(LANGUAGES pl)
{{/use_lib_lngs}}

set(SRCS
{{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!
  !!               main.cc
  !!               cmake.application
  !!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}}
{{#cmake.application}}
  {{SRCDIR}}/main{{EXT.cxx}}
{{/cmake.application}}
{{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!
  !!               strings.(cc/hh)
  !!               use_lib_lngs
  !!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}}
{{#use_lib_lngs}}
  {{SRCDIR}}/strings{{EXT.hxx}}
  {{SRCDIR}}/strings{{EXT.cxx}}
{{/use_lib_lngs}}
  {{SRCDIR}}/version{{EXT.cxx}}
  "${CMAKE_CURRENT_BINARY_DIR}/{{INCLUDEDIR}}/version{{EXT.hxx}}"
{{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!
  !!               dirinfo.hh
  !!               use_lib_lngs
  !!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}}
{{#use_lib_args}}
  "${CMAKE_CURRENT_BINARY_DIR}/{{SRCDIR}}/dirinfo{{EXT.hxx}}"
{{/use_lib_args}}
{{!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !!
  !!               idl2cc/hh
  !!               use_lib_lngs
  !!
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!}}
{{#use_lib_lngs}}
  "${CMAKE_CURRENT_BINARY_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings{{EXT.cxx}}"
  "${CMAKE_CURRENT_BINARY_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings{{EXT.hxx}}"
{{/use_lib_lngs}}
)

{{#use_lib_lngs}}
foreach(LANG ${LANGUAGES})
  set(__po "${CMAKE_CURRENT_SOURCE_DIR}/data/strings/${LANG}.po")
  set(__lng "${CMAKE_CURRENT_BINARY_DIR}/${SHARE_DIR}/{{PROJECT.NAME}}.${LANG}")
  message(STATUS "${__po} -> ${__lng}")
  list(APPEND SRCS ${__po} ${__lng})

  add_custom_command(OUTPUT "${__lng}"
    COMMAND lngs
    ARGS make
      --in "${CMAKE_CURRENT_SOURCE_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings.idl"
      --msgs "${__po}"
      --lang "${CMAKE_CURRENT_SOURCE_DIR}/data/strings/llcc.txt"
      --out "${__lng}"
    DEPENDS ${__po}
    VERBATIM)
endforeach()

add_custom_command(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings{{EXT.cxx}}"
  COMMAND lngs
  ARGS res
{{#use_lib_fmt}}
    --warp
{{/use_lib_fmt}}
    --in "${CMAKE_CURRENT_SOURCE_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings.idl"
    --include "{{PROJECT.NAME}}-strings{{EXT.hxx}}"
    --out "${CMAKE_CURRENT_BINARY_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings{{EXT.cxx}}"
  DEPENDS {{SRCDIR}}/{{PROJECT.NAME}}-strings.idl
  VERBATIM)

add_custom_command(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings{{EXT.hxx}}"
  COMMAND lngs
  ARGS enums
    --resource 
    --in "${CMAKE_CURRENT_SOURCE_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings.idl"
    --out "${CMAKE_CURRENT_BINARY_DIR}/{{SRCDIR}}/{{PROJECT.NAME}}-strings{{EXT.hxx}}"
  DEPENDS {{SRCDIR}}/{{PROJECT.NAME}}-strings.idl
  VERBATIM)
{{/use_lib_lngs}}

{{cmake.cmd}}(${PROJECT_NAME}{{cmake.type}} ${SRCS})

target_compile_options(${PROJECT_NAME} PRIVATE {{${}}{{NAME_PREFIX}}_ADDITIONAL_WALL_FLAGS})
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)
target_include_directories(${PROJECT_NAME}
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_BINARY_DIR}/include
  PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_BINARY_DIR}/src
)
target_link_libraries(${PROJECT_NAME} {{cmake.link_access}}{{!
  CONAN ---------------------------------------------------
}}{{#conan}} CONAN_PKG::{{link}}{{^link}}{{name}}{{/link}}{{/conan}}{{!
  EXTERNAL ------------------------------------------------
}}{{#github}} {{link}}{{^link}}{{repo}}{{/link}}{{/github}}{{!
  PLATFORM ------------------------------------------------
}}{{#platform}} PkgConfig::{{link}}{{^link}}{{name}}{{/link}}{{/platform}})
set_target_properties(${PROJECT_NAME} PROPERTIES
  VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
{{#cmake.dynamic-library}}
  SOVERSION ${PROJECT_VERSION_MAJOR}
{{/cmake.dynamic-library}}
)

##################################################################
##  INSTALL
##################################################################

if ({{NAME_PREFIX}}_INSTALL)
  install(TARGETS ${PROJECT_NAME})
  install(DIRECTORY {{INCLUDEDIR}} DESTINATION include)
  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/{{INCLUDEDIR}}/version{{EXT.hxx}}" DESTINATION {{INCLUDEDIR}})
endif()

##################################################################
##  TESTING
##################################################################

if ({{NAME_PREFIX}}_TESTING)

{{#use_lib_gtest}}
set(EXTERNAL_GTEST ON)
{{/use_lib_gtest}}
{{#use_tool_testing}}
include( ${CMAKE_CURRENT_SOURCE_DIR}/tools/testing/googletest.cmake )

add_test_executable(${PROJECT_NAME}-test {{#use_lib_gtest}}CONAN_PKG {{/use_lib_gtest}}DATA_PATH data{{#cmake.library}} LIBRARIES ${PROJECT_NAME}{{/cmake.library}})
target_compile_options(${PROJECT_NAME}-test PRIVATE ${UTFCONV_ADDITIONAL_WALL_FLAGS})
target_compile_features(${PROJECT_NAME}-test PRIVATE cxx_std_17)
{{/use_tool_testing}}

add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}-test --gtest_filter=*)
endif()

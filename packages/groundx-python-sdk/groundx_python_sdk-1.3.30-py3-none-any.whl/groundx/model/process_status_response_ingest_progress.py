# coding: utf-8

"""
    GroundX APIs

    RAG Made Simple, Secure and Hallucination Free

    The version of the OpenAPI document: 1.3.26
    Contact: support@eyelevel.ai
    Created by: https://www.eyelevel.ai/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from groundx import schemas  # noqa: F401


class ProcessStatusResponseIngestProgress(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def cancelled() -> typing.Type['ProcessStatusResponseIngestProgressCancelled']:
                return ProcessStatusResponseIngestProgressCancelled
        
            @staticmethod
            def complete() -> typing.Type['ProcessStatusResponseIngestProgressComplete']:
                return ProcessStatusResponseIngestProgressComplete
        
            @staticmethod
            def errors() -> typing.Type['ProcessStatusResponseIngestProgressErrors']:
                return ProcessStatusResponseIngestProgressErrors
        
            @staticmethod
            def processing() -> typing.Type['ProcessStatusResponseIngestProgressProcessing']:
                return ProcessStatusResponseIngestProgressProcessing
            __annotations__ = {
                "cancelled": cancelled,
                "complete": complete,
                "errors": errors,
                "processing": processing,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancelled"]) -> 'ProcessStatusResponseIngestProgressCancelled': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complete"]) -> 'ProcessStatusResponseIngestProgressComplete': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> 'ProcessStatusResponseIngestProgressErrors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processing"]) -> 'ProcessStatusResponseIngestProgressProcessing': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cancelled", "complete", "errors", "processing", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancelled"]) -> typing.Union['ProcessStatusResponseIngestProgressCancelled', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complete"]) -> typing.Union['ProcessStatusResponseIngestProgressComplete', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union['ProcessStatusResponseIngestProgressErrors', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processing"]) -> typing.Union['ProcessStatusResponseIngestProgressProcessing', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cancelled", "complete", "errors", "processing", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cancelled: typing.Union['ProcessStatusResponseIngestProgressCancelled', schemas.Unset] = schemas.unset,
        complete: typing.Union['ProcessStatusResponseIngestProgressComplete', schemas.Unset] = schemas.unset,
        errors: typing.Union['ProcessStatusResponseIngestProgressErrors', schemas.Unset] = schemas.unset,
        processing: typing.Union['ProcessStatusResponseIngestProgressProcessing', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessStatusResponseIngestProgress':
        return super().__new__(
            cls,
            *args,
            cancelled=cancelled,
            complete=complete,
            errors=errors,
            processing=processing,
            _configuration=_configuration,
            **kwargs,
        )

from groundx.model.process_status_response_ingest_progress_cancelled import ProcessStatusResponseIngestProgressCancelled
from groundx.model.process_status_response_ingest_progress_complete import ProcessStatusResponseIngestProgressComplete
from groundx.model.process_status_response_ingest_progress_errors import ProcessStatusResponseIngestProgressErrors
from groundx.model.process_status_response_ingest_progress_processing import ProcessStatusResponseIngestProgressProcessing

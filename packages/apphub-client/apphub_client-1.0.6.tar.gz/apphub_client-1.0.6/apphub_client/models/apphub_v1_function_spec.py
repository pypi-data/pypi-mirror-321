# coding: utf-8

"""
    apphub

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from apphub_client.models.apphub_v1_function_spec_environment import ApphubV1FunctionSpecEnvironment
from apphub_client.models.apphub_v1_function_spec_invoke_strategy import ApphubV1FunctionSpecInvokeStrategy
from apphub_client.models.apphub_v1_function_spec_package import ApphubV1FunctionSpecPackage
from apphub_client.models.apphub_v1_function_spec_podspec import ApphubV1FunctionSpecPodspec
from apphub_client.models.apphub_v1_function_spec_resources import ApphubV1FunctionSpecResources
from typing import Optional, Set
from typing_extensions import Self

class ApphubV1FunctionSpec(BaseModel):
    """
    FunctionSpec describes the contents of the function.
    """ # noqa: E501
    invoke_strategy: ApphubV1FunctionSpecInvokeStrategy = Field(alias="InvokeStrategy")
    concurrency: Optional[StrictInt] = Field(default=None, description="Maximum number of pods to be specialized which will serve requests This is optional. If not specified default value will be taken as 500")
    configmaps: Optional[Dict[str, Any]] = Field(default=None, description="Reference to a list of configmaps.")
    environment: ApphubV1FunctionSpecEnvironment
    function_timeout: Optional[StrictInt] = Field(default=None, description="FunctionTimeout provides a maximum amount of duration within which a request for a particular function execution should be complete. This is optional. If not specified default value will be taken as 60s", alias="functionTimeout")
    idletimeout: Optional[StrictInt] = Field(default=None, description="IdleTimeout specifies the length of time that a function is idle before the function pod(s) are eligible for deletion. If no traffic to the function is detected within the idle timeout, the executor will then recycle the function pod(s) to release resources.")
    once_only: Optional[StrictBool] = Field(default=None, description="OnceOnly specifies if specialized pod will serve exactly one request in its lifetime and would be garbage collected after serving that one request This is optional. If not specified default value will be taken as false", alias="onceOnly")
    package: ApphubV1FunctionSpecPackage
    podspec: Optional[ApphubV1FunctionSpecPodspec] = None
    requests_per_pod: Optional[StrictInt] = Field(default=None, description="RequestsPerPod indicates the maximum number of concurrent requests that can be served by a specialized pod This is optional. If not specified default value will be taken as 1", alias="requestsPerPod")
    resources: Optional[ApphubV1FunctionSpecResources] = None
    retain_pods: Optional[StrictInt] = Field(default=None, description="RetainPods specifies the number of specialized pods that should be retained after serving requests This is optional. If not specified default value will be taken as 0", alias="retainPods")
    secrets: Optional[Dict[str, Any]] = Field(default=None, description="Reference to a list of secrets.")
    __properties: ClassVar[List[str]] = ["InvokeStrategy", "concurrency", "configmaps", "environment", "functionTimeout", "idletimeout", "onceOnly", "package", "podspec", "requestsPerPod", "resources", "retainPods", "secrets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApphubV1FunctionSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invoke_strategy
        if self.invoke_strategy:
            _dict['InvokeStrategy'] = self.invoke_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of package
        if self.package:
            _dict['package'] = self.package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of podspec
        if self.podspec:
            _dict['podspec'] = self.podspec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApphubV1FunctionSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "InvokeStrategy": ApphubV1FunctionSpecInvokeStrategy.from_dict(obj["InvokeStrategy"]) if obj.get("InvokeStrategy") is not None else None,
            "concurrency": obj.get("concurrency"),
            "configmaps": obj.get("configmaps"),
            "environment": ApphubV1FunctionSpecEnvironment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "functionTimeout": obj.get("functionTimeout"),
            "idletimeout": obj.get("idletimeout"),
            "onceOnly": obj.get("onceOnly"),
            "package": ApphubV1FunctionSpecPackage.from_dict(obj["package"]) if obj.get("package") is not None else None,
            "podspec": ApphubV1FunctionSpecPodspec.from_dict(obj["podspec"]) if obj.get("podspec") is not None else None,
            "requestsPerPod": obj.get("requestsPerPod"),
            "resources": ApphubV1FunctionSpecResources.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "retainPods": obj.get("retainPods"),
            "secrets": obj.get("secrets")
        })
        return _obj



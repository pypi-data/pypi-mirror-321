# coding: utf-8

"""
    apphub

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_aws_elastic_block_store import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAwsElasticBlockStore
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_azure_disk import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAzureDisk
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_azure_file import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAzureFile
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_cephfs import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCephfs
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_cinder import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCinder
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_config_map import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerConfigMap
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_csi import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCsi
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_downward_api import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerDownwardAPI
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_empty_dir import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerEmptyDir
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_ephemeral import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerEphemeral
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_fc import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFc
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_flex_volume import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFlexVolume
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_flocker import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFlocker
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_gce_persistent_disk import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGcePersistentDisk
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_git_repo import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGitRepo
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_glusterfs import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGlusterfs
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_host_path import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerHostPath
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_image import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerImage
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_iscsi import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerIscsi
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_nfs import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerNfs
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_persistent_volume_claim import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPersistentVolumeClaim
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_photon_persistent_disk import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPhotonPersistentDisk
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_portworx_volume import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPortworxVolume
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_projected import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerProjected
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_quobyte import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerQuobyte
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_rbd import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerRbd
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_scale_io import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerScaleIO
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_secret import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerSecret
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_storageos import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerStorageos
from apphub_client.models.apphub_v1_environment_spec_builder_podspec_volumes_inner_vsphere_volume import ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerVsphereVolume
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApphubV1EnvironmentSpecBuilderPodspecVolumesInner(BaseModel):
    """
    Volume represents a named volume in a pod that may be accessed by any container in the pod.
    """ # noqa: E501
    aws_elastic_block_store: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAwsElasticBlockStore] = Field(default=None, alias="awsElasticBlockStore")
    azure_disk: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAzureDisk] = Field(default=None, alias="azureDisk")
    azure_file: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAzureFile] = Field(default=None, alias="azureFile")
    cephfs: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCephfs] = None
    cinder: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCinder] = None
    config_map: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerConfigMap] = Field(default=None, alias="configMap")
    csi: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCsi] = None
    downward_api: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerDownwardAPI] = Field(default=None, alias="downwardAPI")
    empty_dir: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerEmptyDir] = Field(default=None, alias="emptyDir")
    ephemeral: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerEphemeral] = None
    fc: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFc] = None
    flex_volume: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFlexVolume] = Field(default=None, alias="flexVolume")
    flocker: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFlocker] = None
    gce_persistent_disk: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGcePersistentDisk] = Field(default=None, alias="gcePersistentDisk")
    git_repo: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGitRepo] = Field(default=None, alias="gitRepo")
    glusterfs: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGlusterfs] = None
    host_path: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerHostPath] = Field(default=None, alias="hostPath")
    image: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerImage] = None
    iscsi: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerIscsi] = None
    name: StrictStr = Field(description="name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names")
    nfs: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerNfs] = None
    persistent_volume_claim: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPersistentVolumeClaim] = Field(default=None, alias="persistentVolumeClaim")
    photon_persistent_disk: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPhotonPersistentDisk] = Field(default=None, alias="photonPersistentDisk")
    portworx_volume: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPortworxVolume] = Field(default=None, alias="portworxVolume")
    projected: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerProjected] = None
    quobyte: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerQuobyte] = None
    rbd: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerRbd] = None
    scale_io: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerScaleIO] = Field(default=None, alias="scaleIO")
    secret: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerSecret] = None
    storageos: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerStorageos] = None
    vsphere_volume: Optional[ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerVsphereVolume] = Field(default=None, alias="vsphereVolume")
    __properties: ClassVar[List[str]] = ["awsElasticBlockStore", "azureDisk", "azureFile", "cephfs", "cinder", "configMap", "csi", "downwardAPI", "emptyDir", "ephemeral", "fc", "flexVolume", "flocker", "gcePersistentDisk", "gitRepo", "glusterfs", "hostPath", "image", "iscsi", "name", "nfs", "persistentVolumeClaim", "photonPersistentDisk", "portworxVolume", "projected", "quobyte", "rbd", "scaleIO", "secret", "storageos", "vsphereVolume"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApphubV1EnvironmentSpecBuilderPodspecVolumesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_elastic_block_store
        if self.aws_elastic_block_store:
            _dict['awsElasticBlockStore'] = self.aws_elastic_block_store.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_disk
        if self.azure_disk:
            _dict['azureDisk'] = self.azure_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_file
        if self.azure_file:
            _dict['azureFile'] = self.azure_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cephfs
        if self.cephfs:
            _dict['cephfs'] = self.cephfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cinder
        if self.cinder:
            _dict['cinder'] = self.cinder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config_map
        if self.config_map:
            _dict['configMap'] = self.config_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of csi
        if self.csi:
            _dict['csi'] = self.csi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of downward_api
        if self.downward_api:
            _dict['downwardAPI'] = self.downward_api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of empty_dir
        if self.empty_dir:
            _dict['emptyDir'] = self.empty_dir.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ephemeral
        if self.ephemeral:
            _dict['ephemeral'] = self.ephemeral.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fc
        if self.fc:
            _dict['fc'] = self.fc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flex_volume
        if self.flex_volume:
            _dict['flexVolume'] = self.flex_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flocker
        if self.flocker:
            _dict['flocker'] = self.flocker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gce_persistent_disk
        if self.gce_persistent_disk:
            _dict['gcePersistentDisk'] = self.gce_persistent_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git_repo
        if self.git_repo:
            _dict['gitRepo'] = self.git_repo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of glusterfs
        if self.glusterfs:
            _dict['glusterfs'] = self.glusterfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_path
        if self.host_path:
            _dict['hostPath'] = self.host_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iscsi
        if self.iscsi:
            _dict['iscsi'] = self.iscsi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nfs
        if self.nfs:
            _dict['nfs'] = self.nfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of persistent_volume_claim
        if self.persistent_volume_claim:
            _dict['persistentVolumeClaim'] = self.persistent_volume_claim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photon_persistent_disk
        if self.photon_persistent_disk:
            _dict['photonPersistentDisk'] = self.photon_persistent_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of portworx_volume
        if self.portworx_volume:
            _dict['portworxVolume'] = self.portworx_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of projected
        if self.projected:
            _dict['projected'] = self.projected.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quobyte
        if self.quobyte:
            _dict['quobyte'] = self.quobyte.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rbd
        if self.rbd:
            _dict['rbd'] = self.rbd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_io
        if self.scale_io:
            _dict['scaleIO'] = self.scale_io.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret
        if self.secret:
            _dict['secret'] = self.secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storageos
        if self.storageos:
            _dict['storageos'] = self.storageos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vsphere_volume
        if self.vsphere_volume:
            _dict['vsphereVolume'] = self.vsphere_volume.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApphubV1EnvironmentSpecBuilderPodspecVolumesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsElasticBlockStore": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAwsElasticBlockStore.from_dict(obj.get("awsElasticBlockStore")) if obj.get("awsElasticBlockStore") is not None else None,
            "azureDisk": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAzureDisk.from_dict(obj.get("azureDisk")) if obj.get("azureDisk") is not None else None,
            "azureFile": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerAzureFile.from_dict(obj.get("azureFile")) if obj.get("azureFile") is not None else None,
            "cephfs": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCephfs.from_dict(obj.get("cephfs")) if obj.get("cephfs") is not None else None,
            "cinder": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCinder.from_dict(obj.get("cinder")) if obj.get("cinder") is not None else None,
            "configMap": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerConfigMap.from_dict(obj.get("configMap")) if obj.get("configMap") is not None else None,
            "csi": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerCsi.from_dict(obj.get("csi")) if obj.get("csi") is not None else None,
            "downwardAPI": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerDownwardAPI.from_dict(obj.get("downwardAPI")) if obj.get("downwardAPI") is not None else None,
            "emptyDir": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerEmptyDir.from_dict(obj.get("emptyDir")) if obj.get("emptyDir") is not None else None,
            "ephemeral": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerEphemeral.from_dict(obj.get("ephemeral")) if obj.get("ephemeral") is not None else None,
            "fc": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFc.from_dict(obj.get("fc")) if obj.get("fc") is not None else None,
            "flexVolume": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFlexVolume.from_dict(obj.get("flexVolume")) if obj.get("flexVolume") is not None else None,
            "flocker": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerFlocker.from_dict(obj.get("flocker")) if obj.get("flocker") is not None else None,
            "gcePersistentDisk": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGcePersistentDisk.from_dict(obj.get("gcePersistentDisk")) if obj.get("gcePersistentDisk") is not None else None,
            "gitRepo": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGitRepo.from_dict(obj.get("gitRepo")) if obj.get("gitRepo") is not None else None,
            "glusterfs": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerGlusterfs.from_dict(obj.get("glusterfs")) if obj.get("glusterfs") is not None else None,
            "hostPath": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerHostPath.from_dict(obj.get("hostPath")) if obj.get("hostPath") is not None else None,
            "image": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerImage.from_dict(obj.get("image")) if obj.get("image") is not None else None,
            "iscsi": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerIscsi.from_dict(obj.get("iscsi")) if obj.get("iscsi") is not None else None,
            "name": obj.get("name"),
            "nfs": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerNfs.from_dict(obj.get("nfs")) if obj.get("nfs") is not None else None,
            "persistentVolumeClaim": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPersistentVolumeClaim.from_dict(obj.get("persistentVolumeClaim")) if obj.get("persistentVolumeClaim") is not None else None,
            "photonPersistentDisk": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPhotonPersistentDisk.from_dict(obj.get("photonPersistentDisk")) if obj.get("photonPersistentDisk") is not None else None,
            "portworxVolume": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerPortworxVolume.from_dict(obj.get("portworxVolume")) if obj.get("portworxVolume") is not None else None,
            "projected": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerProjected.from_dict(obj.get("projected")) if obj.get("projected") is not None else None,
            "quobyte": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerQuobyte.from_dict(obj.get("quobyte")) if obj.get("quobyte") is not None else None,
            "rbd": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerRbd.from_dict(obj.get("rbd")) if obj.get("rbd") is not None else None,
            "scaleIO": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerScaleIO.from_dict(obj.get("scaleIO")) if obj.get("scaleIO") is not None else None,
            "secret": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerSecret.from_dict(obj.get("secret")) if obj.get("secret") is not None else None,
            "storageos": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerStorageos.from_dict(obj.get("storageos")) if obj.get("storageos") is not None else None,
            "vsphereVolume": ApphubV1EnvironmentSpecBuilderPodspecVolumesInnerVsphereVolume.from_dict(obj.get("vsphereVolume")) if obj.get("vsphereVolume") is not None else None
        })
        return _obj



Metadata-Version: 2.2
Name: ixp_pipeline
Version: 0.1.0
Summary: A Python library for building pipelines with ixp_generics
Author-email: "John S. Azariah" <john.azariah@gmail.com>
License: Creative Commons Legal Code
        
        CC0 1.0 Universal
        
            CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
            LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
            ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
            INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
            REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
            PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
            THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
            HEREUNDER.
        
        Statement of Purpose
        
        The laws of most jurisdictions throughout the world automatically confer
        exclusive Copyright and Related Rights (defined below) upon the creator
        and subsequent owner(s) (each and all, an "owner") of an original work of
        authorship and/or a database (each, a "Work").
        
        Certain owners wish to permanently relinquish those rights to a Work for
        the purpose of contributing to a commons of creative, cultural and
        scientific works ("Commons") that the public can reliably and without fear
        of later claims of infringement build upon, modify, incorporate in other
        works, reuse and redistribute as freely as possible in any form whatsoever
        and for any purposes, including without limitation commercial purposes.
        These owners may contribute to the Commons to promote the ideal of a free
        culture and the further production of creative, cultural and scientific
        works, or to gain reputation or greater distribution for their Work in
        part through the use and efforts of others.
        
        For these and/or other purposes and motivations, and without any
        expectation of additional consideration or compensation, the person
        associating CC0 with a Work (the "Affirmer"), to the extent that he or she
        is an owner of Copyright and Related Rights in the Work, voluntarily
        elects to apply CC0 to the Work and publicly distribute the Work under its
        terms, with knowledge of his or her Copyright and Related Rights in the
        Work and the meaning and intended legal effect of CC0 on those rights.
        
        1. Copyright and Related Rights. A Work made available under CC0 may be
        protected by copyright and related or neighboring rights ("Copyright and
        Related Rights"). Copyright and Related Rights include, but are not
        limited to, the following:
        
          i. the right to reproduce, adapt, distribute, perform, display,
             communicate, and translate a Work;
         ii. moral rights retained by the original author(s) and/or performer(s);
        iii. publicity and privacy rights pertaining to a person's image or
             likeness depicted in a Work;
         iv. rights protecting against unfair competition in regards to a Work,
             subject to the limitations in paragraph 4(a), below;
          v. rights protecting the extraction, dissemination, use and reuse of data
             in a Work;
         vi. database rights (such as those arising under Directive 96/9/EC of the
             European Parliament and of the Council of 11 March 1996 on the legal
             protection of databases, and under any national implementation
             thereof, including any amended or successor version of such
             directive); and
        vii. other similar, equivalent or corresponding rights throughout the
             world based on applicable law or treaty, and any national
             implementations thereof.
        
        2. Waiver. To the greatest extent permitted by, but not in contravention
        of, applicable law, Affirmer hereby overtly, fully, permanently,
        irrevocably and unconditionally waives, abandons, and surrenders all of
        Affirmer's Copyright and Related Rights and associated claims and causes
        of action, whether now known or unknown (including existing as well as
        future claims and causes of action), in the Work (i) in all territories
        worldwide, (ii) for the maximum duration provided by applicable law or
        treaty (including future time extensions), (iii) in any current or future
        medium and for any number of copies, and (iv) for any purpose whatsoever,
        including without limitation commercial, advertising or promotional
        purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
        member of the public at large and to the detriment of Affirmer's heirs and
        successors, fully intending that such Waiver shall not be subject to
        revocation, rescission, cancellation, termination, or any other legal or
        equitable action to disrupt the quiet enjoyment of the Work by the public
        as contemplated by Affirmer's express Statement of Purpose.
        
        3. Public License Fallback. Should any part of the Waiver for any reason
        be judged legally invalid or ineffective under applicable law, then the
        Waiver shall be preserved to the maximum extent permitted taking into
        account Affirmer's express Statement of Purpose. In addition, to the
        extent the Waiver is so judged Affirmer hereby grants to each affected
        person a royalty-free, non transferable, non sublicensable, non exclusive,
        irrevocable and unconditional license to exercise Affirmer's Copyright and
        Related Rights in the Work (i) in all territories worldwide, (ii) for the
        maximum duration provided by applicable law or treaty (including future
        time extensions), (iii) in any current or future medium and for any number
        of copies, and (iv) for any purpose whatsoever, including without
        limitation commercial, advertising or promotional purposes (the
        "License"). The License shall be deemed effective as of the date CC0 was
        applied by Affirmer to the Work. Should any part of the License for any
        reason be judged legally invalid or ineffective under applicable law, such
        partial invalidity or ineffectiveness shall not invalidate the remainder
        of the License, and in such case Affirmer hereby affirms that he or she
        will not (i) exercise any of his or her remaining Copyright and Related
        Rights in the Work or (ii) assert any associated claims and causes of
        action with respect to the Work, in either case contrary to Affirmer's
        express Statement of Purpose.
        
        4. Limitations and Disclaimers.
        
         a. No trademark or patent rights held by Affirmer are waived, abandoned,
            surrendered, licensed or otherwise affected by this document.
         b. Affirmer offers the Work as-is and makes no representations or
            warranties of any kind concerning the Work, express, implied,
            statutory or otherwise, including without limitation warranties of
            title, merchantability, fitness for a particular purpose, non
            infringement, or the absence of latent or other defects, accuracy, or
            the present or absence of errors, whether or not discoverable, all to
            the greatest extent permissible under applicable law.
         c. Affirmer disclaims responsibility for clearing rights of other persons
            that may apply to the Work or any use thereof, including without
            limitation any person's Copyright and Related Rights in the Work.
            Further, Affirmer disclaims responsibility for obtaining any necessary
            consents, permissions or other rights required for any use of the
            Work.
         d. Affirmer understands and acknowledges that Creative Commons is not a
            party to this document and has no duty or obligation with respect to
            this CC0 or use of the Work.
        
Keywords: pipeline,workflow,generics
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ixp_generics>=0.1.0


# Pipeline Framework Documentation

## Overview
This framework provides a modular and extensible pipeline structure for transforming data through a series of stages. Each stage is responsible for producing, transforming, and consuming data as needed. The framework includes base classes for pipelines and stages, along with contextual processing capabilities.

---

## Modules

### **PipelineStage**
A generic class representing a single stage in the pipeline. This class provides flexibility to define various types of stages such as producing data, transforming data, or consuming data, and can be used in isolation or as part of a larger pipeline.

#### Attributes:
- **produce**: A callable that produces an iterable of results. If `produce` is not specified, this step is skipped.
- **transform**: A callable that accepts an input of type `TStageInput` and returns an iterable of `TStageResult`. This is typically used to apply a transformation to the input data.
- **consume**: A callable that processes each result produced or transformed by the stage. If specified, `consume` is applied to all results in the stage.

#### Methods:
- **run(input: TStageInput)**: Executes the stage by:
  1. Calling `produce` (if defined) to generate initial results.
  2. Applying the `transform` function to the input data.
  3. Combining the results of `produce` and `transform`. The `produce` values will precede the `transform` values.
  4. Optionally passing the combined results to the `consume` function.

  Returns an iterable of results.

- **__call__(input: TStageInput)**: A shorthand for invoking the `run` method, enabling the stage to be used like a function.

#### Key Behaviors:
- If both `produce` and `transform` are defined, their results are combined.
- If neither `produce` nor `transform` is defined, the input is returned as the result.
- The `consume` function is applied to all results but does not alter the returned output.

#### Example:
```python
# Define a stage that produces static values and applies a transformation
stage = PipelineStage(
    produce=lambda: [1, 2, 3],
    transform=lambda x: [x * 2],
    consume=lambda r: print(f"Consumed: {r}")
)

output = stage(5)  # Produces: [1, 2, 3], Transforms: [10], Output: [1, 2, 3, 10]
# Output to consume: Consumed: 1, Consumed: 2, Consumed: 3, Consumed: 10
```

#### Use Cases:
- **Data Generation**: Use `produce` to create an initial dataset, e.g., reading files or fetching data from an API.
- **Data Transformation**: Apply `transform` to modify or filter the input data.
- **Data Consumption**: Use `consume` for side effects such as logging, storing results, or triggering downstream actions.

---

### **IdentityStage**
A subclass of `PipelineStage` that passes input through without modification.

#### Attributes:
- **transform**: Defaults to a lambda function that returns the input as an iterable.

#### Example:
```python
identity = IdentityStage()
output = identity(5)  # Output: [5]
```

---

### **Pipeline**
A sequence of stages that progressively transforms input data.

#### Attributes:
- **stages**: A list of `PipelineStage` instances.

#### Methods:
- **__init__(stages: Iterable[PipelineStage])**: Validates and initializes the pipeline stages.
- **run(input: TPipelineInput)**: Executes the pipeline, passing data through each stage.
- **__call__(input: TPipelineInput)**: Alias for `run`.

#### Key Behaviors:
- Ensures type compatibility between stages during initialization.
- Processes input iteratively through all stages, allowing intermediate results to flow to subsequent stages.
- Returns a flattened list of results after processing through all stages.

#### Example:
```python
pipeline = Pipeline(stages=[IdentityStage()])
output = pipeline.run(5)  # Output: [5]
```

---

### **ContextualPipelineStage**
An abstract base class for a pipeline stage that operates within a specific context. This is particularly useful for scenarios where stages need access to shared state or resources.

#### Attributes:
- **stage**: The `PipelineStage` to execute.
- **stage_index**: The index of the stage in the pipeline.
- **stage_count**: The total number of stages in the pipeline.

#### Methods:
- **generate_inputs(context: TPipelineContext)**: Abstract method to generate inputs from the context. Subclasses must implement this to define how input data is sourced.
- **process_output(context: TPipelineContext, result: Any, result_index: int, result_count: int)**: Abstract method to process outputs within the context. Subclasses must implement this to define how results are handled or stored.
- **run(context: TPipelineContext)**: Executes the stage within the given context by sourcing inputs, processing them through the stage, and handling outputs.
- **__call__(context: TPipelineContext)**: Alias for `run`.

#### Key Behaviors:
- Orchestrates the interaction between the stage and the shared context.
- Supports fine-grained control over how inputs are sourced and outputs are processed.

#### Example:
```python
class CustomContextualStage(ContextualPipelineStage):
    def generate_inputs(self, context):
        return context['data']

    def process_output(self, context, result, result_index, result_count):
        context['results'].append(result)
```

---

### **ContextualPipeline**
An abstract base class for pipelines that operate within a specific context. Designed for use cases where shared state or resources must be managed across multiple stages.

#### Attributes:
- **pipeline**: The `Pipeline` instance to execute.
- **context**: The context object shared across the pipeline stages.

#### Methods:
- **lift(stage: PipelineStage, stage_index: int, stage_count: int)**: Abstract method to lift a stage into a contextual stage. This is used to wrap regular pipeline stages with context-awareness.
- **run()**: Executes all stages in the pipeline within the given context, managing the flow of data and results between stages.

#### Key Behaviors:
- Provides a higher-level abstraction over standard pipelines by incorporating shared state.
- Facilitates the extension of pipeline functionality for domain-specific use cases, such as batch processing or distributed computation.

#### Example:
```python
class MyContextualPipeline(ContextualPipeline):
    def lift(self, stage, stage_index, stage_count):
        return CustomContextualStage(stage=stage, stage_index=stage_index, stage_count=stage_count)
```

---

### **FileSystemContext**
A data class that represents the file system context used in a pipeline. Encapsulates information about the root directory for file-based operations.

#### Attributes:
- **document_root**: The root directory for input and output operations.

#### Key Behaviors:
- Acts as a shared resource for file system-based pipelines, ensuring consistent paths for input and output.

#### Example:
```python
context = FileSystemContext(document_root="/data")
```

---

### **FileSystemCoupledPipelineStage**
A contextual pipeline stage tailored for file system operations. Extends the functionality of `ContextualPipelineStage` to handle file-based inputs and outputs.

#### Attributes:
- **input_subfolder**: The input folder name for the stage.
- **output_subfolder**: The output folder name for the stage.
- **json_decoder**: A JSON decoder for reading input files.
- **json_encoder**: A JSON encoder for writing output files.

#### Methods:
- **__post_init__()**: Initializes default subfolder names and JSON encoders/decoders if not provided.
- **generate_inputs(context: FileSystemContext)**: Reads and decodes JSON files from the input folder.
- **process_output(context: FileSystemContext, result: Any, result_index: int, result_count: int)**: Writes JSON files to the output folder based on the result index.

#### Key Behaviors:
- Automates the reading and writing of JSON files for pipeline stages.
- Supports configurable subfolder structures for stage-specific inputs and outputs.

#### Example:
```python
context = FileSystemContext(document_root="/data")
stage = FileSystemCoupledPipelineStage(stage=my_stage, stage_index=0, stage_count=1)
inputs = list(stage.generate_inputs(context))
stage.process_output(context, result=inputs[0], result_index=1, result_count=1)
```

---

### **FileSystemCoupledPipeline**
A contextual pipeline designed to operate with file system inputs and outputs. Facilitates the integration of pipelines with structured file storage.

#### Attributes:
- **context**: A `FileSystemContext` instance containing the document root.
- **pipeline**: The base pipeline to execute.

#### Methods:
- **lift(stage: Pipeline[Any, Any], stage_index: int, stage_count: int)**: Converts a base pipeline stage into a `FileSystemCoupledPipelineStage`.
- **__init__(document_root: str, pipeline: Pipeline[Any, Any])**: Initializes the pipeline with a document root and stages.

#### Key Behaviors:
- Provides a seamless interface for pipelines that require file-based inputs and outputs.
- Ensures consistent handling of file paths and operations across stages.

#### Example:
```python
pipeline = Pipeline(stages=[IdentityStage()])
fs_pipeline = FileSystemCoupledPipeline(document_root="/data", pipeline=pipeline)
fs_pipeline.run()
```

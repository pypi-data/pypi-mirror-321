# coding: utf-8

"""
    apphub

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from fission_client.models.apphub_v1_package import ApphubV1Package

class TestApphubV1Package(unittest.TestCase):
    """ApphubV1Package unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApphubV1Package:
        """Test ApphubV1Package
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApphubV1Package`
        """
        model = ApphubV1Package()
        if include_optional:
            return ApphubV1Package(
                api_version = '',
                kind = '',
                metadata = fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = fission_client.models.apphub_v1_package_spec.apphub_v1_Package_spec(
                    buildcmd = '', 
                    deployment = fission_client.models.apphub_v1_package_spec_deployment.apphub_v1_Package_spec_deployment(
                        checksum = fission_client.models.apphub_v1_package_spec_deployment_checksum.apphub_v1_Package_spec_deployment_checksum(
                            sum = '', 
                            type = '', ), 
                        literal = 'YQ==', 
                        type = '', 
                        url = '', ), 
                    environment = fission_client.models.apphub_v1_package_spec_environment.apphub_v1_Package_spec_environment(
                        name = '', 
                        namespace = '', ), 
                    source = fission_client.models.apphub_v1_package_spec_source.apphub_v1_Package_spec_source(
                        literal = 'YQ==', 
                        type = '', 
                        url = '', ), ),
                status = fission_client.models.apphub_v1_package_status.apphub_v1_Package_status(
                    buildlog = '', 
                    buildstatus = '', 
                    last_update_timestamp = fission_client.models.last_update_timestamp.lastUpdateTimestamp(), )
            )
        else:
            return ApphubV1Package(
                metadata = fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = fission_client.models.apphub_v1_package_spec.apphub_v1_Package_spec(
                    buildcmd = '', 
                    deployment = fission_client.models.apphub_v1_package_spec_deployment.apphub_v1_Package_spec_deployment(
                        checksum = fission_client.models.apphub_v1_package_spec_deployment_checksum.apphub_v1_Package_spec_deployment_checksum(
                            sum = '', 
                            type = '', ), 
                        literal = 'YQ==', 
                        type = '', 
                        url = '', ), 
                    environment = fission_client.models.apphub_v1_package_spec_environment.apphub_v1_Package_spec_environment(
                        name = '', 
                        namespace = '', ), 
                    source = fission_client.models.apphub_v1_package_spec_source.apphub_v1_Package_spec_source(
                        literal = 'YQ==', 
                        type = '', 
                        url = '', ), ),
        )
        """

    def testApphubV1Package(self):
        """Test ApphubV1Package"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

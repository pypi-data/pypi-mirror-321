import ctypes
from collections.abc import Callable
from collections.abc import Iterable
from types import TracebackType
from typing import TYPE_CHECKING
from typing import Generic
from typing import Self
from typing import TypeVar
import numpy as np
from pyautd3.autd_error import InvalidDatagramTypeError
from pyautd3.autd_error import KeyAlreadyExistsError
from pyautd3.controller.timer import SpinSleeper
from pyautd3.controller.timer import TimerStrategy
from pyautd3.derive import builder
from pyautd3.driver.autd3_device import AUTD3
from pyautd3.driver.datagram import Datagram
from pyautd3.driver.firmware.fpga import FPGAState
from pyautd3.driver.firmware_version import FirmwareInfo
from pyautd3.driver.geometry import Device
from pyautd3.driver.geometry import Geometry
from pyautd3.driver.link import Link
from pyautd3.driver.link import LinkBuilder
from pyautd3.native_methods.autd3capi import ControllerBuilderPtr
from pyautd3.native_methods.autd3capi import ControllerPtr
from pyautd3.native_methods.autd3capi import NativeMethods as Base
from pyautd3.native_methods.autd3capi_driver import DatagramPtr
from pyautd3.native_methods.autd3capi_driver import GeometryPtr
from pyautd3.native_methods.autd3capi_driver import TimerStrategyWrap
from pyautd3.native_methods.structs import Point3
from pyautd3.native_methods.structs import Quaternion
from pyautd3.native_methods.utils import _validate_ptr
from pyautd3.native_methods.utils import _validate_status
from pyautd3.utils import Duration
from pyautd3.utils.duration import into_option_duration
from pyautd3.emulator import Emulator
from pyautd3.emulator import Recorder

K = TypeVar("K")
L = TypeVar("L", bound=Link)

class _Builder():
    devices: list[AUTD3]
    def __init__(self: _Builder, iterable: Iterable[AUTD3]) -> None: ...
    def _ptr(self: _Builder, ) -> ControllerBuilderPtr: ...
    def open(self: _Builder, link: LinkBuilder[L]) -> Controller[L]: ...
    def into_emulator(self: _Builder, ) -> Emulator: ...
    def with_default_parallel_threshold(self: _Builder, default_parallel_threshold: int) -> _Builder: ...
    def with_default_timeout(self: _Builder, default_timeout: Duration) -> _Builder: ...
    def with_send_interval(self: _Builder, send_interval: Duration) -> _Builder: ...
    def with_receive_interval(self: _Builder, receive_interval: Duration) -> _Builder: ...
    def with_timer_strategy(self: _Builder, timer_strategy: TimerStrategyWrap) -> _Builder: ...
    @property
    def default_parallel_threshold(self: _Builder) -> int: ...
    @property
    def default_timeout(self: _Builder) -> Duration: ...
    @property
    def send_interval(self: _Builder) -> Duration: ...
    @property
    def receive_interval(self: _Builder) -> Duration: ...
    @property
    def timer_strategy(self: _Builder) -> TimerStrategyWrap: ...

class _GroupGuard(Generic[K]):
    _controller: Controller
    _keys: list[int]
    _datagrams: list[DatagramPtr]
    _keymap: dict[K, int]
    _k: int
    def __init__(self: _GroupGuard[K], group_map: Callable[[Device], K | None], controller: Controller) -> None: ...
    def set(self: _GroupGuard[K], key: K, d: Datagram | tuple[Datagram, Datagram]) -> _GroupGuard[K]: ...
    def send(self: _GroupGuard[K], ) -> None: ...

class Controller(Geometry, Generic[L]):
    _ptr: ControllerPtr
    _link: L
    _disposed: bool
    def __init__(self: Controller[L], geometry: GeometryPtr, ptr: ControllerPtr, link: L) -> None: ...
    def __del__(self: Controller[L], ) -> None: ...
    def _dispose(self: Controller[L], ) -> None: ...
    def __enter__(self: Controller[L], ) -> Controller[L]: ...
    def __exit__(self: Controller[L], _exc_type: type[BaseException] | None, _exc_value: BaseException | None, _traceback: TracebackType | None) -> None: ...
    def firmware_version(self: Controller[L], ) -> list[FirmwareInfo]: ...
    def close(self: Controller[L], ) -> None: ...
    def fpga_state(self: Controller[L], ) -> list[FPGAState | None]: ...
    def send(self: Controller[L], d: Datagram | tuple[Datagram, Datagram]) -> None: ...
    def group(self: Controller[L], group_map: Callable[[Device], K | None]) -> _GroupGuard: ...
    def tick(self: Controller[L], tick: Duration) -> None: ...
    @staticmethod
    def builder(iterable: Iterable[AUTD3]) -> _Builder: ...
    @staticmethod
    def _open_impl(builder: ControllerBuilderPtr, link_builder: LinkBuilder[L], timeout: Duration | None) -> Controller[L]: ...
    @property
    def link(self: Controller[L]) -> L: ...
    @property
    def geometry(self: Controller[L]) -> Geometry: ...

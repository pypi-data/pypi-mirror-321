from typing import Dict, Set, Optional
from pathlib import Path
import graphviz
import os

from .core import VCSRepository


class RepoGraph:
    def __init__(self, repo: VCSRepository):
        self.repo = repo
        
    def create_directory_graph(self, output_path: str, format: str = 'png', ignore_patterns: Set[str] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        
        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞—Ñ–æ–º
            format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (png, svg, pdf –∏ —Ç.–¥.)
            ignore_patterns: –ù–∞–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ
        dot = graphviz.Digraph(
            'repo_structure',
            comment='Repository Structure',
            format=format,
            node_attr={'shape': 'box', 'style': 'rounded'}
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        root_path = str(self.repo.root_path)
        root_name = os.path.basename(root_path) or 'root'
        dot.node('root', root_name, shape='folder')
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
        added_nodes = {'root': root_name}
        
        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for path in self.repo.root_path.rglob('*'):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .hrs –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if '.hrs' in path.parts:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if ignore_patterns:
                skip = False
                rel_path = str(path.relative_to(self.repo.root_path))
                for pattern in ignore_patterns:
                    if pattern in rel_path:
                        skip = True
                        break
                if skip:
                    continue
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            rel_parts = path.relative_to(self.repo.root_path).parts
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –ø—É—Ç–∏
            parent = 'root'
            for i, part in enumerate(rel_parts):
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —É–∑–ª–∞
                node_id = '_'.join(rel_parts[:i+1])
                
                if node_id not in added_nodes:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–∑–ª–∞ (—Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
                    if i == len(rel_parts) - 1 and path.is_file():
                        # –§–∞–π–ª
                        dot.node(node_id, part, shape='note')
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ñ–∞–π–ª–∞
                        status = self._get_file_status(str(path.relative_to(self.repo.root_path)))
                        if status:
                            dot.node(node_id, f"{part}\n({status})", 
                                   color=self._get_status_color(status))
                    else:
                        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                        dot.node(node_id, part, shape='folder')
                    
                    added_nodes[node_id] = part
                    dot.edge(parent, node_id)
                
                parent = node_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ
        return dot.render(output_path, cleanup=True)
    
    def create_commit_graph(self, output_path: str, format: str = 'png', max_commits: int = 20) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤
        
        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞—Ñ–æ–º
            format: –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            max_commits: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        dot = graphviz.Digraph(
            'commit_history',
            comment='Commit History',
            format=format,
            node_attr={'shape': 'box', 'style': 'rounded'}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤
        history = self.repo.get_commit_history()[:max_commits]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
        for commit in history:
            commit_hash = self.repo.hash_object(commit.serialize())
            short_hash = commit_hash[:7]
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–º–∏—Ç–µ
            label = f"{short_hash}\\n{commit.message[:30]}...\\n{commit.author}"
            
            dot.node(commit_hash, label)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–º–º–∏—Ç–æ–º
            if commit.parent:
                dot.edge(commit_hash, commit.parent)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤–µ—Ç–æ–∫
        for branch in self.repo.list_branches():
            branch_commit = self.repo.get_branch_head(branch)
            if branch_commit and branch_commit in [self.repo.hash_object(c.serialize()) for c in history]:
                # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –¥–ª—è –≤–µ—Ç–∫–∏
                branch_node = f"branch_{branch}"
                dot.node(branch_node, branch, shape='tag')
                dot.edge(branch_node, branch_commit, style='dashed')
        
        return dot.render(output_path, cleanup=True)
    
    def print_directory_tree(self, ignore_patterns: Set[str] = None, prefix: str = "") -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞
        
        Args:
            ignore_patterns: –ù–∞–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
        """
        root_path = self.repo.root_path
        root_name = os.path.basename(str(root_path)) or 'root'
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        print(f"{prefix}üìÅ {root_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        entries = []
        for path in root_path.iterdir():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º .hrs –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if '.hrs' in path.parts:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if ignore_patterns:
                skip = False
                rel_path = str(path.relative_to(root_path))
                for pattern in ignore_patterns:
                    if pattern in rel_path:
                        skip = True
                        break
                if skip:
                    continue
            
            entries.append(path)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        entries.sort(key=lambda x: (not x.is_dir(), x.name.lower()))
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        for i, path in enumerate(entries):
            is_last = i == len(entries) - 1
            current_prefix = prefix + ("‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ ")
            next_prefix = prefix + ("    " if is_last else "‚îÇ   ")
            
            if path.is_dir():
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                print(f"{current_prefix}üìÅ {path.name}")
                self._print_directory_tree_recursive(path, ignore_patterns, next_prefix)
            else:
                # –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                status = self._get_file_status(str(path.relative_to(root_path)))
                status_icon = self._get_status_icon(status)
                print(f"{current_prefix}{status_icon} {path.name}")
    
    def _print_directory_tree_recursive(self, directory: Path, ignore_patterns: Set[str], prefix: str) -> None:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        entries = []
        for path in directory.iterdir():
            if '.hrs' in path.parts:
                continue
                
            if ignore_patterns:
                skip = False
                rel_path = str(path.relative_to(self.repo.root_path))
                for pattern in ignore_patterns:
                    if pattern in rel_path:
                        skip = True
                        break
                if skip:
                    continue
            
            entries.append(path)
        
        entries.sort(key=lambda x: (not x.is_dir(), x.name.lower()))
        
        for i, path in enumerate(entries):
            is_last = i == len(entries) - 1
            current_prefix = prefix + ("‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ ")
            next_prefix = prefix + ("    " if is_last else "‚îÇ   ")
            
            if path.is_dir():
                print(f"{current_prefix}üìÅ {path.name}")
                self._print_directory_tree_recursive(path, ignore_patterns, next_prefix)
            else:
                status = self._get_file_status(str(path.relative_to(self.repo.root_path)))
                status_icon = self._get_status_icon(status)
                print(f"{current_prefix}{status_icon} {path.name}")
    
    def _get_status_icon(self, status: Optional[str]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞"""
        if status == "modified":
            return "üìù"
        elif status == "added":
            return "‚ûï"
        elif status == "deleted":
            return "‚ùå"
        elif status == "renamed":
            return "üìé"
        else:
            return "üìÑ"
            
    def _get_file_status(self, rel_path: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        status = self.repo.get_status()
        
        if rel_path in status["modified"]:
            return "modified"
        elif rel_path in status["new"]:
            return "new"
        elif rel_path in status["deleted"]:
            return "deleted"
        
        return None
    
    def _get_status_color(self, status: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞"""
        colors = {
            "modified": "orange",
            "new": "green",
            "deleted": "red"
        }
        return colors.get(status, "black") 
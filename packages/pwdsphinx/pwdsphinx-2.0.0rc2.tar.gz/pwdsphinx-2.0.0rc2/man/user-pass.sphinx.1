.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "sphinx-x11" "1" "" "" "simple script interpreter for integrating password managers with X11"
.hy
.SH NAME
.PP
sphinx-x11 - simple script interpreter for integrating password managers
with X11
.SH DESCRIPTION
.PP
\f[V]sphinx-x11(1)\f[R] is a simple \[lq]script\[rq] language
interpreter that integrates the SPHINX CLI with X11.
.SH SPHINX-SCRIPT PARAMETERS
.PP
All \f[V]sphinx-x11(1)\f[R] scripts expect a username and a hostname as
the first and second parameter respectively.
.SH VOCABULARY
.IP \[bu] 2
\f[V]type \[dq]text...\[dq]\f[R]: types the text into the currently
focused X11 window.
.IP \[bu] 2
\f[V]wait-for-click\f[R]: waits until the user clicks anywhere.
.IP \[bu] 2
\f[V]user\f[R]: types the username - usually given as the first
parameter to the sphinx-script - into the currently focused X11 window.
.IP \[bu] 2
\f[V]host\f[R]: types the hostname - usually given as the second
parameter to the sphinx-script - into the currently focused X11 window.
.IP \[bu] 2
\f[V]pwd\f[R]: gets a password using \f[V]getpwd(1)\f[R] and
\f[V]sphinx(1)\f[R], and types it into the currently focused X11 window.
.IP \[bu] 2
\f[V]otp\f[R]: gets a TOTP secret stored in \f[V]sphinx(1)\f[R] using
\f[V]getpwd(1)\f[R] and generates the TOTP pin using
\f[V]oathtool(1)\f[R], which is then typed into the currently focused
X11 window.
.IP \[bu] 2
\f[V]tab\f[R]: types a tabulator into the current X11 window, possibly
advancing between form-fields.
.IP \[bu] 2
\f[V]enter\f[R]: sends an enter key press to the currently focused X11
window, possibly submitting a form.
.IP \[bu] 2
\f[V]gethost\f[R]: waits for a left mouse-click on a browser window, and
then copies the URL from the urlbar into the clipboard, and then strips
it down to the hostname and sets an internal \[lq]$host\[rq] variable
that can then be used with \f[V]host\f[R] or \f[V]pwd\f[R].
.IP \[bu] 2
\f[V]getuser\f[R] dispatches a \f[V]sphinx list $host\f[R] and if more
than one user is returned, offers them in a dmenu widget, if/when one
user is found/selected it is set as an internal \f[V]$user\f[R] variable
which can then used for verbs like \f[V]user\f[R] or \f[V]pwd\f[R].
.PP
Any lines not consisting of these tokens are simply ignored.
.SH OTP SUPPORT
.PP
In this interpreter/implementation a TOTP value is assumed to be stored
with a username prefixed with \f[V]otp://\f[R], so that a regular login
name can co-exist with the according TOTP secret in sphinx.
.PP
For example in a common 2FA login the first \f[V]pwd\f[R] operation uses
e.g.\ \f[V]joe\f[R] as a username and then for the TOTP value it uses
\f[V]otp://joe\f[R] as the username, which allows for seamless 2FA
login.
.SH DEFAULT SCRIPTS
.PP
\f[V]sphinx-x11(1)\f[R] comes with 5 default sphinx-scripts (note on
debian and derivates instead of a \f[V].sphinx\f[R] extension they have
a \f[V]sx11-\f[R] prefix):
.IP \[bu] 2
pass.sphinx : gets a password using \f[V]sphinx(1)\f[R], types it and
submits it.
.IP \[bu] 2
user-pass.sphinx : gets a password using \f[V]sphinx(1)\f[R], types the
user, then the password and submits it.
.IP \[bu] 2
user-pass-otp.sphinx : gets a password, and a TOTP pin code using
\f[V]sphinx(1)\f[R], first types the username, then the password, then
submits the form, and finally enters the TOTP pin and submits that as
well.
.IP \[bu] 2
otp.sphinx : gets a TOTP pin code using \f[V]sphinx(1)\f[R] and types
and submits it.
.IP \[bu] 2
getacc-user-pass.sphinx: waits for a click on a browser window, from
with it gets the target \f[V]host\f[R] value, then using that uses
\f[V]sphinx list\f[R] to get the users associated with this host, and if
one is selected, waits for another click in the user input field of a
login form, then gets a password using \f[V]sphinx(1)\f[R], types the
user, then the password and submits it.
.PP
Each of these scripts waits for the user to click, then they retrieve
the relevant password (and/or TOTP token) before inserting it into the
form fields, navigating between them with \f[V]tab\f[R] and
\f[V]enter\f[R].
You are welcome to contribute adapted sphinx-scripts for websites that
have other login semantics.
.SH EXAMPLE
.PP
As an example the \f[V]user-pass-otp.sphinx\f[R] script is explained
below:
.IP
.nf
\f[C]
#!sphinx-x11

wait-for-click
user
tab
pwd
tab
enter
wait-for-click
otp
enter
\f[R]
.fi
.PP
The first line specifies \f[V]sphinx-x11(1)\f[R] as the interpreter.
The script itself then waits for the user to click (line 3), then in
line 4 inserts the \f[V]user\f[R] - which is specified as the first
parameter to this script.
Line 5 injects a \f[V]tab\f[R] so the next form field is selected.
Then pwdsphinx/getpwd is used to get the password for \f[V]user\f[R] and
\f[V]host\f[R] - the host being the 2nd parameter to this script.
\f[V]enter\f[R] is used to submit this form in line 8.
Since this is a new form the script waits (line 9) for the user to click
in the field where the TOTP value needs to be inserted.
Then in line 10 the TOTP value is queried using pwdsphinx/getpwd, and
finally in the last line the TOTP value is submitted by injecting
\f[V]enter\f[R] into the application.
.SH REPORTING BUGS
.PP
https://github.com/stef/pwdsphinx/issues/
.SH AUTHOR
.PP
Written by Stefan Marsiske.
.SH COPYRIGHT
.PP
Copyright \[co] 2023 Stefan Marsiske.
License GPLv3+: GNU GPL version 3 or later
<https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
.PP
\f[V]sphinx(1)\f[R], \f[V]type-pwd(1)\f[R], \f[V]exec-on-click(1)\f[R],
\f[V]getpwd(1)\f[R]

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import femtum_sdk.core.analysis_pb2 as analysis__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in analysis_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class AnalysisStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindOpticalSpectralAnalyserSweepResults = channel.unary_unary(
                '/Analysis.Analysis/FindOpticalSpectralAnalyserSweepResults',
                request_serializer=analysis__pb2.ResultsFilterRequest.SerializeToString,
                response_deserializer=analysis__pb2.OpticalSpectralAnalyserSweepResultArray.FromString,
                _registered_method=True)
        self.FindResultById = channel.unary_unary(
                '/Analysis.Analysis/FindResultById',
                request_serializer=analysis__pb2.FindResultByIdRequest.SerializeToString,
                response_deserializer=analysis__pb2.OptionalSingleResults.FromString,
                _registered_method=True)
        self.ListByPageResults = channel.unary_unary(
                '/Analysis.Analysis/ListByPageResults',
                request_serializer=analysis__pb2.ListByPageResultsRequest.SerializeToString,
                response_deserializer=analysis__pb2.ResultsPage.FromString,
                _registered_method=True)
        self.ListByPageWafers = channel.unary_unary(
                '/Analysis.Analysis/ListByPageWafers',
                request_serializer=analysis__pb2.ListByPageWafersRequest.SerializeToString,
                response_deserializer=analysis__pb2.WafersPage.FromString,
                _registered_method=True)
        self.ListByPageReticles = channel.unary_unary(
                '/Analysis.Analysis/ListByPageReticles',
                request_serializer=analysis__pb2.ListByPageReticlesRequest.SerializeToString,
                response_deserializer=analysis__pb2.ReticlesPage.FromString,
                _registered_method=True)
        self.ListByPageDies = channel.unary_unary(
                '/Analysis.Analysis/ListByPageDies',
                request_serializer=analysis__pb2.ListByPageDiesRequest.SerializeToString,
                response_deserializer=analysis__pb2.DiesPage.FromString,
                _registered_method=True)
        self.ListByPageCircuits = channel.unary_unary(
                '/Analysis.Analysis/ListByPageCircuits',
                request_serializer=analysis__pb2.ListByPageCircuitsRequest.SerializeToString,
                response_deserializer=analysis__pb2.CircuitsPage.FromString,
                _registered_method=True)


class AnalysisServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindOpticalSpectralAnalyserSweepResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindResultById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListByPageResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListByPageWafers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListByPageReticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListByPageDies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListByPageCircuits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalysisServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindOpticalSpectralAnalyserSweepResults': grpc.unary_unary_rpc_method_handler(
                    servicer.FindOpticalSpectralAnalyserSweepResults,
                    request_deserializer=analysis__pb2.ResultsFilterRequest.FromString,
                    response_serializer=analysis__pb2.OpticalSpectralAnalyserSweepResultArray.SerializeToString,
            ),
            'FindResultById': grpc.unary_unary_rpc_method_handler(
                    servicer.FindResultById,
                    request_deserializer=analysis__pb2.FindResultByIdRequest.FromString,
                    response_serializer=analysis__pb2.OptionalSingleResults.SerializeToString,
            ),
            'ListByPageResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByPageResults,
                    request_deserializer=analysis__pb2.ListByPageResultsRequest.FromString,
                    response_serializer=analysis__pb2.ResultsPage.SerializeToString,
            ),
            'ListByPageWafers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByPageWafers,
                    request_deserializer=analysis__pb2.ListByPageWafersRequest.FromString,
                    response_serializer=analysis__pb2.WafersPage.SerializeToString,
            ),
            'ListByPageReticles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByPageReticles,
                    request_deserializer=analysis__pb2.ListByPageReticlesRequest.FromString,
                    response_serializer=analysis__pb2.ReticlesPage.SerializeToString,
            ),
            'ListByPageDies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByPageDies,
                    request_deserializer=analysis__pb2.ListByPageDiesRequest.FromString,
                    response_serializer=analysis__pb2.DiesPage.SerializeToString,
            ),
            'ListByPageCircuits': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByPageCircuits,
                    request_deserializer=analysis__pb2.ListByPageCircuitsRequest.FromString,
                    response_serializer=analysis__pb2.CircuitsPage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Analysis.Analysis', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Analysis(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindOpticalSpectralAnalyserSweepResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Analysis.Analysis/FindOpticalSpectralAnalyserSweepResults',
            analysis__pb2.ResultsFilterRequest.SerializeToString,
            analysis__pb2.OpticalSpectralAnalyserSweepResultArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindResultById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Analysis.Analysis/FindResultById',
            analysis__pb2.FindResultByIdRequest.SerializeToString,
            analysis__pb2.OptionalSingleResults.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListByPageResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Analysis.Analysis/ListByPageResults',
            analysis__pb2.ListByPageResultsRequest.SerializeToString,
            analysis__pb2.ResultsPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListByPageWafers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Analysis.Analysis/ListByPageWafers',
            analysis__pb2.ListByPageWafersRequest.SerializeToString,
            analysis__pb2.WafersPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListByPageReticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Analysis.Analysis/ListByPageReticles',
            analysis__pb2.ListByPageReticlesRequest.SerializeToString,
            analysis__pb2.ReticlesPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListByPageDies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Analysis.Analysis/ListByPageDies',
            analysis__pb2.ListByPageDiesRequest.SerializeToString,
            analysis__pb2.DiesPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListByPageCircuits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Analysis.Analysis/ListByPageCircuits',
            analysis__pb2.ListByPageCircuitsRequest.SerializeToString,
            analysis__pb2.CircuitsPage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

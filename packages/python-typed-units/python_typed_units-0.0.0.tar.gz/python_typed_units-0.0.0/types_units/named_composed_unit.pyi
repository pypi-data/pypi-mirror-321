"""Assign arbitrary new symbols to composed units."""

from typing import Any, Tuple, Type

from units.abstract import AbstractUnit
from units.composed_unit import ComposedUnit

class NamedComposedUnit(AbstractUnit):
    """A NamedComposedUnit is a composed unit with its own symbol."""

    name: str
    composed_unit: "ComposedUnit"
    def get_name(self) -> str: ...
    def get_composed_unit(self) -> "ComposedUnit": ...
    def __new__(
        cls, name: str, composed_unit: ComposedUnit, is_si: bool = False
    ) -> Type["NamedComposedUnit"]: ...
    def __init__(
        self, name: str, composed_unit: ComposedUnit, is_si: bool = False
    ) -> None: ...
    def __reduce__(
        self,
    ) -> Tuple[Type["NamedComposedUnit"], Tuple[str, ComposedUnit, bool]]: ...
    def invert(self) -> ComposedUnit: ...
    def canonical(self) -> Tuple[AbstractUnit, AbstractUnit] | AbstractUnit: ...
    def squeeze(self) -> float: ...
    def __mul__(self, other: Any) -> ComposedUnit: ...
    def __truediv__(self, other: Any) -> ComposedUnit: ...
    def str_includes_multiplier(self) -> bool: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __pow__(self, exponent: float) -> ComposedUnit: ...

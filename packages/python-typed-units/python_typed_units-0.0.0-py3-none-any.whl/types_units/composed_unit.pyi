from typing import List, Optional, Tuple

from units.abstract import AbstractUnit

def unbox(
    numer: List[AbstractUnit], denom: List[AbstractUnit], multiplier: float
) -> Optional[float]: ...
def cancel(
    numer: List[AbstractUnit], denom: List[AbstractUnit]
) -> Tuple[List[AbstractUnit], List[AbstractUnit], float]: ...
def squeeze(
    numer: List[AbstractUnit], denom: List[AbstractUnit]
) -> Tuple[List[AbstractUnit], List[AbstractUnit], float]: ...

class ComposedUnit(AbstractUnit):
    """A ComposedUnit is a quotient of products of units."""

    def __new__(
        cls, numer: List[AbstractUnit], denom: List[AbstractUnit], multiplier: float = 1
    ) -> "ComposedUnit": ...
    def __init__(
        self,
        numer: List[AbstractUnit],
        denom: List[AbstractUnit],
        multiplier: float = 1,
    ) -> None: ...
    def __reduce__(self) -> Tuple[object, Tuple[AbstractUnit, AbstractUnit, float]]: ...
    def str_includes_multiplier(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def canonical(self) -> Tuple[AbstractUnit, AbstractUnit] | AbstractUnit: ...
    def squeeze(self) -> float: ...
    def __mul__(self, other: AbstractUnit | float) -> "ComposedUnit": ...
    def invert(self) -> "ComposedUnit": ...
    def __truediv__(self, other: AbstractUnit) -> "ComposedUnit": ...
    def __pow__(self, exponent: float) -> "ComposedUnit": ...

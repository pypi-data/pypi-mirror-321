"""Leaf units stand alone.
They are not compatible with any other kind of unit."""

from typing import Any, Tuple

from units.abstract import AbstractUnit
from units.composed_unit import ComposedUnit

class LeafUnit(AbstractUnit):
    """Leaf units are not compatible with other units, but they can be
    composed to make other units."""

    def get_specifier(self) -> str: ...
    def __new__(cls, specifier: str, is_si: bool) -> "LeafUnit": ...
    def __init__(self, specifier: str, is_si: bool) -> None: ...
    def __reduce__(self) -> Tuple[type, Tuple[str, bool]]: ...
    def str_includes_multiplier(self) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __mul__(self, other: AbstractUnit) -> "ComposedUnit": ...
    def __truediv__(self, other: Any) -> ComposedUnit: ...
    def invert(self) -> ComposedUnit: ...
    def canonical(self) -> "LeafUnit": ...
    def squeeze(self) -> int: ...
    def __pow__(self, exponent: float) -> ComposedUnit: ...

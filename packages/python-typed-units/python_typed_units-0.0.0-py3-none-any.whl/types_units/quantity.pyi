"""Quantities are numbers with units.
The combination of quantities is dependent on the compatibilities
of their units."""

from typing import Any, Tuple

from units.leaf_unit import LeafUnit

class Quantity(object):
    def __new__(cls, num: float, unit: LeafUnit) -> "Quantity": ...
    def __init__(self, num: float, unit: LeafUnit) -> None: ...
    def __getnewargs__(self) -> Tuple[float, LeafUnit]: ...
    def get_num(self) -> float: ...

    num: float

    def get_unit(self) -> LeafUnit: ...

    unit: LeafUnit

    def _ensure_same_type(self, other: "Quantity") -> None: ...
    def __abs__(self) -> float: ...
    def __add__(self, other: "Quantity") -> "Quantity": ...
    def __sub__(self, other: "Quantity") -> "Quantity": ...
    def __mul__(self, other: "Quantity") -> "Quantity": ...
    def __rmul__(self, other: "Quantity") -> "Quantity": ...
    def __truediv__(self, other: "Quantity") -> "Quantity": ...
    __floordiv__ = __truediv__
    # Backwards-compatibility for <= Python 2.7
    __div__ = __truediv__

    def __rtruediv__(self, other: "Quantity") -> "Quantity": ...
    # Backwards-compatibility for <= Python 2.7
    __rdiv__ = __rtruediv__

    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: "Quantity") -> bool: ...
    def __cmp__(self, other: "Quantity") -> bool: ...
    def __le__(self, other: "Quantity") -> bool: ...
    def __complex__(self) -> complex: ...
    def __float__(self) -> float: ...
    def __index__(self) -> int: ...
    def __hex__(self) -> str: ...
    def __int__(self) -> int: ...
    def __neg__(self) -> "Quantity": ...
    def __nonzero__(self) -> bool: ...
    __bool__ = __nonzero__

    def __oct__(self) -> str: ...
    def __pos__(self) -> bool: ...
    def __pow__(self, exponent: float) -> "Quantity": ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip list --verbose

      - name: Fetch tags
        run: git fetch --tags

      - name: Get version from tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "version=$VERSION" 
          else
            echo "GIT REF is not a tag"
            VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
            VERSION=${VERSION#v}
            echo "version=$VERSION"
          fi

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(rc[0-9]+)?$ ]]; then
            echo "version=$VERSION"
            echo "Error: No version found"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update version file
        run: |
          echo "__version__ = \"$VERSION\"" > my_hw/src/__version__.py
          cat my_hw/src/__version__.py
        env:
          VERSION: ${{ steps.get_version.outputs.version }}

      - name: Build package
        run: |
          hatch build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py-artifacts
          path: |
            ./dist/*
            ./**/dist/*

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: py-artifacts
          path: ./dist

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in dist/*; do
            echo "Uploading $file..."
            gh release upload "${GITHUB_REF#refs/tags/}" "$file"
          done
        working-directory: ./dist

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
          pip list --verbose

      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Content of current directory:"
          ls -la
          echo "Content of dist directory:"
          ls -la dist/
          echo "Content recursive of dist directory:"
          ls -laR dist/
        working-directory: ${{ github.workspace }}

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_VERBOSE: 1
        run: |
          echo "Checking distributions..."
          ls -la
          echo "Uploading to PyPI..."
          echo "twine upload --verbose dist/*"
          find . -name "*.whl" -o -name "*.tar.gz" | xargs twine upload --verbose
        working-directory: ./dist

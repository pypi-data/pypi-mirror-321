# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "contract_create(address,address,uint64)uint64": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void": {
            "structs": {
                "delegation_terms_general": {
                    "name": "DelegationTermsGeneral",
                    "elements": [
                        [
                            "commission",
                            "uint64"
                        ],
                        [
                            "fee_round",
                            "uint64"
                        ],
                        [
                            "fee_setup",
                            "uint64"
                        ],
                        [
                            "fee_asset_id",
                            "uint64"
                        ],
                        [
                            "partner_address",
                            "address"
                        ],
                        [
                            "fee_round_partner",
                            "uint64"
                        ],
                        [
                            "fee_setup_partner",
                            "uint64"
                        ],
                        [
                            "rounds_setup",
                            "uint64"
                        ],
                        [
                            "rounds_confirm",
                            "uint64"
                        ]
                    ]
                },
                "delegation_terms_balance": {
                    "name": "DelegationTermsBalance",
                    "elements": [
                        [
                            "stake_max",
                            "uint64"
                        ],
                        [
                            "cnt_breach_del_max",
                            "uint64"
                        ],
                        [
                            "rounds_breach",
                            "uint64"
                        ],
                        [
                            "gating_asa_list",
                            "(uint64,uint64)[2]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_pay(txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_confirm(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_confirmed()(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_submitted()(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])": {
            "structs": {
                "key_reg_txn_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                },
                "output": {
                    "name": "EarningsDistributionAndMessage",
                    "elements": [
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])": {
            "structs": {
                "output": {
                    "name": "BreachLimitsReturn",
                    "elements": [
                        [
                            "max_breach_reached",
                            "bool"
                        ],
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_pay()(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_suspended()((uint64,uint64,uint64),address,byte[100])": {
            "structs": {
                "output": {
                    "name": "EarningsDistributionAndMessage",
                    "elements": [
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_claim()(uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "EarningsDistribution",
                    "elements": [
                        [
                            "user",
                            "uint64"
                        ],
                        [
                            "platform",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_expired()((uint64,uint64,uint64),address,byte[100])": {
            "structs": {
                "output": {
                    "name": "EarningsDistributionAndMessage",
                    "elements": [
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_withdraw(address)(uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "EarningsDistribution",
                    "elements": [
                        [
                            "user",
                            "uint64"
                        ],
                        [
                            "platform",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_delete(address)(uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "ContractDeleteReturn",
                    "elements": [
                        [
                            "remaining_balance",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "contract_report_expiry_soon(uint64,uint64)(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCgpzbWFydF9jb250cmFjdHMuZGVsZWdhdG9yX2NvbnRyYWN0LmNvbnRyYWN0LkRlbGVnYXRvckNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 9,
            "num_uints": 12
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "cnt_breach_del": {
                    "type": "uint64",
                    "key": "cnt_breach_del"
                },
                "del_beneficiary": {
                    "type": "bytes",
                    "key": "del_beneficiary"
                },
                "del_manager": {
                    "type": "bytes",
                    "key": "del_manager"
                },
                "delegation_terms_balance": {
                    "type": "bytes",
                    "key": "B",
                    "descr": "Balance related delegation terms."
                },
                "delegation_terms_general": {
                    "type": "bytes",
                    "key": "G",
                    "descr": "General delegation terms."
                },
                "fee_operational": {
                    "type": "uint64",
                    "key": "fee_operational"
                },
                "fee_operational_partner": {
                    "type": "uint64",
                    "key": "fee_operational_partner"
                },
                "noticeboard_app_id": {
                    "type": "uint64",
                    "key": "noticeboard_app_id"
                },
                "round_breach_last": {
                    "type": "uint64",
                    "key": "round_breach_last"
                },
                "round_claim_last": {
                    "type": "uint64",
                    "key": "round_claim_last"
                },
                "round_end": {
                    "type": "uint64",
                    "key": "round_end"
                },
                "round_ended": {
                    "type": "uint64",
                    "key": "round_ended"
                },
                "round_expiry_soon_last": {
                    "type": "uint64",
                    "key": "round_expiry_soon_last"
                },
                "round_start": {
                    "type": "uint64",
                    "key": "round_start"
                },
                "sel_key": {
                    "type": "bytes",
                    "key": "sel_key"
                },
                "state": {
                    "type": "bytes",
                    "key": "state"
                },
                "state_proof_key": {
                    "type": "bytes",
                    "key": "state_proof_key"
                },
                "tc_sha256": {
                    "type": "bytes",
                    "key": "tc_sha256"
                },
                "validator_ad_app_id": {
                    "type": "uint64",
                    "key": "validator_ad_app_id"
                },
                "vote_key": {
                    "type": "bytes",
                    "key": "vote_key"
                },
                "vote_key_dilution": {
                    "type": "uint64",
                    "key": "vote_key_dilution"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DelegatorContract",
        "methods": [
            {
                "name": "contract_create",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "address",
                        "name": "del_beneficiary",
                        "desc": "Beneficiary address for the delegation contract."
                    },
                    {
                        "type": "uint64",
                        "name": "noticeboard_app_id",
                        "desc": "App ID of the Noticeboard smart contract to which to tie this contract."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created delegation contract application."
                },
                "desc": "Creates a new DelegatorContract.\nDefines delegator contract manager and beneficiary accounts. Defines Noticeboard and ValidatorAd app ID to which this contract belongs to."
            },
            {
                "name": "contract_setup",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "tc_sha256",
                        "desc": "Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
                        "name": "delegation_terms_general",
                        "desc": "General delegation contract terms."
                    },
                    {
                        "type": "(uint64,uint64,uint64,(uint64,uint64)[2])",
                        "name": "delegation_terms_balance",
                        "desc": "Balance delegation contract terms."
                    },
                    {
                        "type": "uint64",
                        "name": "rounds_duration",
                        "desc": "Contract duration in number of rounds."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets the general and balance delegation contract terms.\nDefines contract start and end rounds. Opts in the payment asset if it is not ALGO."
            },
            {
                "name": "contract_pay",
                "args": [
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "Transaction for the payment of the setup and operational fees."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Pays the validator setup and operational fee."
            },
            {
                "name": "keys_confirm",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Purported delegator manager account."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys.."
            },
            {
                "name": "keys_not_confirmed",
                "args": [],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that keys have not been confirmed in time."
            },
            {
                "name": "keys_not_submitted",
                "args": [],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that keys have not been submitted in time."
            },
            {
                "name": "keys_submit",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_txn_info",
                        "desc": "Information about the generated participation keys."
                    }
                ],
                "returns": {
                    "type": "((uint64,uint64,uint64),address,byte[100])",
                    "desc": "Amount of earnings of the validator which equal the setup fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms."
            },
            {
                "name": "breach_limits",
                "args": [],
                "returns": {
                    "type": "(bool,(uint64,uint64,uint64),address,byte[100])",
                    "desc": "Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."
                },
                "desc": "Reports that a limit breach event occurred."
            },
            {
                "name": "breach_pay",
                "args": [],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that a payment for the fee cannot be made from DelegatorContract.\nThis can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager."
            },
            {
                "name": "breach_suspended",
                "args": [],
                "returns": {
                    "type": "((uint64,uint64,uint64),address,byte[100])",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Reports that the delegator beneficiary was suspended by consensus."
            },
            {
                "name": "contract_claim",
                "args": [],
                "returns": {
                    "type": "(uint64,uint64,uint64)",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Claims operational fee of validator up to this round.\nCommission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner."
            },
            {
                "name": "contract_expired",
                "args": [],
                "returns": {
                    "type": "((uint64,uint64,uint64),address,byte[100])",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Reports that a contract has expired."
            },
            {
                "name": "contract_withdraw",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,uint64)",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Delegator gracefully withdraws from the contract prematurely.\nThe delegator beneficiary should issue a key deregistration transaction 320 round before this call."
            },
            {
                "name": "contract_delete",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Balance of the fee asset that remained in the contract."
                },
                "desc": "Delegator deletes an ended contract and withdraws any remaining balance.\nThere can be non-zero balance to withdraw if someone sent the contract some balance, or if it was not possible to claim the fee by validator and/or noticeboard if they had the asset frozen."
            },
            {
                "name": "contract_report_expiry_soon",
                "args": [
                    {
                        "type": "uint64",
                        "name": "before_expiry",
                        "desc": "How many rounds before contract end can the report be made."
                    },
                    {
                        "type": "uint64",
                        "name": "report_period",
                        "desc": "How frequently can the report be made."
                    }
                ],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that the contract will expire soon.\nNotification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming."
            }
        ],
        "networks": {},
        "desc": "\n    Contract between a delegator manager and a validator (a.k.a. node runner), for the latter to participate in\n    consensus on the behalf of the delegator beneficiary for specific amount of time and for a specific fee.\n    The contract terms and conditions are defined in this contract.\n    The contract also acts as an escrow account for the delegator's payment to the validator for the service.\n\n    Global state\n    ------------\n    noticeboard_app_id : UInt64\n        App ID of noticeboard platform to which this contract belongs to.\n    validator_ad_app_id : UInt64\n        App ID of validator ad to which this contract belongs to.\n\n\n    delegation_terms_general : DelegationTermsGeneral\n        General delegation terms agreed by delegator and validator to govern this contract.\n    fee_operational : UInt64\n        Calculated operational fee based on the agreed contract terms.\n    fee_operational_partner : UInt64\n        Calculated operational fee charged for convenience by the partner.\n    delegation_terms_balance : DelegationTermsBalance\n        Requirements for delegator beneficiary balance agreed by delegator and validator to govern this contract.\n\n    del_manager : Account\n        Delegator manager account.\n    del_beneficiary : UInt64\n        Delegator beneficiary account.\n\n    round_start : UInt64\n        Agreed start round of the contract, i.e. time of its creation.\n    round_end : UInt64\n        Agreed end round of the contract.\n    round_ended : UInt64\n        Actual round at which the contract ended.\n        Can be smaller than round_end in case of early contract end.\n\n    vote_key_dilution : UInt64\n        Vote key dilution parameter of the agreed participation key.\n    vote_pk = VotePk\n        Vote public key of the agreed participation key.\n    selection_pk : SelPk\n        Selection public key of the agreed participation key.\n    state_proof_pk = StateProofPk\n        State proof public key of the agreed participation key.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - contract has been created.\n            LIVE - contract is live.\n            READY - waiting for keys submission.\n            SET - contract terms have been set.\n            SUBMITTED - waiting for keys confirmation.\n            ENDED_NOT_SUBMITTED - keys have not been submitted in time.\n            ENDED_NOT_CONFIRMED - keys have not been confirmed in time.\n            ENDED_LIMITS - maximum number of limit breach events has been reached.\n            ENDED_WITHDREW - delegator withdrew from the contract prematurely.\n            ENDED_EXPIRED - contract has expired.\n            ENDED_SUSPENDED - delegator has been suspended by consensus.\n            ENDED_CANNOT_PAY - delegator cannot pay the validator (as funds could have been frozen and/or clawed back).\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator\n        and validator.\n\n    cnt_breach_del : UInt64\n        Counter of limit breach events.\n    round_breach_last : UInt64\n        Number of round of last limit breach event.\n\n    round_claim_last : UInt64\n        Number of the round the operational fee was last claimed.\n\n    round_expiry_soon_last : UInt64\n        Number of the round it was last reported that the contract will expire soon.\n\n    Methods\n    -------\n    contract_create(\n        del_manager: arc4.Address,\n        del_beneficiary: arc4.Address,\n        noticeboard_app_id: UInt64,\n    ) -> Application:\n        Creates a new delegator contract and returns its app ID.\n\n    contract_setup(\n        delegation_terms_general: DelegationTermsGeneral,\n        delegation_terms_balance: DelegationTermsBalance,\n        rounds_duration: UInt64,\n    ) -> None:\n        Sets the delegation contract terms.\n\n    contract_pay(\n        txn: gtxn.Transaction,\n    ) -> None:\n        Pays the validator setup and operational fee.\n\n    keys_confirm(\n        del_manager: arc4.Address,\n    ) -> None:\n        Delegator confirms the participation keys.\n\n    keys_not_confirmed() -> Message:\n        Reports that keys have not been confirmed in time.\n\n    keys_not_submitted() -> Message:\n        Reports that keys have not been submitted in time.\n\n    keys_submit(\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> EarningsDistributionAndMessage:\n        ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.\n\n    breach_limits(\n    ) -> BreachLimitsReturn:\n        Reports that a limit breach event occurred.\n\n    breach_pay(\n    ) -> Message:\n        Reports that a payment for the fee cannot be made from DelegatorContract (due to freeze or claw back).\n\n    breach_suspended(\n    ) -> EarningsDistributionAndMessage:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n    ) -> EarningsDistribution:\n        Claims and distributes the operational fee of validator up to this round to the validator and noticeboard,\n        as well as to the partner.\n\n    contract_expired(\n    ) -> EarningsDistributionAndMessage:\n        Reports that a contract has expired.\n\n    contract_withdraw(\n        del_manager: arc4.Address,\n    ) -> EarningsDistribution:\n        Delegator gracefully withdraws from the contract prematurely.\n\n    contract_delete(\n        del_manager: arc4.Address,\n        updating : arc4.Bool,\n    ) -> ContractDeleteReturn:\n        Delegator deletes an ended contract and withdraws any remaining balance.\n\n    contract_report_expiry_soon(\n        before_expiry: UInt64,\n        report_period: UInt64,\n    ) -> Message:\n        Reports that the contract will expire soon.\n\n    Private methods\n    ---------------\n    _distribute_earnings(\n        amount: UInt64,\n        amount_partner: UInt64,\n    ) -> EarningsDistribution:\n        Internal method for distributing the earnings between the validator ad and the noticeboard platform,\n        as well as for distributing the earnings of the partner.\n\n    _is_eligible(\n    ) -> arc4.Bool:\n        Check if del_beneficiary meets the agreed balance limits or not\n\n    "
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class DelegationTermsGeneral:
    commission: int
    fee_round: int
    fee_setup: int
    fee_asset_id: int
    partner_address: str
    fee_round_partner: int
    fee_setup_partner: int
    rounds_setup: int
    rounds_confirm: int


@dataclasses.dataclass(kw_only=True)
class DelegationTermsBalance:
    stake_max: int
    cnt_breach_del_max: int
    rounds_breach: int
    gating_asa_list: list[tuple[int, int]] | tuple[tuple[int, int], tuple[int, int]]


@dataclasses.dataclass(kw_only=True)
class ContractSetupArgs(_ArgsBase[None]):
    """Sets the general and balance delegation contract terms.
    Defines contract start and end rounds. Opts in the payment asset if it is not ALGO."""

    tc_sha256: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    """Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator."""
    delegation_terms_general: DelegationTermsGeneral
    """General delegation contract terms."""
    delegation_terms_balance: DelegationTermsBalance
    """Balance delegation contract terms."""
    rounds_duration: int
    """Contract duration in number of rounds."""

    @staticmethod
    def method() -> str:
        return "contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void"


@dataclasses.dataclass(kw_only=True)
class ContractPayArgs(_ArgsBase[None]):
    """Pays the validator setup and operational fee."""

    txn: TransactionWithSigner
    """Transaction for the payment of the setup and operational fees."""

    @staticmethod
    def method() -> str:
        return "contract_pay(txn)void"


@dataclasses.dataclass(kw_only=True)
class KeysConfirmArgs(_ArgsBase[None]):
    """Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys.."""

    del_manager: str
    """Purported delegator manager account."""

    @staticmethod
    def method() -> str:
        return "keys_confirm(address)void"


@dataclasses.dataclass(kw_only=True)
class Message:
    del_manager: str
    msg: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class KeysNotConfirmedArgs(_ArgsBase[Message]):
    """Reports that keys have not been confirmed in time."""

    @staticmethod
    def method() -> str:
        return "keys_not_confirmed()(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class KeysNotSubmittedArgs(_ArgsBase[Message]):
    """Reports that keys have not been submitted in time."""

    @staticmethod
    def method() -> str:
        return "keys_not_submitted()(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class KeyRegTxnInfo:
    vote_first: int
    vote_last: int
    vote_key_dilution: int
    vote_pk: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    selection_pk: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    state_proof_pk: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    sender: str


@dataclasses.dataclass(kw_only=True)
class EarningsDistributionAndMessage:
    earnings_distribution: tuple[int, int, int]
    del_manager: str
    msg: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class KeysSubmitArgs(_ArgsBase[EarningsDistributionAndMessage]):
    """ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms."""

    key_reg_txn_info: KeyRegTxnInfo
    """Information about the generated participation keys."""

    @staticmethod
    def method() -> str:
        return "keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class BreachLimitsReturn:
    max_breach_reached: bool
    earnings_distribution: tuple[int, int, int]
    del_manager: str
    msg: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class BreachLimitsArgs(_ArgsBase[BreachLimitsReturn]):
    """Reports that a limit breach event occurred."""

    @staticmethod
    def method() -> str:
        return "breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class BreachPayArgs(_ArgsBase[Message]):
    """Reports that a payment for the fee cannot be made from DelegatorContract.
    This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager."""

    @staticmethod
    def method() -> str:
        return "breach_pay()(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class BreachSuspendedArgs(_ArgsBase[EarningsDistributionAndMessage]):
    """Reports that the delegator beneficiary was suspended by consensus."""

    @staticmethod
    def method() -> str:
        return "breach_suspended()((uint64,uint64,uint64),address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class EarningsDistribution:
    user: int
    platform: int
    asset_id: int


@dataclasses.dataclass(kw_only=True)
class ContractClaimArgs(_ArgsBase[EarningsDistribution]):
    """Claims operational fee of validator up to this round.
    Commission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner."""

    @staticmethod
    def method() -> str:
        return "contract_claim()(uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class ContractExpiredArgs(_ArgsBase[EarningsDistributionAndMessage]):
    """Reports that a contract has expired."""

    @staticmethod
    def method() -> str:
        return "contract_expired()((uint64,uint64,uint64),address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class ContractWithdrawArgs(_ArgsBase[EarningsDistribution]):
    """Delegator gracefully withdraws from the contract prematurely.
    The delegator beneficiary should issue a key deregistration transaction 320 round before this call."""

    del_manager: str
    """Manager address for the delegation contract."""

    @staticmethod
    def method() -> str:
        return "contract_withdraw(address)(uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class ContractReportExpirySoonArgs(_ArgsBase[Message]):
    """Reports that the contract will expire soon.
    Notification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming."""

    before_expiry: int
    """How many rounds before contract end can the report be made."""
    report_period: int
    """How frequently can the report be made."""

    @staticmethod
    def method() -> str:
        return "contract_report_expiry_soon(uint64,uint64)(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class ContractCreateArgs(_ArgsBase[int]):
    """Creates a new DelegatorContract.
    Defines delegator contract manager and beneficiary accounts. Defines Noticeboard and ValidatorAd app ID to which this contract belongs to."""

    del_manager: str
    """Manager address for the delegation contract."""
    del_beneficiary: str
    """Beneficiary address for the delegation contract."""
    noticeboard_app_id: int
    """App ID of the Noticeboard smart contract to which to tie this contract."""

    @staticmethod
    def method() -> str:
        return "contract_create(address,address,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class ContractDeleteReturn:
    remaining_balance: int
    asset_id: int


@dataclasses.dataclass(kw_only=True)
class ContractDeleteArgs(_ArgsBase[ContractDeleteReturn]):
    """Delegator deletes an ended contract and withdraws any remaining balance.
    There can be non-zero balance to withdraw if someone sent the contract some balance, or if it was not possible to claim the fee by validator and/or noticeboard if they had the asset frozen."""

    del_manager: str
    """Manager address for the delegation contract."""

    @staticmethod
    def method() -> str:
        return "contract_delete(address)(uint64,uint64)"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.cnt_breach_del = typing.cast(int, data.get(b"cnt_breach_del"))
        self.del_beneficiary = ByteReader(typing.cast(bytes, data.get(b"del_beneficiary")))
        self.del_manager = ByteReader(typing.cast(bytes, data.get(b"del_manager")))
        self.delegation_terms_balance = ByteReader(typing.cast(bytes, data.get(b"B")))
        """Balance related delegation terms."""
        self.delegation_terms_general = ByteReader(typing.cast(bytes, data.get(b"G")))
        """General delegation terms."""
        self.fee_operational = typing.cast(int, data.get(b"fee_operational"))
        self.fee_operational_partner = typing.cast(int, data.get(b"fee_operational_partner"))
        self.noticeboard_app_id = typing.cast(int, data.get(b"noticeboard_app_id"))
        self.round_breach_last = typing.cast(int, data.get(b"round_breach_last"))
        self.round_claim_last = typing.cast(int, data.get(b"round_claim_last"))
        self.round_end = typing.cast(int, data.get(b"round_end"))
        self.round_ended = typing.cast(int, data.get(b"round_ended"))
        self.round_expiry_soon_last = typing.cast(int, data.get(b"round_expiry_soon_last"))
        self.round_start = typing.cast(int, data.get(b"round_start"))
        self.sel_key = ByteReader(typing.cast(bytes, data.get(b"sel_key")))
        self.state = ByteReader(typing.cast(bytes, data.get(b"state")))
        self.state_proof_key = ByteReader(typing.cast(bytes, data.get(b"state_proof_key")))
        self.tc_sha256 = ByteReader(typing.cast(bytes, data.get(b"tc_sha256")))
        self.validator_ad_app_id = typing.cast(int, data.get(b"validator_ad_app_id"))
        self.vote_key = ByteReader(typing.cast(bytes, data.get(b"vote_key")))
        self.vote_key_dilution = typing.cast(int, data.get(b"vote_key_dilution"))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def contract_setup(
        self,
        *,
        tc_sha256: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        delegation_terms_general: DelegationTermsGeneral,
        delegation_terms_balance: DelegationTermsBalance,
        rounds_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets the general and balance delegation contract terms.
        Defines contract start and end rounds. Opts in the payment asset if it is not ALGO.
        
        Adds a call to `contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] tc_sha256: Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator.
        :param DelegationTermsGeneral delegation_terms_general: General delegation contract terms.
        :param DelegationTermsBalance delegation_terms_balance: Balance delegation contract terms.
        :param int rounds_duration: Contract duration in number of rounds.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractSetupArgs(
            tc_sha256=tc_sha256,
            delegation_terms_general=delegation_terms_general,
            delegation_terms_balance=delegation_terms_balance,
            rounds_duration=rounds_duration,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_pay(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Pays the validator setup and operational fee.
        
        Adds a call to `contract_pay(txn)void` ABI method
        
        :param TransactionWithSigner txn: Transaction for the payment of the setup and operational fees.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractPayArgs(
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_confirm(
        self,
        *,
        del_manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys..
        
        Adds a call to `keys_confirm(address)void` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysConfirmArgs(
            del_manager=del_manager,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_confirmed(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that keys have not been confirmed in time.
        
        Adds a call to `keys_not_confirmed()(address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotConfirmedArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_submitted(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that keys have not been submitted in time.
        
        Adds a call to `keys_not_submitted()(address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotSubmittedArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_submit(
        self,
        *,
        key_reg_txn_info: KeyRegTxnInfo,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.
        
        Adds a call to `keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param KeyRegTxnInfo key_reg_txn_info: Information about the generated participation keys.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysSubmitArgs(
            key_reg_txn_info=key_reg_txn_info,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def breach_limits(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that a limit breach event occurred.
        
        Adds a call to `breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BreachLimitsArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def breach_pay(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that a payment for the fee cannot be made from DelegatorContract.
        This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
        
        Adds a call to `breach_pay()(address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BreachPayArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def breach_suspended(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that the delegator beneficiary was suspended by consensus.
        
        Adds a call to `breach_suspended()((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BreachSuspendedArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_claim(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Claims operational fee of validator up to this round.
        Commission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner.
        
        Adds a call to `contract_claim()(uint64,uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractClaimArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_expired(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that a contract has expired.
        
        Adds a call to `contract_expired()((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractExpiredArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_withdraw(
        self,
        *,
        del_manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delegator gracefully withdraws from the contract prematurely.
        The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
        
        Adds a call to `contract_withdraw(address)(uint64,uint64,uint64)` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractWithdrawArgs(
            del_manager=del_manager,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_report_expiry_soon(
        self,
        *,
        before_expiry: int,
        report_period: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that the contract will expire soon.
        Notification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming.
        
        Adds a call to `contract_report_expiry_soon(uint64,uint64)(address,byte[100])` ABI method
        
        :param int before_expiry: How many rounds before contract end can the report be made.
        :param int report_period: How frequently can the report be made.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractReportExpirySoonArgs(
            before_expiry=before_expiry,
            report_period=report_period,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_contract_create(
        self,
        *,
        del_manager: str,
        del_beneficiary: str,
        noticeboard_app_id: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Creates a new DelegatorContract.
        Defines delegator contract manager and beneficiary accounts. Defines Noticeboard and ValidatorAd app ID to which this contract belongs to.
        
        Adds a call to `contract_create(address,address,uint64)uint64` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param str del_beneficiary: Beneficiary address for the delegation contract.
        :param int noticeboard_app_id: App ID of the Noticeboard smart contract to which to tie this contract.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractCreateArgs(
            del_manager=del_manager,
            del_beneficiary=del_beneficiary,
            noticeboard_app_id=noticeboard_app_id,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_contract_delete(
        self,
        *,
        del_manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delegator deletes an ended contract and withdraws any remaining balance.
        There can be non-zero balance to withdraw if someone sent the contract some balance, or if it was not possible to claim the fee by validator and/or noticeboard if they had the asset frozen.
        
        Adds a call to `contract_delete(address)(uint64,uint64)` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractDeleteArgs(
            del_manager=del_manager,
        )
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class DelegatorContractClient:
    """
        Contract between a delegator manager and a validator (a.k.a. node runner), for the latter to participate in
        consensus on the behalf of the delegator beneficiary for specific amount of time and for a specific fee.
        The contract terms and conditions are defined in this contract.
        The contract also acts as an escrow account for the delegator's payment to the validator for the service.
    
        Global state
        ------------
        noticeboard_app_id : UInt64
            App ID of noticeboard platform to which this contract belongs to.
        validator_ad_app_id : UInt64
            App ID of validator ad to which this contract belongs to.
    
    
        delegation_terms_general : DelegationTermsGeneral
            General delegation terms agreed by delegator and validator to govern this contract.
        fee_operational : UInt64
            Calculated operational fee based on the agreed contract terms.
        fee_operational_partner : UInt64
            Calculated operational fee charged for convenience by the partner.
        delegation_terms_balance : DelegationTermsBalance
            Requirements for delegator beneficiary balance agreed by delegator and validator to govern this contract.
    
        del_manager : Account
            Delegator manager account.
        del_beneficiary : UInt64
            Delegator beneficiary account.
    
        round_start : UInt64
            Agreed start round of the contract, i.e. time of its creation.
        round_end : UInt64
            Agreed end round of the contract.
        round_ended : UInt64
            Actual round at which the contract ended.
            Can be smaller than round_end in case of early contract end.
    
        vote_key_dilution : UInt64
            Vote key dilution parameter of the agreed participation key.
        vote_pk = VotePk
            Vote public key of the agreed participation key.
        selection_pk : SelPk
            Selection public key of the agreed participation key.
        state_proof_pk = StateProofPk
            State proof public key of the agreed participation key.
    
        state : Bytes
            State of the contract. Can be one of the following:
                CREATED - contract has been created.
                LIVE - contract is live.
                READY - waiting for keys submission.
                SET - contract terms have been set.
                SUBMITTED - waiting for keys confirmation.
                ENDED_NOT_SUBMITTED - keys have not been submitted in time.
                ENDED_NOT_CONFIRMED - keys have not been confirmed in time.
                ENDED_LIMITS - maximum number of limit breach events has been reached.
                ENDED_WITHDREW - delegator withdrew from the contract prematurely.
                ENDED_EXPIRED - contract has expired.
                ENDED_SUSPENDED - delegator has been suspended by consensus.
                ENDED_CANNOT_PAY - delegator cannot pay the validator (as funds could have been frozen and/or clawed back).
    
        tc_sha256 : Sha256
            Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator
            and validator.
    
        cnt_breach_del : UInt64
            Counter of limit breach events.
        round_breach_last : UInt64
            Number of round of last limit breach event.
    
        round_claim_last : UInt64
            Number of the round the operational fee was last claimed.
    
        round_expiry_soon_last : UInt64
            Number of the round it was last reported that the contract will expire soon.
    
        Methods
        -------
        contract_create(
            del_manager: arc4.Address,
            del_beneficiary: arc4.Address,
            noticeboard_app_id: UInt64,
        ) -> Application:
            Creates a new delegator contract and returns its app ID.
    
        contract_setup(
            delegation_terms_general: DelegationTermsGeneral,
            delegation_terms_balance: DelegationTermsBalance,
            rounds_duration: UInt64,
        ) -> None:
            Sets the delegation contract terms.
    
        contract_pay(
            txn: gtxn.Transaction,
        ) -> None:
            Pays the validator setup and operational fee.
    
        keys_confirm(
            del_manager: arc4.Address,
        ) -> None:
            Delegator confirms the participation keys.
    
        keys_not_confirmed() -> Message:
            Reports that keys have not been confirmed in time.
    
        keys_not_submitted() -> Message:
            Reports that keys have not been submitted in time.
    
        keys_submit(
            key_reg_txn_info : KeyRegTxnInfo,
        ) -> EarningsDistributionAndMessage:
            ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.
    
        breach_limits(
        ) -> BreachLimitsReturn:
            Reports that a limit breach event occurred.
    
        breach_pay(
        ) -> Message:
            Reports that a payment for the fee cannot be made from DelegatorContract (due to freeze or claw back).
    
        breach_suspended(
        ) -> EarningsDistributionAndMessage:
            Reports that the delegator beneficiary was suspended by consensus.
    
        contract_claim(
        ) -> EarningsDistribution:
            Claims and distributes the operational fee of validator up to this round to the validator and noticeboard,
            as well as to the partner.
    
        contract_expired(
        ) -> EarningsDistributionAndMessage:
            Reports that a contract has expired.
    
        contract_withdraw(
            del_manager: arc4.Address,
        ) -> EarningsDistribution:
            Delegator gracefully withdraws from the contract prematurely.
    
        contract_delete(
            del_manager: arc4.Address,
            updating : arc4.Bool,
        ) -> ContractDeleteReturn:
            Delegator deletes an ended contract and withdraws any remaining balance.
    
        contract_report_expiry_soon(
            before_expiry: UInt64,
            report_period: UInt64,
        ) -> Message:
            Reports that the contract will expire soon.
    
        Private methods
        ---------------
        _distribute_earnings(
            amount: UInt64,
            amount_partner: UInt64,
        ) -> EarningsDistribution:
            Internal method for distributing the earnings between the validator ad and the noticeboard platform,
            as well as for distributing the earnings of the partner.
    
        _is_eligible(
        ) -> arc4.Bool:
            Check if del_beneficiary meets the agreed balance limits or not
    
        
    
    A class for interacting with the DelegatorContract app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        DelegatorContractClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def contract_setup(
        self,
        *,
        tc_sha256: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        delegation_terms_general: DelegationTermsGeneral,
        delegation_terms_balance: DelegationTermsBalance,
        rounds_duration: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets the general and balance delegation contract terms.
        Defines contract start and end rounds. Opts in the payment asset if it is not ALGO.
        
        Calls `contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void` ABI method
        
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] tc_sha256: Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator.
        :param DelegationTermsGeneral delegation_terms_general: General delegation contract terms.
        :param DelegationTermsBalance delegation_terms_balance: Balance delegation contract terms.
        :param int rounds_duration: Contract duration in number of rounds.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ContractSetupArgs(
            tc_sha256=tc_sha256,
            delegation_terms_general=delegation_terms_general,
            delegation_terms_balance=delegation_terms_balance,
            rounds_duration=rounds_duration,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def contract_pay(
        self,
        *,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Pays the validator setup and operational fee.
        
        Calls `contract_pay(txn)void` ABI method
        
        :param TransactionWithSigner txn: Transaction for the payment of the setup and operational fees.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ContractPayArgs(
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_confirm(
        self,
        *,
        del_manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys..
        
        Calls `keys_confirm(address)void` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = KeysConfirmArgs(
            del_manager=del_manager,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_not_confirmed(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that keys have not been confirmed in time.
        
        Calls `keys_not_confirmed()(address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = KeysNotConfirmedArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def keys_not_submitted(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that keys have not been submitted in time.
        
        Calls `keys_not_submitted()(address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = KeysNotSubmittedArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def keys_submit(
        self,
        *,
        key_reg_txn_info: KeyRegTxnInfo,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]:
        """ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.
        
        Calls `keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param KeyRegTxnInfo key_reg_txn_info: Information about the generated participation keys.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]: Amount of earnings of the validator which equal the setup fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."""

        args = KeysSubmitArgs(
            key_reg_txn_info=key_reg_txn_info,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EarningsDistributionAndMessage(**result_dict)
        return result

    def breach_limits(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[BreachLimitsReturn]:
        """Reports that a limit breach event occurred.
        
        Calls `breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[BreachLimitsReturn]: Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."""

        args = BreachLimitsArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = BreachLimitsReturn(**result_dict)
        return result

    def breach_pay(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that a payment for the fee cannot be made from DelegatorContract.
        This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
        
        Calls `breach_pay()(address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = BreachPayArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def breach_suspended(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]:
        """Reports that the delegator beneficiary was suspended by consensus.
        
        Calls `breach_suspended()((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."""

        args = BreachSuspendedArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EarningsDistributionAndMessage(**result_dict)
        return result

    def contract_claim(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EarningsDistribution]:
        """Claims operational fee of validator up to this round.
        Commission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner.
        
        Calls `contract_claim()(uint64,uint64,uint64)` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EarningsDistribution]: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."""

        args = ContractClaimArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EarningsDistribution(**result_dict)
        return result

    def contract_expired(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]:
        """Reports that a contract has expired.
        
        Calls `contract_expired()((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."""

        args = ContractExpiredArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EarningsDistributionAndMessage(**result_dict)
        return result

    def contract_withdraw(
        self,
        *,
        del_manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EarningsDistribution]:
        """Delegator gracefully withdraws from the contract prematurely.
        The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
        
        Calls `contract_withdraw(address)(uint64,uint64,uint64)` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EarningsDistribution]: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."""

        args = ContractWithdrawArgs(
            del_manager=del_manager,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EarningsDistribution(**result_dict)
        return result

    def contract_report_expiry_soon(
        self,
        *,
        before_expiry: int,
        report_period: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that the contract will expire soon.
        Notification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming.
        
        Calls `contract_report_expiry_soon(uint64,uint64)(address,byte[100])` ABI method
        
        :param int before_expiry: How many rounds before contract end can the report be made.
        :param int report_period: How frequently can the report be made.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = ContractReportExpirySoonArgs(
            before_expiry=before_expiry,
            report_period=report_period,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def create_contract_create(
        self,
        *,
        del_manager: str,
        del_beneficiary: str,
        noticeboard_app_id: int,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Creates a new DelegatorContract.
        Defines delegator contract manager and beneficiary accounts. Defines Noticeboard and ValidatorAd app ID to which this contract belongs to.
        
        Calls `contract_create(address,address,uint64)uint64` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param str del_beneficiary: Beneficiary address for the delegation contract.
        :param int noticeboard_app_id: App ID of the Noticeboard smart contract to which to tie this contract.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: App ID of the created delegation contract application."""

        args = ContractCreateArgs(
            del_manager=del_manager,
            del_beneficiary=del_beneficiary,
            noticeboard_app_id=noticeboard_app_id,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_contract_delete(
        self,
        *,
        del_manager: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ContractDeleteReturn]:
        """Delegator deletes an ended contract and withdraws any remaining balance.
        There can be non-zero balance to withdraw if someone sent the contract some balance, or if it was not possible to claim the fee by validator and/or noticeboard if they had the asset frozen.
        
        Calls `contract_delete(address)(uint64,uint64)` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ContractDeleteReturn]: Balance of the fee asset that remained in the contract."""

        args = ContractDeleteArgs(
            del_manager=del_manager,
        )
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ContractDeleteReturn(**result_dict)
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[ContractCreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy[ContractDeleteArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[ContractCreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param Deploy[ContractDeleteArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())

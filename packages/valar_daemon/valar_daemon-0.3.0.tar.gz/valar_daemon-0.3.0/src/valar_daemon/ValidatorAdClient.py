# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "ad_create(address)uint64": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "ad_config(address,address,bool,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_delete(address)void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "ad_ready(address,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void": {
            "structs": {
                "val_info": {
                    "name": "ValidatorSelfDisclosure",
                    "elements": [
                        [
                            "name",
                            "byte[30]"
                        ],
                        [
                            "https",
                            "byte[60]"
                        ],
                        [
                            "country_code",
                            "byte[2]"
                        ],
                        [
                            "hw_cat",
                            "uint64"
                        ],
                        [
                            "node_version",
                            "byte[20]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void": {
            "structs": {
                "terms_time": {
                    "name": "ValidatorTermsTiming",
                    "elements": [
                        [
                            "rounds_setup",
                            "uint64"
                        ],
                        [
                            "rounds_confirm",
                            "uint64"
                        ],
                        [
                            "rounds_duration_min",
                            "uint64"
                        ],
                        [
                            "rounds_duration_max",
                            "uint64"
                        ],
                        [
                            "round_max_end",
                            "uint64"
                        ]
                    ]
                },
                "terms_price": {
                    "name": "ValidatorTermsPricing",
                    "elements": [
                        [
                            "commission",
                            "uint64"
                        ],
                        [
                            "fee_round_min",
                            "uint64"
                        ],
                        [
                            "fee_round_var",
                            "uint64"
                        ],
                        [
                            "fee_setup",
                            "uint64"
                        ],
                        [
                            "fee_asset_id",
                            "uint64"
                        ]
                    ]
                },
                "terms_stake": {
                    "name": "ValidatorTermsStakeLimits",
                    "elements": [
                        [
                            "stake_max",
                            "uint64"
                        ],
                        [
                            "stake_gratis",
                            "uint64"
                        ]
                    ]
                },
                "terms_reqs": {
                    "name": "ValidatorTermsGating",
                    "elements": [
                        [
                            "gating_asa_list",
                            "(uint64,uint64)[2]"
                        ]
                    ]
                },
                "terms_warn": {
                    "name": "ValidatorTermsWarnings",
                    "elements": [
                        [
                            "cnt_warning_max",
                            "uint64"
                        ],
                        [
                            "rounds_warning",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_income(address,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ad_asa_close(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "template_load_init(address,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "template_load_data(address,uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "template_load_end(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_create(address,address,uint64,uint64,address,uint64,pay,txn)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_confirm(address,application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_confirmed(application)(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_not_submitted(application)(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])": {
            "structs": {
                "key_reg_txn_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                },
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])": {
            "structs": {
                "output": {
                    "name": "BreachLimitsReturn",
                    "elements": [
                        [
                            "max_breach_reached",
                            "bool"
                        ],
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_pay(application)(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "breach_suspended(application)((uint64,uint64,uint64),address,byte[100])": {
            "structs": {
                "output": {
                    "name": "EarningsDistributionAndMessage",
                    "elements": [
                        [
                            "earnings_distribution",
                            "(uint64,uint64,uint64)"
                        ],
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_claim(application)(uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "EarningsDistribution",
                    "elements": [
                        [
                            "user",
                            "uint64"
                        ],
                        [
                            "platform",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_expired(application)(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_withdraw(address,application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_delete(address,application)(uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "ContractDeleteReturn",
                    "elements": [
                        [
                            "remaining_balance",
                            "uint64"
                        ],
                        [
                            "asset_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])": {
            "structs": {
                "output": {
                    "name": "Message",
                    "elements": [
                        [
                            "del_manager",
                            "address"
                        ],
                        [
                            "msg",
                            "byte[100]"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "gas()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_validator_asa(uint64)(uint64,uint64)": {
            "read_only": true,
            "structs": {
                "output": {
                    "name": "ValidatorASA",
                    "elements": [
                        [
                            "total_earning",
                            "uint64"
                        ],
                        [
                            "total_fees_generated",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCgpzbWFydF9jb250cmFjdHMudmFsaWRhdG9yX2FkLmNvbnRyYWN0LlZhbGlkYXRvckFkLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 11,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "cnt_asa": {
                    "type": "uint64",
                    "key": "cnt_asa"
                },
                "cnt_del": {
                    "type": "uint64",
                    "key": "cnt_del"
                },
                "cnt_del_max": {
                    "type": "uint64",
                    "key": "cnt_del_max"
                },
                "del_app_list": {
                    "type": "bytes",
                    "key": "del_app_list"
                },
                "noticeboard_app_id": {
                    "type": "uint64",
                    "key": "noticeboard_app_id"
                },
                "state": {
                    "type": "bytes",
                    "key": "state"
                },
                "tc_sha256": {
                    "type": "bytes",
                    "key": "tc_sha256"
                },
                "terms_price": {
                    "type": "bytes",
                    "key": "P"
                },
                "terms_reqs": {
                    "type": "bytes",
                    "key": "G"
                },
                "terms_stake": {
                    "type": "bytes",
                    "key": "S"
                },
                "terms_time": {
                    "type": "bytes",
                    "key": "T"
                },
                "terms_warn": {
                    "type": "bytes",
                    "key": "W"
                },
                "total_algo_earned": {
                    "type": "uint64",
                    "key": "total_algo_earned"
                },
                "total_algo_fees_generated": {
                    "type": "uint64",
                    "key": "total_algo_fees_generated"
                },
                "val_info": {
                    "type": "bytes",
                    "key": "V",
                    "descr": "Self-disclosed information about validator."
                },
                "val_manager": {
                    "type": "bytes",
                    "key": "val_manager"
                },
                "val_owner": {
                    "type": "bytes",
                    "key": "val_owner"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ValidatorAd",
        "methods": [
            {
                "name": "ad_create",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address for the validator ad."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created validator ad application."
                },
                "desc": "Creates a new ValidatorAd.\nDefines validator ad owner account. Defines Noticeboard app ID to which this contract belongs to."
            },
            {
                "name": "ad_config",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    },
                    {
                        "type": "address",
                        "name": "val_manager",
                        "desc": "Manager address for the validator ad."
                    },
                    {
                        "type": "bool",
                        "name": "live",
                        "desc": "Set to True if validator ad should be accepting new delegators, otherwise set to False."
                    },
                    {
                        "type": "uint64",
                        "name": "cnt_del_max",
                        "desc": "Maximum number of delegators the validator is willing to manage simultaneously."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets all operation configuration parameters for the validator ad, i.e.\nthe validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept."
            },
            {
                "name": "ad_delete",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Validator owner deletes a validator ad.\nPossible only if there are no active delegators and all balances have been claimed."
            },
            {
                "name": "ad_ready",
                "args": [
                    {
                        "type": "address",
                        "name": "val_manager",
                        "desc": "Manager address for the validator ad."
                    },
                    {
                        "type": "bool",
                        "name": "ready",
                        "desc": "Set to True if validator manager is ready for accepting new delegators, otherwise set to False."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Ad manager sets its readiness for operation."
            },
            {
                "name": "ad_self_disclose",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    },
                    {
                        "type": "(byte[30],byte[60],byte[2],uint64,byte[20])",
                        "name": "val_info",
                        "desc": "Self-disclosed information about the validator."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Ad owner sets its self-disclosure information."
            },
            {
                "name": "ad_terms",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    },
                    {
                        "type": "byte[32]",
                        "name": "tc_sha256",
                        "desc": "Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64)",
                        "name": "terms_time",
                        "desc": "Validator's terms about timing."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64)",
                        "name": "terms_price",
                        "desc": "Validator's terms about pricing."
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "terms_stake",
                        "desc": "Validator's terms about stake limits."
                    },
                    {
                        "type": "((uint64,uint64)[2])",
                        "name": "terms_reqs",
                        "desc": "Validator's terms about gating requirements."
                    },
                    {
                        "type": "(uint64,uint64)",
                        "name": "terms_warn",
                        "desc": "Validator's terms about warnings."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Transaction for the payment of MBR increase."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sets all the terms of the validator.\nWith this action, the validator agrees with the (new) terms."
            },
            {
                "name": "ad_income",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "Withdrawn income from the validator ad for the input asset."
                },
                "desc": "Validator owner withdraws all available balance from the validator ad for the given asset."
            },
            {
                "name": "ad_asa_close",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like remove its storage."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Removes the asset's storage on the validator ad.\nTo be used before deleting the contract."
            },
            {
                "name": "template_load_init",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "template_size",
                        "desc": "Size of the delegator contract template in bytes."
                    },
                    {
                        "type": "pay",
                        "name": "mbr_txn",
                        "desc": "Payment transaction for the payment of the increase of validator ad MBR due to creation of box for storing the delegator contract template."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Starts the process of uploading delegator contract template."
            },
            {
                "name": "template_load_data",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    },
                    {
                        "type": "uint64",
                        "name": "offset",
                        "desc": "Offset in the box at which to replace the data."
                    },
                    {
                        "type": "byte[]",
                        "name": "data",
                        "desc": "Data to replace in the box at the defined position."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Uploads a data chunk to the delegator contract template."
            },
            {
                "name": "template_load_end",
                "args": [
                    {
                        "type": "address",
                        "name": "val_owner",
                        "desc": "Owner address of the validator ad."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Ends uploading of the delegator contract template."
            },
            {
                "name": "contract_create",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Manager address for the delegation contract."
                    },
                    {
                        "type": "address",
                        "name": "del_beneficiary",
                        "desc": "Beneficiary address for the delegation contract."
                    },
                    {
                        "type": "uint64",
                        "name": "rounds_duration",
                        "desc": "Contract duration in number of rounds."
                    },
                    {
                        "type": "uint64",
                        "name": "stake_max",
                        "desc": "The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration."
                    },
                    {
                        "type": "address",
                        "name": "partner_address",
                        "desc": "Address of the partner that collects the partner convenience fees. If there is no partner, set it to Global.zero_address."
                    },
                    {
                        "type": "uint64",
                        "name": "partner_commission",
                        "desc": "Commission charged on top of validator price for partner's convenience offer. The value is represented in ppm."
                    },
                    {
                        "type": "pay",
                        "name": "mbr_txn",
                        "desc": "Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract."
                    },
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "Transaction for the payment of the setup and operational fee."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created delegator contract application."
                },
                "desc": "Creates a new delegator contract with the current delegation terms for the input\ndelegator contract manager and delegator contract beneficiary with the specified duration."
            },
            {
                "name": "keys_confirm",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Purported delegator manager account."
                    },
                    {
                        "type": "application",
                        "name": "del_app"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys\nand pays for the operational fee."
            },
            {
                "name": "keys_not_confirmed",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that keys of a delegator contract have not been confirmed in time."
            },
            {
                "name": "keys_not_submitted",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that keys of a delegator contract have not been submitted in time."
            },
            {
                "name": "keys_submit",
                "args": [
                    {
                        "type": "address",
                        "name": "val_manager",
                        "desc": "Purported validator manager account."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    },
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_txn_info",
                        "desc": "Information about the generated participation keys."
                    }
                ],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Validator manager submits the keys generated for the delegator beneficiary according to the contract terms."
            },
            {
                "name": "breach_limits",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(bool,(uint64,uint64,uint64),address,byte[100])",
                    "desc": "Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."
                },
                "desc": "Reports that a limit breach event occurred on the delegator beneficiary."
            },
            {
                "name": "breach_pay",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that a payment for the fee cannot be made from the delegator contract.\nThis can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager."
            },
            {
                "name": "breach_suspended",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "((uint64,uint64,uint64),address,byte[100])",
                    "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Reports that the delegator beneficiary was suspended by consensus."
            },
            {
                "name": "contract_claim",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,uint64)",
                    "desc": "Amount of earnings of validator which equal any not yet claimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
                },
                "desc": "Claims the operational fee up to this round from a delegator contract and\ntransfers it to the validator ad as well as the commission to the platform."
            },
            {
                "name": "contract_expired",
                "args": [
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that a delegator contract has expired."
            },
            {
                "name": "contract_withdraw",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Purported delegator manager account."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Reports that a delegator has gracefully withdrawn from the contract prematurely.\nThe delegator beneficiary should issue a key deregistration transaction 320 round before this call."
            },
            {
                "name": "contract_delete",
                "args": [
                    {
                        "type": "address",
                        "name": "del_manager",
                        "desc": "Purported delegator manager account."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)"
                },
                "desc": "Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd."
            },
            {
                "name": "contract_report_expiry_soon",
                "args": [
                    {
                        "type": "uint64",
                        "name": "before_expiry",
                        "desc": "How many rounds before contract end can the report be made."
                    },
                    {
                        "type": "uint64",
                        "name": "report_period",
                        "desc": "How frequently can the report be made."
                    },
                    {
                        "type": "application",
                        "name": "del_app",
                        "desc": "App ID of the delegator contract."
                    }
                ],
                "returns": {
                    "type": "(address,byte[100])",
                    "desc": "Address of delegator manager."
                },
                "desc": "Reports that the contract will expire soon."
            },
            {
                "name": "gas",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "To fit more resources in app reference arrays."
            },
            {
                "name": "get_validator_asa",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64)",
                    "desc": "Information about the payment asset that is or was accepted on the platform."
                },
                "desc": "Returns information about the ASA that is or was supported by the validator ad at any point of time before\ndeletion."
            }
        ],
        "networks": {},
        "desc": "\n    Ad of a validator owner to offer node running services to users.\n    Users, i.e. delegators, can open requests for the service and conclude an individual delegator contract with the\n    validator.\n    The contract terms are defined by this ad contents at time of the creation of the delegator contract.\n    The validator owner can change the ad to offer different terms for future delegator contracts.\n    The validator ad smart contract also acts as an escrow account for the payment received by the validator from\n    delegators for its service.\n\n    Global state\n    ------------\n    noticeboard_app_id : UInt64\n        App ID of noticeboard platform to which this contract belongs to.\n\n    delegation_terms_general : DelegationTermsGeneral\n        General delegation terms that validator defines and agrees to respect if a delegator concludes a delegator\n        contract based on them.\n    delegation_terms_balance : DelegationTermsBalance\n        Requirements for delegator beneficiary balance that validator defines and agrees to respect if a delegator\n        concludes a delegator contract based on them.\n\n    val_owner : Account\n        Validator owner account.\n    val_manager : Account\n        Validator manager account.\n\n    val_info : ValidatorSelfDisclosure\n        Self-disclosed information about the validator.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - validator ad has been created.\n            TEMPLATE_LOAD - validator ad is getting loaded the delegator contract template.\n            TEMPLATE_LOADED - validator ad ended loading of the delegator contract template.\n            SET - initial terms of validator ad have been set.\n            READY - validator ad manager is ready to accept new delegators.\n            NOT_READY - validator ad manager is not ready to accept new delegators.\n            NOT_LIVE - validator ad owner does not want to accept new delegators.\n\n    cnt_del : UInt64\n        Counter of current delegators.\n    cnt_del_max : UInt64\n        Maximum number of delegators the validator is willing to manage simultaneously.\n    del_app_list : DelAppList\n        List of app ID of the currently active delegator contracts.\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator.\n\n    total_algo_earned : UInt64\n        Total amount of ALGO the validator ad has earned.\n    total_algo_fees_generated : UInt64\n        Total amount of ALGO the validator has generated as fees for the platform.\n\n    cnt_asa : UInt64\n        Counter of number of different ASAs supported by the contract.\n\n    Box storage\n    -----------\n    asas : asa_[ASA_ID] = ValidatorASA\n        Box map for storing ASA IDs that are or were supported by the validator ad at any point of time before deletion.\n        Each entry is a ValidatorASA, with fields for total_earnings and total_fees_generated for that ASA.\n        Keys correspond to \"asa_\" followed by byte representation of ASA ID.\n\n    template : BOX_DELEGATOR_CONTRACT_TEMPLATE_KEY = Bytes\n        Box for storing the delegator contract template.\n\n    Methods\n    -------\n    ad_create(\n        val_owner: arc4.Address,\n    ) -> arc4.UInt64:\n        Creates a new validator ad and returns its app ID.\n\n    ad_config(\n        val_owner: arc4.Address,\n        val_manager: arc4.Address,\n        live : arc4.Bool,\n        cnt_del_max : UInt64,\n    ) -> None:\n        Set the operational configuration of the validator ad.\n\n    ad_delete(\n        val_owner: arc4.Address,\n    ) -> None:\n        Validator owner deletes a validator ad.\n\n    ad_ready(\n        val_manager: arc4.Address,\n        ready: arc4.Bool,\n    ) -> None:\n        Ad manager sets its readiness for operation.\n\n    ad_self_disclose(\n        val_owner: arc4.Address,\n        val_info: ValidatorSelfDisclosure,\n    ) -> None:\n        Ad owner sets its self-disclosure information.\n\n    ad_terms(\n        val_owner: arc4.Address,\n        tc_sha256: Sha256,\n        terms_time: ValidatorTermsTiming,\n        terms_price: ValidatorTermsPricing,\n        terms_stake: ValidatorTermsStakeLimits,\n        terms_reqs: ValidatorTermsGating,\n        terms_warn: ValidatorTermsWarnings,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Sets all the terms of the validator.\n\n    ad_income(\n        val_owner: arc4.Address,\n        asset_id: UInt64,\n    ) -> arc4.UInt64:\n        Validator owner withdraws all available balance from the validator ad for the given asset.\n\n    ad_asa_close(\n        val_owner: arc4.Address,\n        asset_id: UInt64,\n    ) -> None:\n        Removes the asset's storage on the validator ad.\n\n    template_load_init(\n        val_owner: arc4.Address,\n        template_size: UInt64,\n        mbr_txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Starts the process of uploading delegator contract template.\n\n    template_load_data(\n        val_owner: arc4.Address,\n        offset: UInt64,\n        data: Bytes,\n    ) -> None:\n        Uploads a data chunk to the delegator contract template.\n\n    template_load_end(\n        val_owner: arc4.Address,\n    ) -> None:\n        Ends uploading of the delegator contract template.\n\n    contract_create(\n        del_manager: arc4.Address,\n        del_beneficiary: arc4.Address,\n        rounds_duration: UInt64,\n        stake_max: UInt64,\n        partner_address: arc4.Address,\n        partner_commission: UInt64,\n        mbr_txn: gtxn.PaymentTransaction,\n        txn: gtxn.Transaction,\n    ) -> arc4.UInt64:\n        Creates a new delegator contract with the current delegation terms for the input\n        delegator contract manager and delegator contract beneficiary with the specified duration.\n\n    keys_confirm(\n        del_manager: arc4.Address,\n        del_app: Application,\n    ) -> None:\n        Delegator manager confirms that the keys have been confirmed by the delegator beneficiary.\n\n    keys_not_confirmed(\n        del_app: Application,\n    ) -> Message:\n        Reports that keys of a delegator contract have not been confirmed in time.\n\n    keys_not_submitted(\n        del_app: Application,\n    ) -> Message:\n        Reports that keys of a delegator contract have not been submitted in time.\n\n    keys_submit(\n        val_manager: arc4.Address,\n        del_app: Application,\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> Message:\n        Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.\n\n    breach_limits(\n        del_app: Application,\n    ) -> BreachLimitsReturn:\n        Reports that a limit breach event occurred on the delegator beneficiary.\n\n    breach_pay(\n        del_app: Application,\n    ) -> Message:\n        Reports that a payment for the fee cannot be made from the delegator beneficiary.\n\n    breach_suspended(\n        del_app: Application,\n    ) -> EarningsDistributionAndMessage:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n        del_app: Application,\n    ) -> EarningsDistribution:\n        Claims and distributes the operational fee of validator up to this round to the validator and noticeboard.\n\n    contract_expired(\n        del_app: Application,\n    ) -> Message:\n        Reports that a delegator contract has expired.\n\n    contract_withdraw(\n        del_manager: arc4.Address,\n        del_app: Application,\n    ) -> None:\n        Reports that a delegator has gracefully withdrawn from the delegator contract prematurely.\n\n    contract_delete(\n        del_manager: arc4.Address,\n        del_app: Application,\n    ) -> ContractDeleteReturn:\n        Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.\n\n    contract_report_expiry_soon(\n        before_expiry: UInt64,\n        report_period: UInt64,\n    ) -> Message:\n        Reports that the contract will expire soon.\n\n    gas(\n    ) -> None:\n        To fit more resources in app reference arrays.\n\n    Private methods\n    ---------------\n    _add_del_to_list(self, del_app_id: UInt64) -> bool:\n        Assign created delegator contract to first free space in the list of delegator contracts.\n\n    _remove_del_from_list(self, del_app_id: UInt64) -> bool:\n        Remove the delegator contract from list of delegator contracts.\n\n    _exists_del_in_list(self, del_app_id: UInt64) -> bool:\n        Checks if a delegator contract exists in validator ad's list of delegator contracts.\n\n    _mark_validator_earnings(self, earnings_distribution: EarningsDistribution) -> None:\n        Mark increase in validator's earnings.\n\n    "
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class AdConfigArgs(_ArgsBase[None]):
    """Sets all operation configuration parameters for the validator ad, i.e.
    the validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept."""

    val_owner: str
    """Owner address of the validator ad."""
    val_manager: str
    """Manager address for the validator ad."""
    live: bool
    """Set to True if validator ad should be accepting new delegators, otherwise set to False."""
    cnt_del_max: int
    """Maximum number of delegators the validator is willing to manage simultaneously."""

    @staticmethod
    def method() -> str:
        return "ad_config(address,address,bool,uint64)void"


@dataclasses.dataclass(kw_only=True)
class AdReadyArgs(_ArgsBase[None]):
    """Ad manager sets its readiness for operation."""

    val_manager: str
    """Manager address for the validator ad."""
    ready: bool
    """Set to True if validator manager is ready for accepting new delegators, otherwise set to False."""

    @staticmethod
    def method() -> str:
        return "ad_ready(address,bool)void"


@dataclasses.dataclass(kw_only=True)
class ValidatorSelfDisclosure:
    name: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    https: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    country_code: bytes | bytearray | tuple[int, int]
    hw_cat: int
    node_version: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class AdSelfDiscloseArgs(_ArgsBase[None]):
    """Ad owner sets its self-disclosure information."""

    val_owner: str
    """Owner address of the validator ad."""
    val_info: ValidatorSelfDisclosure
    """Self-disclosed information about the validator."""

    @staticmethod
    def method() -> str:
        return "ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void"


@dataclasses.dataclass(kw_only=True)
class ValidatorTermsTiming:
    rounds_setup: int
    rounds_confirm: int
    rounds_duration_min: int
    rounds_duration_max: int
    round_max_end: int


@dataclasses.dataclass(kw_only=True)
class ValidatorTermsPricing:
    commission: int
    fee_round_min: int
    fee_round_var: int
    fee_setup: int
    fee_asset_id: int


@dataclasses.dataclass(kw_only=True)
class ValidatorTermsStakeLimits:
    stake_max: int
    stake_gratis: int


@dataclasses.dataclass(kw_only=True)
class ValidatorTermsGating:
    gating_asa_list: list[tuple[int, int]] | tuple[tuple[int, int], tuple[int, int]]


@dataclasses.dataclass(kw_only=True)
class ValidatorTermsWarnings:
    cnt_warning_max: int
    rounds_warning: int


@dataclasses.dataclass(kw_only=True)
class AdTermsArgs(_ArgsBase[None]):
    """Sets all the terms of the validator.
    With this action, the validator agrees with the (new) terms."""

    val_owner: str
    """Owner address of the validator ad."""
    tc_sha256: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    """Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator."""
    terms_time: ValidatorTermsTiming
    """Validator's terms about timing."""
    terms_price: ValidatorTermsPricing
    """Validator's terms about pricing."""
    terms_stake: ValidatorTermsStakeLimits
    """Validator's terms about stake limits."""
    terms_reqs: ValidatorTermsGating
    """Validator's terms about gating requirements."""
    terms_warn: ValidatorTermsWarnings
    """Validator's terms about warnings."""
    txn: TransactionWithSigner
    """Transaction for the payment of MBR increase."""

    @staticmethod
    def method() -> str:
        return "ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void"


@dataclasses.dataclass(kw_only=True)
class AdIncomeArgs(_ArgsBase[int]):
    """Validator owner withdraws all available balance from the validator ad for the given asset."""

    val_owner: str
    """Owner address of the validator ad."""
    asset_id: int
    """ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad."""

    @staticmethod
    def method() -> str:
        return "ad_income(address,uint64)uint64"


@dataclasses.dataclass(kw_only=True)
class AdAsaCloseArgs(_ArgsBase[None]):
    """Removes the asset's storage on the validator ad.
    To be used before deleting the contract."""

    val_owner: str
    """Owner address of the validator ad."""
    asset_id: int
    """ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like remove its storage."""

    @staticmethod
    def method() -> str:
        return "ad_asa_close(address,uint64)void"


@dataclasses.dataclass(kw_only=True)
class TemplateLoadInitArgs(_ArgsBase[None]):
    """Starts the process of uploading delegator contract template."""

    val_owner: str
    """Owner address of the validator ad."""
    template_size: int
    """Size of the delegator contract template in bytes."""
    mbr_txn: TransactionWithSigner
    """Payment transaction for the payment of the increase of validator ad MBR due to creation of box for storing the delegator contract template."""

    @staticmethod
    def method() -> str:
        return "template_load_init(address,uint64,pay)void"


@dataclasses.dataclass(kw_only=True)
class TemplateLoadDataArgs(_ArgsBase[None]):
    """Uploads a data chunk to the delegator contract template."""

    val_owner: str
    """Owner address of the validator ad."""
    offset: int
    """Offset in the box at which to replace the data."""
    data: bytes | bytearray
    """Data to replace in the box at the defined position."""

    @staticmethod
    def method() -> str:
        return "template_load_data(address,uint64,byte[])void"


@dataclasses.dataclass(kw_only=True)
class TemplateLoadEndArgs(_ArgsBase[None]):
    """Ends uploading of the delegator contract template."""

    val_owner: str
    """Owner address of the validator ad."""

    @staticmethod
    def method() -> str:
        return "template_load_end(address)void"


@dataclasses.dataclass(kw_only=True)
class ContractCreateArgs(_ArgsBase[int]):
    """Creates a new delegator contract with the current delegation terms for the input
    delegator contract manager and delegator contract beneficiary with the specified duration."""

    del_manager: str
    """Manager address for the delegation contract."""
    del_beneficiary: str
    """Beneficiary address for the delegation contract."""
    rounds_duration: int
    """Contract duration in number of rounds."""
    stake_max: int
    """The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration."""
    partner_address: str
    """Address of the partner that collects the partner convenience fees. If there is no partner, set it to Global.zero_address."""
    partner_commission: int
    """Commission charged on top of validator price for partner's convenience offer. The value is represented in ppm."""
    mbr_txn: TransactionWithSigner
    """Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract."""
    txn: TransactionWithSigner
    """Transaction for the payment of the setup and operational fee."""

    @staticmethod
    def method() -> str:
        return "contract_create(address,address,uint64,uint64,address,uint64,pay,txn)uint64"


@dataclasses.dataclass(kw_only=True)
class KeysConfirmArgs(_ArgsBase[None]):
    """Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys
    and pays for the operational fee."""

    del_manager: str
    """Purported delegator manager account."""
    del_app: int

    @staticmethod
    def method() -> str:
        return "keys_confirm(address,application)void"


@dataclasses.dataclass(kw_only=True)
class Message:
    del_manager: str
    msg: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class KeysNotConfirmedArgs(_ArgsBase[Message]):
    """Reports that keys of a delegator contract have not been confirmed in time."""

    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "keys_not_confirmed(application)(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class KeysNotSubmittedArgs(_ArgsBase[Message]):
    """Reports that keys of a delegator contract have not been submitted in time."""

    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "keys_not_submitted(application)(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class KeyRegTxnInfo:
    vote_first: int
    vote_last: int
    vote_key_dilution: int
    vote_pk: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    selection_pk: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    state_proof_pk: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    sender: str


@dataclasses.dataclass(kw_only=True)
class KeysSubmitArgs(_ArgsBase[Message]):
    """Validator manager submits the keys generated for the delegator beneficiary according to the contract terms."""

    val_manager: str
    """Purported validator manager account."""
    del_app: int
    """App ID of the delegator contract."""
    key_reg_txn_info: KeyRegTxnInfo
    """Information about the generated participation keys."""

    @staticmethod
    def method() -> str:
        return "keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class BreachLimitsReturn:
    max_breach_reached: bool
    earnings_distribution: tuple[int, int, int]
    del_manager: str
    msg: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class BreachLimitsArgs(_ArgsBase[BreachLimitsReturn]):
    """Reports that a limit breach event occurred on the delegator beneficiary."""

    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class BreachPayArgs(_ArgsBase[Message]):
    """Reports that a payment for the fee cannot be made from the delegator contract.
    This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager."""

    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "breach_pay(application)(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class EarningsDistributionAndMessage:
    earnings_distribution: tuple[int, int, int]
    del_manager: str
    msg: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]


@dataclasses.dataclass(kw_only=True)
class BreachSuspendedArgs(_ArgsBase[EarningsDistributionAndMessage]):
    """Reports that the delegator beneficiary was suspended by consensus."""

    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "breach_suspended(application)((uint64,uint64,uint64),address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class EarningsDistribution:
    user: int
    platform: int
    asset_id: int


@dataclasses.dataclass(kw_only=True)
class ContractClaimArgs(_ArgsBase[EarningsDistribution]):
    """Claims the operational fee up to this round from a delegator contract and
    transfers it to the validator ad as well as the commission to the platform."""

    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "contract_claim(application)(uint64,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class ContractExpiredArgs(_ArgsBase[Message]):
    """Reports that a delegator contract has expired."""

    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "contract_expired(application)(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class ContractWithdrawArgs(_ArgsBase[None]):
    """Reports that a delegator has gracefully withdrawn from the contract prematurely.
    The delegator beneficiary should issue a key deregistration transaction 320 round before this call."""

    del_manager: str
    """Purported delegator manager account."""
    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "contract_withdraw(address,application)void"


@dataclasses.dataclass(kw_only=True)
class ContractDeleteReturn:
    remaining_balance: int
    asset_id: int


@dataclasses.dataclass(kw_only=True)
class ContractDeleteArgs(_ArgsBase[ContractDeleteReturn]):
    """Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd."""

    del_manager: str
    """Purported delegator manager account."""
    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "contract_delete(address,application)(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class ContractReportExpirySoonArgs(_ArgsBase[Message]):
    """Reports that the contract will expire soon."""

    before_expiry: int
    """How many rounds before contract end can the report be made."""
    report_period: int
    """How frequently can the report be made."""
    del_app: int
    """App ID of the delegator contract."""

    @staticmethod
    def method() -> str:
        return "contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])"


@dataclasses.dataclass(kw_only=True)
class GasArgs(_ArgsBase[None]):
    """To fit more resources in app reference arrays."""

    @staticmethod
    def method() -> str:
        return "gas()void"


@dataclasses.dataclass(kw_only=True)
class ValidatorAsa:
    total_earning: int
    total_fees_generated: int


@dataclasses.dataclass(kw_only=True)
class GetValidatorAsaArgs(_ArgsBase[ValidatorAsa]):
    """Returns information about the ASA that is or was supported by the validator ad at any point of time before
    deletion."""

    asset_id: int

    @staticmethod
    def method() -> str:
        return "get_validator_asa(uint64)(uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class AdCreateArgs(_ArgsBase[int]):
    """Creates a new ValidatorAd.
    Defines validator ad owner account. Defines Noticeboard app ID to which this contract belongs to."""

    val_owner: str
    """Owner address for the validator ad."""

    @staticmethod
    def method() -> str:
        return "ad_create(address)uint64"


@dataclasses.dataclass(kw_only=True)
class AdDeleteArgs(_ArgsBase[None]):
    """Validator owner deletes a validator ad.
    Possible only if there are no active delegators and all balances have been claimed."""

    val_owner: str
    """Owner address of the validator ad."""

    @staticmethod
    def method() -> str:
        return "ad_delete(address)void"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.cnt_asa = typing.cast(int, data.get(b"cnt_asa"))
        self.cnt_del = typing.cast(int, data.get(b"cnt_del"))
        self.cnt_del_max = typing.cast(int, data.get(b"cnt_del_max"))
        self.del_app_list = ByteReader(typing.cast(bytes, data.get(b"del_app_list")))
        self.noticeboard_app_id = typing.cast(int, data.get(b"noticeboard_app_id"))
        self.state = ByteReader(typing.cast(bytes, data.get(b"state")))
        self.tc_sha256 = ByteReader(typing.cast(bytes, data.get(b"tc_sha256")))
        self.terms_price = ByteReader(typing.cast(bytes, data.get(b"P")))
        self.terms_reqs = ByteReader(typing.cast(bytes, data.get(b"G")))
        self.terms_stake = ByteReader(typing.cast(bytes, data.get(b"S")))
        self.terms_time = ByteReader(typing.cast(bytes, data.get(b"T")))
        self.terms_warn = ByteReader(typing.cast(bytes, data.get(b"W")))
        self.total_algo_earned = typing.cast(int, data.get(b"total_algo_earned"))
        self.total_algo_fees_generated = typing.cast(int, data.get(b"total_algo_fees_generated"))
        self.val_info = ByteReader(typing.cast(bytes, data.get(b"V")))
        """Self-disclosed information about validator."""
        self.val_manager = ByteReader(typing.cast(bytes, data.get(b"val_manager")))
        self.val_owner = ByteReader(typing.cast(bytes, data.get(b"val_owner")))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def ad_config(
        self,
        *,
        val_owner: str,
        val_manager: str,
        live: bool,
        cnt_del_max: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets all operation configuration parameters for the validator ad, i.e.
        the validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept.
        
        Adds a call to `ad_config(address,address,bool,uint64)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param str val_manager: Manager address for the validator ad.
        :param bool live: Set to True if validator ad should be accepting new delegators, otherwise set to False.
        :param int cnt_del_max: Maximum number of delegators the validator is willing to manage simultaneously.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdConfigArgs(
            val_owner=val_owner,
            val_manager=val_manager,
            live=live,
            cnt_del_max=cnt_del_max,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def ad_ready(
        self,
        *,
        val_manager: str,
        ready: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Ad manager sets its readiness for operation.
        
        Adds a call to `ad_ready(address,bool)void` ABI method
        
        :param str val_manager: Manager address for the validator ad.
        :param bool ready: Set to True if validator manager is ready for accepting new delegators, otherwise set to False.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdReadyArgs(
            val_manager=val_manager,
            ready=ready,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def ad_self_disclose(
        self,
        *,
        val_owner: str,
        val_info: ValidatorSelfDisclosure,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Ad owner sets its self-disclosure information.
        
        Adds a call to `ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param ValidatorSelfDisclosure val_info: Self-disclosed information about the validator.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdSelfDiscloseArgs(
            val_owner=val_owner,
            val_info=val_info,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def ad_terms(
        self,
        *,
        val_owner: str,
        tc_sha256: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        terms_time: ValidatorTermsTiming,
        terms_price: ValidatorTermsPricing,
        terms_stake: ValidatorTermsStakeLimits,
        terms_reqs: ValidatorTermsGating,
        terms_warn: ValidatorTermsWarnings,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sets all the terms of the validator.
        With this action, the validator agrees with the (new) terms.
        
        Adds a call to `ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] tc_sha256: Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator.
        :param ValidatorTermsTiming terms_time: Validator's terms about timing.
        :param ValidatorTermsPricing terms_price: Validator's terms about pricing.
        :param ValidatorTermsStakeLimits terms_stake: Validator's terms about stake limits.
        :param ValidatorTermsGating terms_reqs: Validator's terms about gating requirements.
        :param ValidatorTermsWarnings terms_warn: Validator's terms about warnings.
        :param TransactionWithSigner txn: Transaction for the payment of MBR increase.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdTermsArgs(
            val_owner=val_owner,
            tc_sha256=tc_sha256,
            terms_time=terms_time,
            terms_price=terms_price,
            terms_stake=terms_stake,
            terms_reqs=terms_reqs,
            terms_warn=terms_warn,
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def ad_income(
        self,
        *,
        val_owner: str,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Validator owner withdraws all available balance from the validator ad for the given asset.
        
        Adds a call to `ad_income(address,uint64)uint64` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int asset_id: ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdIncomeArgs(
            val_owner=val_owner,
            asset_id=asset_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def ad_asa_close(
        self,
        *,
        val_owner: str,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Removes the asset's storage on the validator ad.
        To be used before deleting the contract.
        
        Adds a call to `ad_asa_close(address,uint64)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int asset_id: ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like remove its storage.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdAsaCloseArgs(
            val_owner=val_owner,
            asset_id=asset_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def template_load_init(
        self,
        *,
        val_owner: str,
        template_size: int,
        mbr_txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Starts the process of uploading delegator contract template.
        
        Adds a call to `template_load_init(address,uint64,pay)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int template_size: Size of the delegator contract template in bytes.
        :param TransactionWithSigner mbr_txn: Payment transaction for the payment of the increase of validator ad MBR due to creation of box for storing the delegator contract template.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TemplateLoadInitArgs(
            val_owner=val_owner,
            template_size=template_size,
            mbr_txn=mbr_txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def template_load_data(
        self,
        *,
        val_owner: str,
        offset: int,
        data: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Uploads a data chunk to the delegator contract template.
        
        Adds a call to `template_load_data(address,uint64,byte[])void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int offset: Offset in the box at which to replace the data.
        :param bytes | bytearray data: Data to replace in the box at the defined position.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TemplateLoadDataArgs(
            val_owner=val_owner,
            offset=offset,
            data=data,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def template_load_end(
        self,
        *,
        val_owner: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Ends uploading of the delegator contract template.
        
        Adds a call to `template_load_end(address)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TemplateLoadEndArgs(
            val_owner=val_owner,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_create(
        self,
        *,
        del_manager: str,
        del_beneficiary: str,
        rounds_duration: int,
        stake_max: int,
        partner_address: str,
        partner_commission: int,
        mbr_txn: TransactionWithSigner,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Creates a new delegator contract with the current delegation terms for the input
        delegator contract manager and delegator contract beneficiary with the specified duration.
        
        Adds a call to `contract_create(address,address,uint64,uint64,address,uint64,pay,txn)uint64` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param str del_beneficiary: Beneficiary address for the delegation contract.
        :param int rounds_duration: Contract duration in number of rounds.
        :param int stake_max: The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration.
        :param str partner_address: Address of the partner that collects the partner convenience fees. If there is no partner, set it to Global.zero_address.
        :param int partner_commission: Commission charged on top of validator price for partner's convenience offer. The value is represented in ppm.
        :param TransactionWithSigner mbr_txn: Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract.
        :param TransactionWithSigner txn: Transaction for the payment of the setup and operational fee.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractCreateArgs(
            del_manager=del_manager,
            del_beneficiary=del_beneficiary,
            rounds_duration=rounds_duration,
            stake_max=stake_max,
            partner_address=partner_address,
            partner_commission=partner_commission,
            mbr_txn=mbr_txn,
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_confirm(
        self,
        *,
        del_manager: str,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys
        and pays for the operational fee.
        
        Adds a call to `keys_confirm(address,application)void` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param int del_app: The `del_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysConfirmArgs(
            del_manager=del_manager,
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_confirmed(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that keys of a delegator contract have not been confirmed in time.
        
        Adds a call to `keys_not_confirmed(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotConfirmedArgs(
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_not_submitted(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that keys of a delegator contract have not been submitted in time.
        
        Adds a call to `keys_not_submitted(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysNotSubmittedArgs(
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def keys_submit(
        self,
        *,
        val_manager: str,
        del_app: int,
        key_reg_txn_info: KeyRegTxnInfo,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.
        
        Adds a call to `keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])` ABI method
        
        :param str val_manager: Purported validator manager account.
        :param int del_app: App ID of the delegator contract.
        :param KeyRegTxnInfo key_reg_txn_info: Information about the generated participation keys.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = KeysSubmitArgs(
            val_manager=val_manager,
            del_app=del_app,
            key_reg_txn_info=key_reg_txn_info,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def breach_limits(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that a limit breach event occurred on the delegator beneficiary.
        
        Adds a call to `breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BreachLimitsArgs(
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def breach_pay(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that a payment for the fee cannot be made from the delegator contract.
        This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
        
        Adds a call to `breach_pay(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BreachPayArgs(
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def breach_suspended(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that the delegator beneficiary was suspended by consensus.
        
        Adds a call to `breach_suspended(application)((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BreachSuspendedArgs(
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_claim(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Claims the operational fee up to this round from a delegator contract and
        transfers it to the validator ad as well as the commission to the platform.
        
        Adds a call to `contract_claim(application)(uint64,uint64,uint64)` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractClaimArgs(
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_expired(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that a delegator contract has expired.
        
        Adds a call to `contract_expired(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractExpiredArgs(
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_withdraw(
        self,
        *,
        del_manager: str,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that a delegator has gracefully withdrawn from the contract prematurely.
        The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
        
        Adds a call to `contract_withdraw(address,application)void` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractWithdrawArgs(
            del_manager=del_manager,
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_delete(
        self,
        *,
        del_manager: str,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.
        
        Adds a call to `contract_delete(address,application)(uint64,uint64)` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractDeleteArgs(
            del_manager=del_manager,
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def contract_report_expiry_soon(
        self,
        *,
        before_expiry: int,
        report_period: int,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Reports that the contract will expire soon.
        
        Adds a call to `contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])` ABI method
        
        :param int before_expiry: How many rounds before contract end can the report be made.
        :param int report_period: How frequently can the report be made.
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ContractReportExpirySoonArgs(
            before_expiry=before_expiry,
            report_period=report_period,
            del_app=del_app,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def gas(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """To fit more resources in app reference arrays.
        
        Adds a call to `gas()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GasArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def get_validator_asa(
        self,
        *,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Returns information about the ASA that is or was supported by the validator ad at any point of time before
        deletion.
        
        Adds a call to `get_validator_asa(uint64)(uint64,uint64)` ABI method
        
        :param int asset_id: The `asset_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GetValidatorAsaArgs(
            asset_id=asset_id,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_ad_create(
        self,
        *,
        val_owner: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Creates a new ValidatorAd.
        Defines validator ad owner account. Defines Noticeboard app ID to which this contract belongs to.
        
        Adds a call to `ad_create(address)uint64` ABI method
        
        :param str val_owner: Owner address for the validator ad.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdCreateArgs(
            val_owner=val_owner,
        )
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_ad_delete(
        self,
        *,
        val_owner: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Validator owner deletes a validator ad.
        Possible only if there are no active delegators and all balances have been claimed.
        
        Adds a call to `ad_delete(address)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdDeleteArgs(
            val_owner=val_owner,
        )
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class ValidatorAdClient:
    """
        Ad of a validator owner to offer node running services to users.
        Users, i.e. delegators, can open requests for the service and conclude an individual delegator contract with the
        validator.
        The contract terms are defined by this ad contents at time of the creation of the delegator contract.
        The validator owner can change the ad to offer different terms for future delegator contracts.
        The validator ad smart contract also acts as an escrow account for the payment received by the validator from
        delegators for its service.
    
        Global state
        ------------
        noticeboard_app_id : UInt64
            App ID of noticeboard platform to which this contract belongs to.
    
        delegation_terms_general : DelegationTermsGeneral
            General delegation terms that validator defines and agrees to respect if a delegator concludes a delegator
            contract based on them.
        delegation_terms_balance : DelegationTermsBalance
            Requirements for delegator beneficiary balance that validator defines and agrees to respect if a delegator
            concludes a delegator contract based on them.
    
        val_owner : Account
            Validator owner account.
        val_manager : Account
            Validator manager account.
    
        val_info : ValidatorSelfDisclosure
            Self-disclosed information about the validator.
    
        state : Bytes
            State of the contract. Can be one of the following:
                CREATED - validator ad has been created.
                TEMPLATE_LOAD - validator ad is getting loaded the delegator contract template.
                TEMPLATE_LOADED - validator ad ended loading of the delegator contract template.
                SET - initial terms of validator ad have been set.
                READY - validator ad manager is ready to accept new delegators.
                NOT_READY - validator ad manager is not ready to accept new delegators.
                NOT_LIVE - validator ad owner does not want to accept new delegators.
    
        cnt_del : UInt64
            Counter of current delegators.
        cnt_del_max : UInt64
            Maximum number of delegators the validator is willing to manage simultaneously.
        del_app_list : DelAppList
            List of app ID of the currently active delegator contracts.
    
        tc_sha256 : Sha256
            Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator.
    
        total_algo_earned : UInt64
            Total amount of ALGO the validator ad has earned.
        total_algo_fees_generated : UInt64
            Total amount of ALGO the validator has generated as fees for the platform.
    
        cnt_asa : UInt64
            Counter of number of different ASAs supported by the contract.
    
        Box storage
        -----------
        asas : asa_[ASA_ID] = ValidatorASA
            Box map for storing ASA IDs that are or were supported by the validator ad at any point of time before deletion.
            Each entry is a ValidatorASA, with fields for total_earnings and total_fees_generated for that ASA.
            Keys correspond to "asa_" followed by byte representation of ASA ID.
    
        template : BOX_DELEGATOR_CONTRACT_TEMPLATE_KEY = Bytes
            Box for storing the delegator contract template.
    
        Methods
        -------
        ad_create(
            val_owner: arc4.Address,
        ) -> arc4.UInt64:
            Creates a new validator ad and returns its app ID.
    
        ad_config(
            val_owner: arc4.Address,
            val_manager: arc4.Address,
            live : arc4.Bool,
            cnt_del_max : UInt64,
        ) -> None:
            Set the operational configuration of the validator ad.
    
        ad_delete(
            val_owner: arc4.Address,
        ) -> None:
            Validator owner deletes a validator ad.
    
        ad_ready(
            val_manager: arc4.Address,
            ready: arc4.Bool,
        ) -> None:
            Ad manager sets its readiness for operation.
    
        ad_self_disclose(
            val_owner: arc4.Address,
            val_info: ValidatorSelfDisclosure,
        ) -> None:
            Ad owner sets its self-disclosure information.
    
        ad_terms(
            val_owner: arc4.Address,
            tc_sha256: Sha256,
            terms_time: ValidatorTermsTiming,
            terms_price: ValidatorTermsPricing,
            terms_stake: ValidatorTermsStakeLimits,
            terms_reqs: ValidatorTermsGating,
            terms_warn: ValidatorTermsWarnings,
            txn: gtxn.PaymentTransaction,
        ) -> None:
            Sets all the terms of the validator.
    
        ad_income(
            val_owner: arc4.Address,
            asset_id: UInt64,
        ) -> arc4.UInt64:
            Validator owner withdraws all available balance from the validator ad for the given asset.
    
        ad_asa_close(
            val_owner: arc4.Address,
            asset_id: UInt64,
        ) -> None:
            Removes the asset's storage on the validator ad.
    
        template_load_init(
            val_owner: arc4.Address,
            template_size: UInt64,
            mbr_txn: gtxn.PaymentTransaction,
        ) -> None:
            Starts the process of uploading delegator contract template.
    
        template_load_data(
            val_owner: arc4.Address,
            offset: UInt64,
            data: Bytes,
        ) -> None:
            Uploads a data chunk to the delegator contract template.
    
        template_load_end(
            val_owner: arc4.Address,
        ) -> None:
            Ends uploading of the delegator contract template.
    
        contract_create(
            del_manager: arc4.Address,
            del_beneficiary: arc4.Address,
            rounds_duration: UInt64,
            stake_max: UInt64,
            partner_address: arc4.Address,
            partner_commission: UInt64,
            mbr_txn: gtxn.PaymentTransaction,
            txn: gtxn.Transaction,
        ) -> arc4.UInt64:
            Creates a new delegator contract with the current delegation terms for the input
            delegator contract manager and delegator contract beneficiary with the specified duration.
    
        keys_confirm(
            del_manager: arc4.Address,
            del_app: Application,
        ) -> None:
            Delegator manager confirms that the keys have been confirmed by the delegator beneficiary.
    
        keys_not_confirmed(
            del_app: Application,
        ) -> Message:
            Reports that keys of a delegator contract have not been confirmed in time.
    
        keys_not_submitted(
            del_app: Application,
        ) -> Message:
            Reports that keys of a delegator contract have not been submitted in time.
    
        keys_submit(
            val_manager: arc4.Address,
            del_app: Application,
            key_reg_txn_info : KeyRegTxnInfo,
        ) -> Message:
            Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.
    
        breach_limits(
            del_app: Application,
        ) -> BreachLimitsReturn:
            Reports that a limit breach event occurred on the delegator beneficiary.
    
        breach_pay(
            del_app: Application,
        ) -> Message:
            Reports that a payment for the fee cannot be made from the delegator beneficiary.
    
        breach_suspended(
            del_app: Application,
        ) -> EarningsDistributionAndMessage:
            Reports that the delegator beneficiary was suspended by consensus.
    
        contract_claim(
            del_app: Application,
        ) -> EarningsDistribution:
            Claims and distributes the operational fee of validator up to this round to the validator and noticeboard.
    
        contract_expired(
            del_app: Application,
        ) -> Message:
            Reports that a delegator contract has expired.
    
        contract_withdraw(
            del_manager: arc4.Address,
            del_app: Application,
        ) -> None:
            Reports that a delegator has gracefully withdrawn from the delegator contract prematurely.
    
        contract_delete(
            del_manager: arc4.Address,
            del_app: Application,
        ) -> ContractDeleteReturn:
            Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.
    
        contract_report_expiry_soon(
            before_expiry: UInt64,
            report_period: UInt64,
        ) -> Message:
            Reports that the contract will expire soon.
    
        gas(
        ) -> None:
            To fit more resources in app reference arrays.
    
        Private methods
        ---------------
        _add_del_to_list(self, del_app_id: UInt64) -> bool:
            Assign created delegator contract to first free space in the list of delegator contracts.
    
        _remove_del_from_list(self, del_app_id: UInt64) -> bool:
            Remove the delegator contract from list of delegator contracts.
    
        _exists_del_in_list(self, del_app_id: UInt64) -> bool:
            Checks if a delegator contract exists in validator ad's list of delegator contracts.
    
        _mark_validator_earnings(self, earnings_distribution: EarningsDistribution) -> None:
            Mark increase in validator's earnings.
    
        
    
    A class for interacting with the ValidatorAd app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        ValidatorAdClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def ad_config(
        self,
        *,
        val_owner: str,
        val_manager: str,
        live: bool,
        cnt_del_max: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets all operation configuration parameters for the validator ad, i.e.
        the validator manager account, the status whether the ad is live to accept new delegators (`live=True`) or not (`live=False`), and the maximum number of delegators the validators can accept.
        
        Calls `ad_config(address,address,bool,uint64)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param str val_manager: Manager address for the validator ad.
        :param bool live: Set to True if validator ad should be accepting new delegators, otherwise set to False.
        :param int cnt_del_max: Maximum number of delegators the validator is willing to manage simultaneously.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AdConfigArgs(
            val_owner=val_owner,
            val_manager=val_manager,
            live=live,
            cnt_del_max=cnt_del_max,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def ad_ready(
        self,
        *,
        val_manager: str,
        ready: bool,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Ad manager sets its readiness for operation.
        
        Calls `ad_ready(address,bool)void` ABI method
        
        :param str val_manager: Manager address for the validator ad.
        :param bool ready: Set to True if validator manager is ready for accepting new delegators, otherwise set to False.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AdReadyArgs(
            val_manager=val_manager,
            ready=ready,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def ad_self_disclose(
        self,
        *,
        val_owner: str,
        val_info: ValidatorSelfDisclosure,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Ad owner sets its self-disclosure information.
        
        Calls `ad_self_disclose(address,(byte[30],byte[60],byte[2],uint64,byte[20]))void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param ValidatorSelfDisclosure val_info: Self-disclosed information about the validator.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AdSelfDiscloseArgs(
            val_owner=val_owner,
            val_info=val_info,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def ad_terms(
        self,
        *,
        val_owner: str,
        tc_sha256: bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int],
        terms_time: ValidatorTermsTiming,
        terms_price: ValidatorTermsPricing,
        terms_stake: ValidatorTermsStakeLimits,
        terms_reqs: ValidatorTermsGating,
        terms_warn: ValidatorTermsWarnings,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sets all the terms of the validator.
        With this action, the validator agrees with the (new) terms.
        
        Calls `ad_terms(address,byte[32],(uint64,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64,uint64),(uint64,uint64),((uint64,uint64)[2]),(uint64,uint64),pay)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param bytes | bytearray | tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int] tc_sha256: Hash (i.e. SHA 256) of the Terms and Conditions agreed by the validator.
        :param ValidatorTermsTiming terms_time: Validator's terms about timing.
        :param ValidatorTermsPricing terms_price: Validator's terms about pricing.
        :param ValidatorTermsStakeLimits terms_stake: Validator's terms about stake limits.
        :param ValidatorTermsGating terms_reqs: Validator's terms about gating requirements.
        :param ValidatorTermsWarnings terms_warn: Validator's terms about warnings.
        :param TransactionWithSigner txn: Transaction for the payment of MBR increase.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AdTermsArgs(
            val_owner=val_owner,
            tc_sha256=tc_sha256,
            terms_time=terms_time,
            terms_price=terms_price,
            terms_stake=terms_stake,
            terms_reqs=terms_reqs,
            terms_warn=terms_warn,
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def ad_income(
        self,
        *,
        val_owner: str,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Validator owner withdraws all available balance from the validator ad for the given asset.
        
        Calls `ad_income(address,uint64)uint64` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int asset_id: ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like to withdraw all earnings from the validator ad.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: Withdrawn income from the validator ad for the input asset."""

        args = AdIncomeArgs(
            val_owner=val_owner,
            asset_id=asset_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def ad_asa_close(
        self,
        *,
        val_owner: str,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Removes the asset's storage on the validator ad.
        To be used before deleting the contract.
        
        Calls `ad_asa_close(address,uint64)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int asset_id: ID of the asset (i.e. ASA ID or 0 for ALGO) for which the owner would like remove its storage.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AdAsaCloseArgs(
            val_owner=val_owner,
            asset_id=asset_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def template_load_init(
        self,
        *,
        val_owner: str,
        template_size: int,
        mbr_txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Starts the process of uploading delegator contract template.
        
        Calls `template_load_init(address,uint64,pay)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int template_size: Size of the delegator contract template in bytes.
        :param TransactionWithSigner mbr_txn: Payment transaction for the payment of the increase of validator ad MBR due to creation of box for storing the delegator contract template.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = TemplateLoadInitArgs(
            val_owner=val_owner,
            template_size=template_size,
            mbr_txn=mbr_txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def template_load_data(
        self,
        *,
        val_owner: str,
        offset: int,
        data: bytes | bytearray,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Uploads a data chunk to the delegator contract template.
        
        Calls `template_load_data(address,uint64,byte[])void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param int offset: Offset in the box at which to replace the data.
        :param bytes | bytearray data: Data to replace in the box at the defined position.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = TemplateLoadDataArgs(
            val_owner=val_owner,
            offset=offset,
            data=data,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def template_load_end(
        self,
        *,
        val_owner: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Ends uploading of the delegator contract template.
        
        Calls `template_load_end(address)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = TemplateLoadEndArgs(
            val_owner=val_owner,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def contract_create(
        self,
        *,
        del_manager: str,
        del_beneficiary: str,
        rounds_duration: int,
        stake_max: int,
        partner_address: str,
        partner_commission: int,
        mbr_txn: TransactionWithSigner,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Creates a new delegator contract with the current delegation terms for the input
        delegator contract manager and delegator contract beneficiary with the specified duration.
        
        Calls `contract_create(address,address,uint64,uint64,address,uint64,pay,txn)uint64` ABI method
        
        :param str del_manager: Manager address for the delegation contract.
        :param str del_beneficiary: Beneficiary address for the delegation contract.
        :param int rounds_duration: Contract duration in number of rounds.
        :param int stake_max: The maximum amount of ALGO that the delegator beneficiary address intends to have at any point in time during the contract duration.
        :param str partner_address: Address of the partner that collects the partner convenience fees. If there is no partner, set it to Global.zero_address.
        :param int partner_commission: Commission charged on top of validator price for partner's convenience offer. The value is represented in ppm.
        :param TransactionWithSigner mbr_txn: Payment transaction for the payment of the increase of validator ad MBR due to creation of a new contract.
        :param TransactionWithSigner txn: Transaction for the payment of the setup and operational fee.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: App ID of the created delegator contract application."""

        args = ContractCreateArgs(
            del_manager=del_manager,
            del_beneficiary=del_beneficiary,
            rounds_duration=rounds_duration,
            stake_max=stake_max,
            partner_address=partner_address,
            partner_commission=partner_commission,
            mbr_txn=mbr_txn,
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_confirm(
        self,
        *,
        del_manager: str,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys
        and pays for the operational fee.
        
        Calls `keys_confirm(address,application)void` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param int del_app: The `del_app` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = KeysConfirmArgs(
            del_manager=del_manager,
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def keys_not_confirmed(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that keys of a delegator contract have not been confirmed in time.
        
        Calls `keys_not_confirmed(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = KeysNotConfirmedArgs(
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def keys_not_submitted(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that keys of a delegator contract have not been submitted in time.
        
        Calls `keys_not_submitted(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = KeysNotSubmittedArgs(
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def keys_submit(
        self,
        *,
        val_manager: str,
        del_app: int,
        key_reg_txn_info: KeyRegTxnInfo,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Validator manager submits the keys generated for the delegator beneficiary according to the contract terms.
        
        Calls `keys_submit(address,application,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address))(address,byte[100])` ABI method
        
        :param str val_manager: Purported validator manager account.
        :param int del_app: App ID of the delegator contract.
        :param KeyRegTxnInfo key_reg_txn_info: Information about the generated participation keys.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = KeysSubmitArgs(
            val_manager=val_manager,
            del_app=del_app,
            key_reg_txn_info=key_reg_txn_info,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def breach_limits(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[BreachLimitsReturn]:
        """Reports that a limit breach event occurred on the delegator beneficiary.
        
        Calls `breach_limits(application)(bool,(uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[BreachLimitsReturn]: Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."""

        args = BreachLimitsArgs(
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = BreachLimitsReturn(**result_dict)
        return result

    def breach_pay(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that a payment for the fee cannot be made from the delegator contract.
        This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
        
        Calls `breach_pay(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = BreachPayArgs(
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def breach_suspended(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]:
        """Reports that the delegator beneficiary was suspended by consensus.
        
        Calls `breach_suspended(application)((uint64,uint64,uint64),address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EarningsDistributionAndMessage]: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."""

        args = BreachSuspendedArgs(
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EarningsDistributionAndMessage(**result_dict)
        return result

    def contract_claim(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[EarningsDistribution]:
        """Claims the operational fee up to this round from a delegator contract and
        transfers it to the validator ad as well as the commission to the platform.
        
        Calls `contract_claim(application)(uint64,uint64,uint64)` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[EarningsDistribution]: Amount of earnings of validator which equal any not yet claimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."""

        args = ContractClaimArgs(
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = EarningsDistribution(**result_dict)
        return result

    def contract_expired(
        self,
        *,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that a delegator contract has expired.
        
        Calls `contract_expired(application)(address,byte[100])` ABI method
        
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = ContractExpiredArgs(
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def contract_withdraw(
        self,
        *,
        del_manager: str,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Reports that a delegator has gracefully withdrawn from the contract prematurely.
        The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
        
        Calls `contract_withdraw(address,application)void` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = ContractWithdrawArgs(
            del_manager=del_manager,
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def contract_delete(
        self,
        *,
        del_manager: str,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ContractDeleteReturn]:
        """Delegator deletes an ended contract, withdraws any remaining balance, and returns the MBR from ValidatorAd.
        
        Calls `contract_delete(address,application)(uint64,uint64)` ABI method
        
        :param str del_manager: Purported delegator manager account.
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ContractDeleteReturn]: The result of the transaction"""

        args = ContractDeleteArgs(
            del_manager=del_manager,
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ContractDeleteReturn(**result_dict)
        return result

    def contract_report_expiry_soon(
        self,
        *,
        before_expiry: int,
        report_period: int,
        del_app: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[Message]:
        """Reports that the contract will expire soon.
        
        Calls `contract_report_expiry_soon(uint64,uint64,application)(address,byte[100])` ABI method
        
        :param int before_expiry: How many rounds before contract end can the report be made.
        :param int report_period: How frequently can the report be made.
        :param int del_app: App ID of the delegator contract.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[Message]: Address of delegator manager."""

        args = ContractReportExpirySoonArgs(
            before_expiry=before_expiry,
            report_period=report_period,
            del_app=del_app,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = Message(**result_dict)
        return result

    def gas(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """To fit more resources in app reference arrays.
        
        Calls `gas()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = GasArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def get_validator_asa(
        self,
        *,
        asset_id: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ValidatorAsa]:
        """Returns information about the ASA that is or was supported by the validator ad at any point of time before
        deletion.
        
        Calls `get_validator_asa(uint64)(uint64,uint64)` ABI method
        
        :param int asset_id: The `asset_id` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ValidatorAsa]: Information about the payment asset that is or was accepted on the platform."""

        args = GetValidatorAsaArgs(
            asset_id=asset_id,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ValidatorAsa(**result_dict)
        return result

    def create_ad_create(
        self,
        *,
        val_owner: str,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Creates a new ValidatorAd.
        Defines validator ad owner account. Defines Noticeboard app ID to which this contract belongs to.
        
        Calls `ad_create(address)uint64` ABI method
        
        :param str val_owner: Owner address for the validator ad.
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: App ID of the created validator ad application."""

        args = AdCreateArgs(
            val_owner=val_owner,
        )
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_ad_delete(
        self,
        *,
        val_owner: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Validator owner deletes a validator ad.
        Possible only if there are no active delegators and all balances have been claimed.
        
        Calls `ad_delete(address)void` ABI method
        
        :param str val_owner: Owner address of the validator ad.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AdDeleteArgs(
            val_owner=val_owner,
        )
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[AdCreateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy[AdDeleteArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[AdCreateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param Deploy[AdDeleteArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())

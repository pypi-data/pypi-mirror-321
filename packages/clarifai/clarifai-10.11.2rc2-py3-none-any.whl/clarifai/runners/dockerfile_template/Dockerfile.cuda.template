# Build a virtualenv containing necessary system libraries and Python packages
# for users to install their own packages while also being distroless.
# * Install python3-venv
# * Install gcc libpython3-dev to compile C Python modules
# * In the virtualenv: Update pip setuputils and wheel to support building new packages
# * Export environment variables to use the virtualenv by default
# * Create a non-root user with minimal privileges and use it
ARG TARGET_PLATFORM=linux/amd64
FROM --platform=$TARGET_PLATFORM public.ecr.aws/docker/library/python:${PYTHON_VERSION}-slim-bookworm as build

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install --no-install-suggests --no-install-recommends --yes \
    software-properties-common  \
    gcc \
    libpython3-dev && \
    python${PYTHON_VERSION} -m venv /venv && \
    /venv/bin/pip install --disable-pip-version-check --upgrade pip setuptools wheel && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Set environment variables to use virtualenv by default
ENV VIRTUAL_ENV=/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

#############################
# User specific requirements
#############################
COPY requirements.txt .

# Install requirements and cleanup before leaving this line.
# Note(zeiler): this could be in a future template as {{model_python_deps}}
RUN python -m pip install -r requirements.txt && rm -rf /root/.cache

# Install Clarifai SDK
RUN python -m pip install clarifai

#############################
# Finally copy everything we built into a distroless image for runtime.
######################>#######
ARG TARGET_PLATFORM=linux/amd64
FROM --platform=$TARGET_PLATFORM gcr.io/distroless/python3-debian12:latest
# FROM --platform=$TARGET_PLATFORM gcr.io/distroless/python3-debian12:debug
ARG PYTHON_VERSION=${PYTHON_VERSION}
# needed to call pip directly
COPY --from=build /bin/sh /bin/sh

# virtual env
COPY --from=build /venv /venv

# We have to overwrite the python3 binary that the distroless image uses
COPY --from=build /usr/local/bin/python${PYTHON_VERSION} /usr/bin/python3
# And also copy in all the lib files for it.
COPY --from=build /usr/local/lib/ /usr/lib/

# Set environment variables to use virtualenv by default
ENV VIRTUAL_ENV=/venv
ENV PYTHONPATH=${PYTHONPATH}:${VIRTUAL_ENV}/lib/python${PYTHON_VERSION}/site-packages

# These will be set by the templaing system.
ENV CLARIFAI_PAT=${CLARIFAI_PAT}
ENV CLARIFAI_USER_ID=${CLARIFAI_USER_ID}
ENV CLARIFAI_RUNNER_ID=${CLARIFAI_RUNNER_ID}
ENV CLARIFAI_NODEPOOL_ID=${CLARIFAI_NODEPOOL_ID}
ENV CLARIFAI_COMPUTE_CLUSTER_ID=${CLARIFAI_COMPUTE_CLUSTER_ID}
ENV CLARIFAI_API_BASE=${CLARIFAI_API_BASE}

# Set the working directory to /app
WORKDIR /app

# Copy the current folder into /app/model_dir that the SDK will expect.
# Note(zeiler): would be nice to exclude checkpoints in case they were pre-downloaded.
COPY . /app/model_dir/${name}

# Add the model directory to the python path.
ENV PYTHONPATH=${PYTHONPATH}:/app/model_dir/${name}

# Finally run the clarifai entrypoint to start the runner loop and local dev server.
# Note(zeiler): we may want to make this a clarifai CLI call.
CMD ["-m", "clarifai.runners.server", "--model_path", "/app/model_dir/${name}"]

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nillion/compute/v1/service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ComputeStub(betterproto.ServiceStub):
    """A service to perform compute operations."""

    async def invoke_compute(
        self,
        invoke_invoke_compute_request: "invoke.InvokeComputeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "invoke.InvokeComputeResponse":
        """Invoke a computation."""

        return await self._unary_unary(
            "/nillion.compute.v1.Compute/InvokeCompute",
            invoke_invoke_compute_request,
            invoke.InvokeComputeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stream_compute(
        self,
        stream_compute_stream_message_iterator: "Union[AsyncIterable[stream.ComputeStreamMessage], Iterable[stream.ComputeStreamMessage]]",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "betterproto_lib_google_protobuf.Empty":
        """
        Start a stream of message for a specific instance of a computation.

         This is meant to be used internally by nodes in the network.
        """

        return await self._stream_unary(
            "/nillion.compute.v1.Compute/StreamCompute",
            stream_compute_stream_message_iterator,
            stream.ComputeStreamMessage,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def retrieve_results(
        self,
        retrieve_retrieve_results_request: "retrieve.RetrieveResultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "AsyncIterator[retrieve.RetrieveResultsResponse]":
        """
        Retrieve the result of a computation.

         The user invoking this operation must have been defined as an output party in the program
         the execution was tied to.

         This call will wait for the program execution to end if it hasn't done so already. Clients must
         wait until either a result or failure message is sent, ignoring any `Waiting` messages sent until
         that happens.
        """

        async for response in self._unary_stream(
            "/nillion.compute.v1.Compute/RetrieveResults",
            retrieve_retrieve_results_request,
            retrieve.RetrieveResultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

from . import (
    invoke,
    retrieve,
    stream,
)


class ComputeBase(ServiceBase):
    """A service to perform compute operations."""

    async def invoke_compute(
        self, invoke_invoke_compute_request: "invoke.InvokeComputeRequest"
    ) -> "invoke.InvokeComputeResponse":
        """Invoke a computation."""

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stream_compute(
        self,
        stream_compute_stream_message_iterator: AsyncIterator[
            stream.ComputeStreamMessage
        ],
    ) -> "betterproto_lib_google_protobuf.Empty":
        """
        Start a stream of message for a specific instance of a computation.

         This is meant to be used internally by nodes in the network.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def retrieve_results(
        self, retrieve_retrieve_results_request: "retrieve.RetrieveResultsRequest"
    ) -> AsyncIterator[retrieve.RetrieveResultsResponse]:
        """
        Retrieve the result of a computation.

         The user invoking this operation must have been defined as an output party in the program
         the execution was tied to.

         This call will wait for the program execution to end if it hasn't done so already. Clients must
         wait until either a result or failure message is sent, ignoring any `Waiting` messages sent until
         that happens.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield retrieve.RetrieveResultsResponse()

    async def __rpc_invoke_compute(
        self,
        stream: "grpclib.server.Stream[invoke.InvokeComputeRequest, invoke.InvokeComputeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.invoke_compute(request)
        await stream.send_message(response)

    async def __rpc_stream_compute(
        self,
        stream: "grpclib.server.Stream[stream.ComputeStreamMessage, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = stream.__aiter__()
        response = await self.stream_compute(request)
        await stream.send_message(response)

    async def __rpc_retrieve_results(
        self,
        stream: "grpclib.server.Stream[retrieve.RetrieveResultsRequest, retrieve.RetrieveResultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.retrieve_results,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/nillion.compute.v1.Compute/InvokeCompute": grpclib.const.Handler(
                self.__rpc_invoke_compute,
                grpclib.const.Cardinality.UNARY_UNARY,
                invoke.InvokeComputeRequest,
                invoke.InvokeComputeResponse,
            ),
            "/nillion.compute.v1.Compute/StreamCompute": grpclib.const.Handler(
                self.__rpc_stream_compute,
                grpclib.const.Cardinality.STREAM_UNARY,
                stream.ComputeStreamMessage,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/nillion.compute.v1.Compute/RetrieveResults": grpclib.const.Handler(
                self.__rpc_retrieve_results,
                grpclib.const.Cardinality.UNARY_STREAM,
                retrieve.RetrieveResultsRequest,
                retrieve.RetrieveResultsResponse,
            ),
        }

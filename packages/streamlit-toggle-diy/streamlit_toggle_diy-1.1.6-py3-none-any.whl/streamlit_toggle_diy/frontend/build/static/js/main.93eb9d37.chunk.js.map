{"version":3,"sources":["streamlit_toggle.tsx","index.tsx"],"names":["withStreamlitConnection","props","_props$args","args","default_value","label_end","label_start","justify","active_color","inactive_color","track_color","label_bg_color_start","label_bg_color_end","background_color_near_button_start","background_color_near_button_end","useEffect","Streamlit","setFrameHeight","_React$useState","React","useState","checkStatus","_React$useState2","_slicedToArray","state","setState","snowflakeTheme","createTheme","overrides","MuiSwitch","switchBase","color","colorSecondary","track","opacity","backgroundColor","labelStartStyle","padding","borderRadius","display","fontWeight","labelEndStyle","createElement","ThemeProvider","theme","Typography","component","variant","paragraph","gutterBottom","Grid","container","justifyContent","alignItems","spacing","style","item","Switch","checked","onChange","event","_objectSpread","_defineProperty","target","name","setComponentValue","ReactDOM","render","StrictMode","StreamlitToggleSwitch","document","getElementById"],"mappings":"kSAyIeA,eA7HS,SAACC,GACvB,IAAAC,EAYID,EAAME,KAXRC,EAAaF,EAAbE,cACAC,EAASH,EAATG,UACAC,EAAWJ,EAAXI,YACAC,EAAOL,EAAPK,QACAC,EAAYN,EAAZM,aACAC,EAAcP,EAAdO,eACAC,EAAWR,EAAXQ,YACAC,EAAoBT,EAApBS,qBACAC,EAAkBV,EAAlBU,mBACAC,EAAkCX,EAAlCW,mCACAC,EAAgCZ,EAAhCY,iCAGFC,qBAAU,kBAAMC,IAAUC,oBAE1B,IAKAC,EAA0BC,IAAMC,SAAS,CACvCC,YAAajB,IACbkB,EAAAC,YAAAL,EAAA,GAFKM,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAIhBI,EAAiBC,YAAY,CACjCC,UAAW,CACTC,UAAW,CACTC,WAAY,CAEVC,MAAOtB,GAETuB,eAAgB,CACd,YAAa,CAEXD,MAAOvB,IAGXyB,MAAO,CAELC,QAAS,GACTC,gBAAiBzB,EACjB,uBAAwB,CACtBwB,QAAS,EACTC,gBAAiBzB,QAQrB0B,EAAkB,CACtBD,gBAAiBxB,GAAwB,UACzCoB,MAAO,UACPM,QAAS,UACTC,aAAc,MACdC,QAAS,eACTC,WAAY,QAGRC,EAAgB,CACpBN,gBAAiBvB,GAAsB,UACvCmB,MAAO,UACPM,QAAS,UACTC,aAAc,MACdC,QAAS,eACTC,WAAY,QAoBd,OACErB,IAAAuB,cAACC,IAAa,CAACC,MAAOlB,GACpBP,IAAAuB,cAACG,IAAU,CAACC,UAAU,MAAMC,QAAQ,YAAYC,WAAW,EAAOC,cAAc,GAC9E9B,IAAAuB,cAACQ,IAAI,CACHC,WAAS,EACTC,eAAgB7C,EAChB8C,WAAW,SACXC,QAAS,EACTC,MACE1C,GAAsCC,EAClC,CACEqB,gBAAiBtB,GAAsCC,EACvDuB,QAAS,OACTC,aAAc,OAEhB,IAGNnB,IAAAuB,cAACQ,IAAI,CAACM,MAAI,GACRrC,IAAAuB,cAAA,QAAMa,MAAOnB,GAAkB9B,IAEjCa,IAAAuB,cAACQ,IAAI,CAACM,MAAI,GACRrC,IAAAuB,cAACe,IAAM,CACLC,QAASlC,EAAMH,YACfsC,SA/FS,SAACC,GACpBnC,EAAQoC,wBAAC,GAAKrC,GAAK,GAAAsC,YAAA,GAAGF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOL,WACvD1C,IAAUiD,kBAAkBL,EAAMG,OAAOL,UA8F/BM,KAAK,iBAGT7C,IAAAuB,cAACQ,IAAI,CAACM,MAAI,GACRrC,IAAAuB,cAAA,QAAMa,MAAOd,GAAgBpC,UC5HzC6D,IAASC,OACPhD,IAAAuB,cAACvB,IAAMiD,WAAU,KACfjD,IAAAuB,cAAC2B,EAAqB,OAExBC,SAASC,eAAe,W","file":"static/js/main.93eb9d37.chunk.js","sourcesContent":["import {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport { Typography, Switch, Grid } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n// 如果有自定义 CSS 文件，可以在这里导入\n// import './streamlit_toggle_diy.css';\n\nconst StreamlitToggle = (props: ComponentProps) => {\n  const {\n    default_value,\n    label_end,\n    label_start,\n    justify,\n    active_color,\n    inactive_color,\n    track_color,\n    label_bg_color_start,\n    label_bg_color_end,\n    background_color_near_button_start, // 新增参数\n    background_color_near_button_end,   // 新增参数\n  } = props.args;\n\n  useEffect(() => Streamlit.setFrameHeight());\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    Streamlit.setComponentValue(event.target.checked);\n  };\n\n  const [state, setState] = React.useState({\n    checkStatus: default_value,\n  });\n\n  const snowflakeTheme = createTheme({\n    overrides: {\n      MuiSwitch: {\n        switchBase: {\n          // 控制滑块未激活时的颜色\n          color: inactive_color,\n        },\n        colorSecondary: {\n          \"&$checked\": {\n            // 控制滑块激活时的颜色\n            color: active_color,\n          },\n        },\n        track: {\n          // 控制轨道未激活时的颜色\n          opacity: 0.1,\n          backgroundColor: track_color,\n          \"$checked$checked + &\": {\n            opacity: 1,\n            backgroundColor: track_color,\n          },\n        },\n      },\n    },\n  });\n\n  // 定义动态标签样式，使用传入的背景颜色参数\n  const labelStartStyle = {\n    backgroundColor: label_bg_color_start || \"#6e6abb\", // 如果未传入，使用默认颜色\n    color: \"#7f1916\",\n    padding: \"4px 8px\",\n    borderRadius: \"4px\",\n    display: \"inline-block\",\n    fontWeight: \"bold\",\n  };\n\n  const labelEndStyle = {\n    backgroundColor: label_bg_color_end || \"#0F1C2E\", // 如果未传入，使用默认颜色\n    color: \"#FFFFFF\",\n    padding: \"4px 8px\",\n    borderRadius: \"4px\",\n    display: \"inline-block\",\n    fontWeight: \"bold\",\n  };\n\n  // 定义按钮附近背景样式\n  const buttonBackgroundStartStyle = {\n    backgroundColor: background_color_near_button_start || \"#ffffff\", // 默认白色\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  const buttonBackgroundEndStyle = {\n    backgroundColor: background_color_near_button_end || \"#ffffff\", // 默认白色\n    padding: \"10px\",\n    borderRadius: \"8px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  return (\n    <ThemeProvider theme={snowflakeTheme}>\n      <Typography component=\"div\" variant=\"subtitle1\" paragraph={false} gutterBottom={false}>\n        <Grid\n          container\n          justifyContent={justify}\n          alignItems=\"center\"\n          spacing={1}\n          style={\n            background_color_near_button_start || background_color_near_button_end\n              ? {\n                  backgroundColor: background_color_near_button_start || background_color_near_button_end,\n                  padding: \"10px\",\n                  borderRadius: \"8px\",\n                }\n              : {}\n          }\n        >\n          <Grid item>\n            <span style={labelStartStyle}>{label_start}</span>\n          </Grid>\n          <Grid item>\n            <Switch\n              checked={state.checkStatus}\n              onChange={handleChange}\n              name=\"checkStatus\"\n            />\n          </Grid>\n          <Grid item>\n            <span style={labelEndStyle}>{label_end}</span>\n          </Grid>\n        </Grid>\n      </Typography>\n    </ThemeProvider>\n  );\n};\n\nexport default withStreamlitConnection(StreamlitToggle);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitToggleSwitch from \"./streamlit_toggle\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitToggleSwitch />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}
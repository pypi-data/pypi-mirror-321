{"version":3,"sources":["streamlit_toggle.tsx","index.tsx"],"names":["withStreamlitConnection","props","_ref","args","default_value","label_start","label_end","_ref$justify","justify","_ref$inactive_color","inactive_color","_ref$active_color","active_color","_ref$track_color","track_color","_ref$label_bg_color_s","label_bg_color_start","_ref$label_bg_color_e","label_bg_color_end","_ref$background_color","background_color_near_button_start","_ref$background_color2","background_color_near_button_end","_ref$border_radius","border_radius","_ref$label_start_colo","label_start_color","_ref$label_end_color","label_end_color","_ref$label_font_size","label_font_size","_ref$label_font_weigh","label_font_weight","_ref$switch_size","switch_size","containerRef","useRef","_useState","useState","checkStatus","_useState2","_slicedToArray","state","setState","snowflakeTheme","createTheme","overrides","MuiSwitch","switchBase","color","colorSecondary","track","opacity","backgroundColor","labelStartStyle","padding","borderRadius","display","fontWeight","fontSize","labelEndStyle","buttonBackgroundStyle","background","concat","alignItems","useEffect","Streamlit","setFrameHeight","handleResize","window","addEventListener","removeEventListener","React","createElement","ThemeProvider","theme","Typography","component","variant","paragraph","gutterBottom","ref","style","Grid","container","justifyContent","spacing","item","Switch","checked","onChange","event","_objectSpread","_defineProperty","target","name","setComponentValue","size","ReactDOM","render","StrictMode","StreamlitToggleSwitch","document","getElementById"],"mappings":"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","file":"static/js/main.d5e2b6f4.chunk.js","sourcesContent":["import {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport { Typography, Switch, Grid } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\ninterface ToggleSwitchProps {\n  // 原有参数\n  default_value: boolean;\n  label_start?: string;\n  label_end?: string;\n  justify?: \"flex-start\" | \"center\" | \"flex-end\";\n  active_color?: string;\n  inactive_color?: string;\n  track_color?: string;\n  label_bg_color_start?: string;\n  label_bg_color_end?: string;\n  background_color_near_button_start?: string;\n  background_color_near_button_end?: string;\n  border_radius?: string;\n  label_start_color?: string; // 左侧标签文字颜色\n  label_end_color?: string;   // 右侧标签文字颜色\n  label_font_size?: string;   // 标签文字大小\n  label_font_weight?: string; // 标签文字粗细\n  switch_size?: \"small\" | \"medium\"; // Switch 尺寸\n}\n\nconst StreamlitToggle = (props: ComponentProps) => {\n  // 1. 从 props.args 中解构所有参数\n  const {\n    // -- 基础必选 --\n    default_value,\n    // -- 已有可选 --\n    label_start,\n    label_end,\n    justify = \"flex-start\",\n    inactive_color = '#CEE8FF',\n    active_color = \"#00668c\",\n    track_color = \"#3D5A80\",\n    label_bg_color_start = \"#FFFFFF\",\n    label_bg_color_end = \"yellow\",\n    background_color_near_button_start = \"#FFFFFF\",\n    background_color_near_button_end = \"#FFFFFF\",\n    border_radius = \"30px\",\n    label_start_color = \"#333333\",\n    label_end_color = \"red\",\n    label_font_size = \"16px\",\n    label_font_weight = \"bold\",\n    switch_size = \"medium\",\n  } = props.args as ToggleSwitchProps;\n\n  // 2. 引入容器引用，以便 setFrameHeight() 时保证内容高度正确\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // 3. 管理 Switch 状态\n  const [state, setState] = useState({\n    checkStatus: default_value,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    // 将选中状态传回 Python\n    Streamlit.setComponentValue(event.target.checked);\n  };\n\n  // 4. Material-UI 主题：动态覆盖 Switch 的颜色\n  const snowflakeTheme = createTheme({\n    overrides: {\n      MuiSwitch: {\n        switchBase: {\n          color: inactive_color, // 未选中时的按钮颜色\n        },\n        colorSecondary: {\n          \"&$checked\": {\n            color: active_color, // 选中时按钮颜色\n          },\n        },\n        track: {\n          opacity: 0.1,\n          backgroundColor: track_color, // 轨道颜色\n          \"$checked$checked + &\": {\n            opacity: 1,\n            backgroundColor: track_color,\n          },\n        },\n      },\n    },\n  });\n\n  // 5. 样式：标签与背景\n  const labelStartStyle: React.CSSProperties = {\n    backgroundColor: label_bg_color_start,\n    color: label_start_color,\n    padding: \"4px 8px\",\n    borderRadius: border_radius,\n    display: \"inline-block\",\n    fontWeight: label_font_weight,\n    fontSize: label_font_size,\n  };\n\n  const labelEndStyle: React.CSSProperties = {\n    backgroundColor: label_bg_color_end,\n    color: label_end_color,\n    padding: \"4px 8px\",\n    borderRadius: border_radius,\n    display: \"inline-block\",\n    fontWeight: label_font_weight,\n    fontSize: label_font_size,\n  };\n\n  // 背景（左右渐变或单色）\n  const buttonBackgroundStyle: React.CSSProperties = {\n    background:\n      background_color_near_button_start && background_color_near_button_end\n        ? `linear-gradient(to right, ${background_color_near_button_start}, ${background_color_near_button_end})`\n        : background_color_near_button_start ||\n          background_color_near_button_end ||\n          \"#ffffff\",\n    padding: \"10px\",\n    borderRadius: border_radius,\n    display: \"flex\",\n    alignItems: \"center\",\n  };\n\n  // 6. 每次渲染后都尝试让 Streamlit 更新 iframe 高度\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n\n  // 7. 可选：监听窗口大小变化，以便侧边栏展开/折叠时也刷新\n  useEffect(() => {\n    const handleResize = () => {\n      Streamlit.setFrameHeight();\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // 8. 组件 JSX\n  return (\n    <ThemeProvider theme={snowflakeTheme}>\n      <Typography\n        component=\"div\"\n        variant=\"subtitle1\"\n        paragraph={false}\n        gutterBottom={false}\n      >\n        <div ref={containerRef} style={buttonBackgroundStyle}>\n          <Grid container justifyContent={justify} alignItems=\"center\" spacing={1}>\n            {label_start && (\n              <Grid item>\n                <span style={labelStartStyle}>{label_start}</span>\n              </Grid>\n            )}\n            <Grid item>\n              <Switch\n                checked={state.checkStatus}\n                onChange={handleChange}\n                name=\"checkStatus\"\n                size={switch_size} // 新增：Switch 尺寸\n              />\n            </Grid>\n            {label_end && (\n              <Grid item>\n                <span style={labelEndStyle}>{label_end}</span>\n              </Grid>\n            )}\n          </Grid>\n        </div>\n      </Typography>\n    </ThemeProvider>\n  );\n};\n\nexport default withStreamlitConnection(StreamlitToggle);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitToggleSwitch from \"./streamlit_toggle\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitToggleSwitch />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}
# -*- coding: utf-8 -*-
"""Topsis-Anoushka-102203560.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o7BjcVZvAyJSE9LPWuD8aVO9gyYZQplp
"""

import pandas as pd
import numpy as np

class TopsisError(Exception):
    """Custom exception for TOPSIS errors."""
    pass

def topsis(inpfile, weights, impacts, resfile):
    if not inpfile.endswith('.csv'):
        raise TopsisError("Wrong input")
        return

    try:
        data = pd.read_csv(inpfile)
    except FileNotFoundError:
        raise TopsisError("Error: File not found.")
        return

    if data.shape[1] < 3:
        raise TopsisError("Error: Input file must have at least 3 columns.")
        return

    wsplit = weights.split(',')
    isplit = impacts.split(',')

    if len(wsplit) != data.shape[1] - 1 or len(isplit) != data.shape[1] - 1:
        raise TopsisError("Number of weights and impacts must match the number of criteria.")
        return

    if not all(impact in ['+', '-'] for impact in isplit):
        raise TopsisError("Impacts must be '+' or '-'.")
        return

    try:
        weights = list(map(float, wsplit))
    except ValueError:
        raise TopsisError("Error: Weights must be numeric values separated by commas.")
        return

    numdata = data.iloc[:, 1:]
    normaldata = numdata / np.sqrt((numdata**2).sum(axis=0))

    wdata = normaldata * weights

    ideal_best = []
    ideal_worst = []
    for i, impact in enumerate(isplit):
        if impact == '+':
            ideal_best.append(wdata.iloc[:, i].max())
            ideal_worst.append(wdata.iloc[:, i].min())
        else:
            ideal_best.append(wdata.iloc[:, i].min())
            ideal_worst.append(wdata.iloc[:, i].max())

    distance_best = np.sqrt(((wdata - ideal_best)**2).sum(axis=1))
    distance_worst = np.sqrt(((wdata - ideal_worst)**2).sum(axis=1))

    topsis_score = distance_worst / (distance_best + distance_worst)
    data['Topsis Score'] = topsis_score
    data['Rank'] = topsis_score.rank(ascending=False).astype(int)

    data.to_csv(resfile, index=False)
    print(f"Results saved to {resfile}")

if len(sys.argv) == 5:
    inpfile = sys.argv[1]
    weights = sys.argv[2]
    impacts = sys.argv[3]
    resfile = sys.argv[4]
    topsis(inpfile, weights, impacts, resfile)
# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..errors.not_found_error import NotFoundError
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..core.client_wrapper import AsyncClientWrapper


class CameraClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def viz(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Page with an overview of the connected cameras. Open this page in the chrome browser: http://localhost:80/viz

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phosphobot import PhosphobotApi

        client = PhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.camera.viz()
        """
        _response = self._client_wrapper.httpx_client.request(
            "viz",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def video_feed_for_camera(
        self,
        camera_id: typing.Optional[int],
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Stream video feed of the specified `camera_id`.

        Parameters
        ----------
        camera_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phosphobot import PhosphobotApi

        client = PhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.camera.video_feed_for_camera()
        """
        _response = self._client_wrapper.httpx_client.request(
            f"video/{jsonable_encoder(camera_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def video_feed_for_depth(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Returns the depth feed from the realsense camera.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phosphobot import PhosphobotApi

        client = PhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.camera.video_feed_for_depth()
        """
        _response = self._client_wrapper.httpx_client.request(
            "video/depth",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def video_realsense(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Stream video feed from realsense camera.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phosphobot import PhosphobotApi

        client = PhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.camera.video_realsense()
        """
        _response = self._client_wrapper.httpx_client.request(
            "video/realsense",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCameraClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def viz(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Page with an overview of the connected cameras. Open this page in the chrome browser: http://localhost:80/viz

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phosphobot import AsyncPhosphobotApi

        client = AsyncPhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.camera.viz()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "viz",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def video_feed_for_camera(
        self,
        camera_id: typing.Optional[int],
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Stream video feed of the specified `camera_id`.

        Parameters
        ----------
        camera_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phosphobot import AsyncPhosphobotApi

        client = AsyncPhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.camera.video_feed_for_camera()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"video/{jsonable_encoder(camera_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def video_feed_for_depth(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Returns the depth feed from the realsense camera.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phosphobot import AsyncPhosphobotApi

        client = AsyncPhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.camera.video_feed_for_depth()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "video/depth",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def video_realsense(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Stream video feed from realsense camera.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phosphobot import AsyncPhosphobotApi

        client = AsyncPhosphobotApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.camera.video_realsense()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "video/realsense",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

# coding: utf-8

"""
    CDO API

    Use the documentation to explore the endpoints CDO has to offer

    The version of the OpenAPI document: 1.4.0
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cdo_sdk_python.models.application_context_class_loader_parent_unnamed_module_class_loader_defined_packages_inner import ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner

class TestApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner(unittest.TestCase):
    """ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner:
        """Test ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner`
        """
        model = ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner()
        if include_optional:
            return ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner(
                name = '',
                annotations = [
                    None
                    ],
                declared_annotations = [
                    None
                    ],
                sealed = True,
                specification_title = '',
                specification_version = '',
                specification_vendor = '',
                implementation_title = '',
                implementation_version = '',
                implementation_vendor = ''
            )
        else:
            return ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner(
        )
        """

    def testApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner(self):
        """Test ApplicationContextClassLoaderParentUnnamedModuleClassLoaderDefinedPackagesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

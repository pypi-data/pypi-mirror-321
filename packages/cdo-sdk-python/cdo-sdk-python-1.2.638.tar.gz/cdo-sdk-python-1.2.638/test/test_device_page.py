# coding: utf-8

"""
    Cisco Defense Orchestrator API

    Use the interactive documentation to explore the endpoints CDO has to offer

    The version of the OpenAPI document: 0.0.1
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cdo_sdk_python.models.device_page import DevicePage

class TestDevicePage(unittest.TestCase):
    """DevicePage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DevicePage:
        """Test DevicePage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DevicePage`
        """
        model = DevicePage()
        if include_optional:
            return DevicePage(
                count = 100,
                limit = 50,
                offset = 0,
                items = [
                    cdo_sdk_python.models.device.Device(
                        uid = '7131daad-e813-4b8f-8f42-be1e241e8cdb', 
                        name = 'my-example-device', 
                        device_type = 'CDFMC_MANAGED_FTD', 
                        connector_type = 'CDG', 
                        connector_uid = '3af473a8-d70f-4090-bcdb-853981696478', 
                        address = 'my-example-device.example.com:443', 
                        device_role = 'RA_VPN_HEADEND', 
                        serial = 'JAD24500xxx', 
                        chassis_serial = 'JMX2450Xxxx', 
                        software_version = '7.4.1', 
                        connectivity_state = 'ONLINE', 
                        config_state = 'SYNCED', 
                        conflict_detection_state = 'NO_CONFLICTS', 
                        notes = 'This is an example note on the device.', 
                        asdm_version = '7.6(2)', 
                        asa_failover_mode = 'ACTIVE_STANDBY', 
                        asa_failover_state = 'Primary - Active', 
                        asa_failover_mate = cdo_sdk_python.models.asa_failover_mate.AsaFailoverMate(
                            failover_state = 'Primary - Active', 
                            serial = 'JAD24500xxx', 
                            software_version = '9.18.8', ), 
                        asa_license_entitlements = {
                            'key' : ''
                            }, 
                        ftd_licenses = [
                            ''
                            ], 
                        snort_version = '', 
                        ftd_performance_tier = '', 
                        cd_fmc_info = cdo_sdk_python.models.cd_fmc_info.CdFmcInfo(
                            cli_key = 'configure manager add acme.app.us.cdo.cisco.com E2jsyiZggyeCfFfCUaMK2kD1a1bxxx 5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx acme.app.us.cdo.cisco.com', 
                            reg_key = 'E2jsyiZggyeCfFfCUaMK2kD1a1bxxx', 
                            nat_id = '5Do6FwUaXY4EFlyraC2yVnxodLxhuxxx', ), 
                        on_prem_fmc_info = cdo_sdk_python.models.on_prem_fmc_info.OnPremFmcInfo(
                            name = 'my-example-fmc', 
                            address = 'my-example-fmc.example.com:443', ), 
                        meraki_deployment_mode = 'ROUTED', 
                        meraki_network = cdo_sdk_python.models.network.Network(
                            id = 'L_583779101697901532', 
                            name = 'meraki-network', 
                            timezone = 'UTC +0', ), 
                        state = '', 
                        state_machine_details = cdo_sdk_python.models.state_machine_details.StateMachineDetails(
                            identifier = '', 
                            last_error = cdo_sdk_python.models.state_machine_error.StateMachineError(
                                error_message = '', 
                                error_code = '', 
                                action_identifier = '', ), ), 
                        labels = cdo_sdk_python.models.labels.Labels(
                            grouped_labels = {"group1":["label-1","label-2"],"group2":["label-1","label-2"]}, 
                            ungrouped_labels = ["label-a","label-b","label-c"], ), )
                    ]
            )
        else:
            return DevicePage(
        )
        """

    def testDevicePage(self):
        """Test DevicePage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

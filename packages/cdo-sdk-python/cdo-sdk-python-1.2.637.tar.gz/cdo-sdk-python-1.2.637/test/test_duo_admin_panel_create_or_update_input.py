# coding: utf-8

"""
    Cisco Defense Orchestrator API

    Use the interactive documentation to explore the endpoints CDO has to offer

    The version of the OpenAPI document: 0.0.1
    Contact: cdo.tac@cisco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cdo_sdk_python.models.duo_admin_panel_create_or_update_input import DuoAdminPanelCreateOrUpdateInput

class TestDuoAdminPanelCreateOrUpdateInput(unittest.TestCase):
    """DuoAdminPanelCreateOrUpdateInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DuoAdminPanelCreateOrUpdateInput:
        """Test DuoAdminPanelCreateOrUpdateInput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DuoAdminPanelCreateOrUpdateInput`
        """
        model = DuoAdminPanelCreateOrUpdateInput()
        if include_optional:
            return DuoAdminPanelCreateOrUpdateInput(
                name = 'My Duo Admin Panel',
                host = 'api-1aa2bbb3.duosecurity.com',
                integration_key = 'EIVJAJFK1Y25B1BWVSO',
                secret_key = 'b2Ln2DrBioS2sTI7dqRYh7DPoLsvYDm0wn5UbIKi',
                labels = cdo_sdk_python.models.labels.Labels(
                    grouped_labels = {"group1":["label-1","label-2"],"group2":["label-1","label-2"]}, 
                    ungrouped_labels = ["label-a","label-b","label-c"], )
            )
        else:
            return DuoAdminPanelCreateOrUpdateInput(
                name = 'My Duo Admin Panel',
                integration_key = 'EIVJAJFK1Y25B1BWVSO',
                secret_key = 'b2Ln2DrBioS2sTI7dqRYh7DPoLsvYDm0wn5UbIKi',
        )
        """

    def testDuoAdminPanelCreateOrUpdateInput(self):
        """Test DuoAdminPanelCreateOrUpdateInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

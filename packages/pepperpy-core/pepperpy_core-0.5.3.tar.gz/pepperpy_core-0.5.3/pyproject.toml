[tool.poetry]
name = "pepperpy-core"
version = "0.5.3"
description = "Core package for PepperPy Framework"
authors = ["Felipe Pimentel <fpimentel88@gmail.com>"]
readme = "README.md"
packages = [{ include = "pepperpy" }]
repository = "https://github.com/felipepimentel/pepperpy-core"
documentation = "https://felipepimentel.github.io/pepperpy-core/"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.12"
python-dotenv = "^1.0.1"
pydantic = "^2.10.5"
structlog = "^24.4.0"
pyyaml = "^6.0.2"
anyio = "^4.8.0"
types-aiofiles = "^24.1.0.20241221"
aiofiles = "^24.1.0"
aiohttp = "^3.11.11"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.25.2"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
black = "^24.10.0"
ruff = "^0.9.1"
mypy = "^1.14.1"
bandit = "^1.8.2"
python-semantic-release = "^9.16.1"
pre-commit = "^4.0.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1.3"
sphinx-rtd-theme = "^3.0.2"
sphinx-autodoc-typehints = "^3.0.0"
myst-parser = "^4.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.setuptools.package-data]
"pepperpy" = ["py.typed"]

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--cov=pepperpy --cov-report=xml --cov-report=term -v"

[tool.ruff]
line-length = 88
target-version = "py312"
extend-exclude = [
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".git",
    "__pycache__",
]

[tool.ruff.lint]
select = ["E", "F", "B", "I"]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.poetry.scripts]
check = "scripts.check:main"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true

[tool.semantic_release]
version_variables = ["pyproject.toml:version"]
commit_author = "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
commit_parser = "angular"
branch = "main"
upload_to_pypi = true
build_command = "poetry build"
repository = "pepperpy-core"
repository_owner = "felipepimentel"

[tool.semantic_release.remote]
type = "github"
token = "${GH_TOKEN}"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
upload_to_repository = true

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.publish.pypi]
build = true
remove_dist = true
token = "${POETRY_PYPI_TOKEN_PYPI}"
